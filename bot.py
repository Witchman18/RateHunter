# --- START OF FILE bot (8).py ---

import os
import asyncio
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å timestamp
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP

from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET, recv_window=20000)
# === –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏ ===
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñÔ∏è –ü–ª–µ—á–æ"],
    ["üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–Ω–∞–π–ø–µ—Ä–æ–º"] # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
]
latest_top_pairs = []
sniper_active = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_MARJA, SET_PLECHO = range(2)
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–Ω–∞–π–ø–µ—Ä–∞
SET_MIN_TURNOVER_CONFIG, SET_MIN_PROFIT_CONFIG = range(10, 12)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
ENTRY_WINDOW_START_SECONDS = 60
ENTRY_WINDOW_END_SECONDS = 20
POST_FUNDING_WAIT_SECONDS = 1
MAKER_ORDER_WAIT_SECONDS_ENTRY = 7
MAKER_ORDER_WAIT_SECONDS_EXIT = 2
SNIPER_LOOP_INTERVAL_SECONDS = 5
DEFAULT_MAX_CONCURRENT_TRADES = 1
MAX_PAIRS_TO_CONSIDER_PER_CYCLE = 5

# "–£–º–Ω—ã–µ" –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–µ –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DEFAULT_MIN_TURNOVER_USDT = Decimal("7500000") # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
DEFAULT_MIN_EXPECTED_PNL_USDT = Decimal("-10.0")  # –í–†–ï–ú–ï–ù–ù–û: –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MIN_FUNDING_RATE_ABS_FILTER = Decimal("0.0001") # 0.01%
MAX_ALLOWED_SPREAD_PCT_FILTER = Decimal("2.0")  # –í–†–ï–ú–ï–ù–ù–û: 2%, –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ø—Ä–µ–¥
MAKER_FEE_RATE = Decimal("0.0002") # –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ (0.02% Bybit non-VIP Derivatives Maker)
TAKER_FEE_RATE = Decimal("0.00055")# –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ (0.055% Bybit non-VIP Derivatives Taker)
MIN_QTY_TO_MARKET_FILL_PCT_ENTRY = Decimal("0.20")
ORDERBOOK_FETCH_RETRY_DELAY = 0.2

# --- Helper –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ ---
def ensure_chat_settings(chat_id: int):
    if chat_id not in sniper_active:
        sniper_active[chat_id] = {
            'active': False,
            'real_marja': None,
            'real_plecho': None,
            'max_concurrent_trades': DEFAULT_MAX_CONCURRENT_TRADES,
            'ongoing_trades': {},
            # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            'min_turnover_usdt': DEFAULT_MIN_TURNOVER_USDT,
            'min_expected_pnl_usdt': DEFAULT_MIN_EXPECTED_PNL_USDT,
        }
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ
    sniper_active[chat_id].setdefault('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    sniper_active[chat_id].setdefault('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)
    sniper_active[chat_id].setdefault('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES)
    sniper_active[chat_id].setdefault('ongoing_trades', {})


# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    message = update.message
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id) # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    
    loading_message_id = None
    current_min_turnover_filter = sniper_active[chat_id].get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)


    try:
        if query:
            await query.answer()
            try:
                await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä...")
                loading_message_id = query.message.message_id
            except Exception as edit_err:
                print(f"Error editing message on callback: {edit_err}")
                sent_message = await context.bot.send_message(chat_id, "üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä...")
                loading_message_id = sent_message.message_id
        elif message:
            sent_message = await message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä...")
            loading_message_id = sent_message.message_id
        else:
            return

        response = session.get_tickers(category="linear")
        tickers = response.get("result", {}).get("list", [])
        if not tickers:
            result_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤."
            if loading_message_id:
                 await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=result_msg)
            return

        funding_data = []
        for t in tickers:
            symbol, rate_str, next_time_str, turnover_str = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("turnover24h")
            if not all([symbol, rate_str, next_time_str, turnover_str]): continue
            try:
                 rate_d, next_time_int, turnover_d = Decimal(rate_str), int(next_time_str), Decimal(turnover_str)
                 if turnover_d < current_min_turnover_filter: continue # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
                 if abs(rate_d) < MIN_FUNDING_RATE_ABS_FILTER: continue
                 funding_data.append((symbol, rate_d, next_time_int))
            except (ValueError, TypeError) as e:
                print(f"[Funding Data Error] Could not parse data for {symbol}: {e}")
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        if not latest_top_pairs:
            result_msg = f"üìä –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä (—Ñ–∏–ª—å—Ç—Ä –æ–±–æ—Ä–æ—Ç–∞: {current_min_turnover_filter:,.0f} USDT)."
        else:
            result_msg = f"üìä –¢–æ–ø –ø–∞—Ä (—Ñ–∏–ª—å—Ç—Ä –æ–±–æ—Ä.: {current_min_turnover_filter:,.0f} USDT):\n\n"
            now_ts_dt = datetime.utcnow().timestamp()
            for symbol, rate, ts_ms in latest_top_pairs:
                try:
                    delta_sec = int(ts_ms / 1000 - now_ts_dt)
                    if delta_sec < 0: delta_sec = 0
                    h, rem = divmod(delta_sec, 3600); m, s = divmod(rem, 60)
                    time_left = f"{h:01d}—á {m:02d}–º {s:02d}—Å"
                    direction = "üìà LONG (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç)" if rate < 0 else "üìâ SHORT (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç)"
                    result_msg += (f"üéüÔ∏è *{symbol}*\n{direction}\nüíπ –§–∞–Ω–¥–∏–Ω–≥: `{rate * 100:.4f}%`\n‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: `{time_left}`\n\n")
                except Exception as e:
                     result_msg += f"üéüÔ∏è *{symbol}* - _–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è_\n\n"

        if loading_message_id:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=result_msg.strip(), parse_mode='Markdown', disable_web_page_preview=True)

    except Exception as e:
        print(f"Error in show_top_funding: {e}"); import traceback; traceback.print_exc()
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}"
        try:
            if loading_message_id: await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=error_message)
            elif message: await message.reply_text(error_message)
            elif query: await query.message.reply_text(error_message)
        except Exception as inner_e: await context.bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç RateHunter. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –º—ã –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    original_message_id = context.user_data.pop('original_message_id', None)
    
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    if original_message_id:
        try:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞.
            # –ú—ã —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫ –≤–∏–¥—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞.
            # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
            # –ù–æ –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é.
            await context.bot.delete_message(chat_id=chat_id, message_id=original_message_id)
        except Exception as e:
            print(f"Error deleting original message on cancel: {e}")
    
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ–∫–∞–∂–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞
    # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ cancel –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∞—á–∞—Ç—ã—Ö –∏–∑ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞
    # –ï—Å–ª–∏ cancel –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ—Ç–∫—É–¥–∞-—Ç–æ –µ—â–µ, —ç—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å
    # –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å sniper_control_menu —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±—ã–ª–∏ –≤ –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ user_data –∫–ª—é—á–∏.
    # await send_final_config_message(chat_id, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –õ—É—á—à–µ, —á—Ç–æ–±—ã cancel –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–ª, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–∑—ã–≤–∞–ª –º–µ–Ω—é —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    return ConversationHandler.END


async def send_final_config_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, message_to_edit: Update = None):
    ensure_chat_settings(chat_id)
    settings = sniper_active[chat_id]
    
    marja = settings.get('real_marja')
    plecho = settings.get('real_plecho')
    max_trades = settings.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES)
    is_active = settings.get('active', False)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    min_turnover = settings.get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    min_pnl = settings.get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)

    marja_display = marja if marja is not None else '–ù–µ —É—Å—Ç.'
    plecho_display = plecho if plecho is not None else '–ù–µ —É—Å—Ç.'

    summary_parts = [
        f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RateHunter:**",
        f"üí∞ –ú–∞—Ä–∂–∞ (1 —Å–¥–µ–ª–∫–∞): `{marja_display}` USDT",
        f"‚öñÔ∏è –ü–ª–µ—á–æ: `{plecho_display}`x",
        f"üî¢ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫: `{max_trades}`",
        f"üíß –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç: `{min_turnover:,.0f}` USDT",
        f"üéØ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç: `{min_pnl}` USDT",
        f"üö¶ –°—Ç–∞—Ç—É—Å —Å–Ω–∞–π–ø–µ—Ä–∞: *{status_text}*"
    ]
    
    if marja is None or plecho is None:
        summary_parts.append("\n‚ÄºÔ∏è *–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–Ω–∞–π–ø–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä–∂—É –∏ –ø–ª–µ—á–æ!*")
    
    summary_text = "\n\n".join(summary_parts) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    buttons = []
    status_button_text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä" if is_active else "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä"
    buttons.append([InlineKeyboardButton(f"{'üî¥' if is_active else 'üü¢'} {status_button_text}", callback_data="toggle_sniper")])
    
    trade_limit_buttons = []
    for i in range(1, 6):
        text = f"[{i}]" if i == max_trades else f"{i}"
        trade_limit_buttons.append(InlineKeyboardButton(text, callback_data=f"set_max_trades_{i}"))
    buttons.append([InlineKeyboardButton("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫:", callback_data="noop")] + trade_limit_buttons)

    buttons.append([InlineKeyboardButton(f"üíß –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç: {min_turnover:,.0f} USDT", callback_data="set_min_turnover_config")])
    buttons.append([InlineKeyboardButton(f"üéØ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç: {min_pnl} USDT", callback_data="set_min_profit_config")])
    buttons.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")])
    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        if message_to_edit and message_to_edit.callback_query and message_to_edit.callback_query.message:
            await message_to_edit.callback_query.edit_message_text(text=summary_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=chat_id, text=summary_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        print(f"Error sending/editing final config message to {chat_id}: {e}")
        if message_to_edit: # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
             await context.bot.send_message(chat_id=chat_id, text=summary_text + "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é)", reply_markup=reply_markup, parse_mode='Markdown')


# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò/–ü–õ–ï–ß–ê =====================
async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ –¥–ª—è –û–î–ù–û–ô —Å–¥–µ–ª–∫–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; ensure_chat_settings(chat_id)
    try:
        marja = Decimal(update.message.text.strip().replace(",", "."))
        if marja <= 0: await update.message.reply_text("‚ùå –ú–∞—Ä–∂–∞ > 0."); return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞: {marja} USDT")
        await send_final_config_message(chat_id, context) 
    except (ValueError, TypeError): await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ (100 –∏–ª–∏ 55.5)."); return SET_MARJA # –ü—Ä–æ—Å–∏–º —Å–Ω–æ–≤–∞
    except Exception as e: await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}"); return ConversationHandler.END
    return ConversationHandler.END

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 10):")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; ensure_chat_settings(chat_id)
    try:
        plecho = Decimal(update.message.text.strip().replace(",", "."))
        if not (0 < plecho <= 100): await update.message.reply_text("‚ùå –ü–ª–µ—á–æ > 0 –∏ <= 100."); return ConversationHandler.END
        sniper_active[chat_id]["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ: {plecho}x")
        await send_final_config_message(chat_id, context)
    except (ValueError, TypeError): await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ (10)."); return SET_PLECHO
    except Exception as e: await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}"); return ConversationHandler.END
    return ConversationHandler.END

# ===================== –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ù–ê–ô–ü–ï–†–û–ú =====================
async def sniper_control_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    # –ï—Å–ª–∏ update.callback_query —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç –º—ã –ø—Ä–∏—à–ª–∏ –∏–∑ inline –∫–Ω–æ–ø–∫–∏ –∏ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    # –ò–Ω–∞—á–µ, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ ReplyKeyboard, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_final_config_message(chat_id, context, message_to_edit=update if update.callback_query else None)


async def sniper_control_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
    chat_id = query.message.chat_id
    data = query.data
    ensure_chat_settings(chat_id)
    chat_settings = sniper_active[chat_id]

    action_taken = False # –§–ª–∞–≥, —á—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –º–µ–Ω—é –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å

    if data == "toggle_sniper":
        if chat_settings.get('real_marja') is None or chat_settings.get('real_plecho') is None:
            await context.bot.send_message(chat_id, "‚ÄºÔ∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Ä–∂–∞ –∏/–∏–ª–∏ –ø–ª–µ—á–æ! –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —Ç.–∫. —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            new_status = not chat_settings.get('active', False)
            chat_settings['active'] = new_status
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ –º–µ–Ω—é –æ–±–Ω–æ–≤–∏—Ç—å.
            await context.bot.send_message(chat_id, "üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!" if new_status else "üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            action_taken = True
    elif data.startswith("set_max_trades_"):
        try:
            new_max_trades = int(data.split("_")[-1])
            if 1 <= new_max_trades <= 5:
                if chat_settings.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES) != new_max_trades:
                    chat_settings['max_concurrent_trades'] = new_max_trades
                    # await context.bot.send_message(chat_id, f"‚úÖ –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {new_max_trades}") # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–ª–∏—à–Ω–µ, –µ—Å–ª–∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
                    action_taken = True
                else: # –õ–∏–º–∏—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    pass # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –º–µ–Ω—é –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å
            else: # –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ö–æ—Ç—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ 1-5)
                 await context.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫.")
        except (ValueError, IndexError): 
             await context.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫.")
    elif data == "show_top_pairs_inline":
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_top_funding(update, context) 
        # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞, –º—ã –ù–ï —Ö–æ—Ç–∏–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ.
        # –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        return 
    elif data == "noop": # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
        return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    
    # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ –º–µ–Ω—é, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    if action_taken:
        await send_final_config_message(chat_id, context, message_to_edit=update)
    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–µ–Ω—è–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫),
    # —Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–º–æ—Ä–≥–∞–Ω–∏—è".

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–Ω. –û–±–æ—Ä–æ—Ç–∞ ---
async def ask_min_turnover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É!
    chat_id = query.message.chat_id
    ensure_chat_settings(chat_id)
    current_val = sniper_active[chat_id].get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    try:
        await query.delete_message()
    except Exception as e:
        print(f"Error deleting old menu message in ask_min_turnover: {e}")
        # –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.
        # –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –º—ã –Ω–µ –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    sent_message = await context.bot.send_message(
        chat_id, 
        f"üíß –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Å—É—Ç–æ—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç –≤ USDT (—Ç–µ–∫—É—â–µ–µ: {current_val:,.0f}).\n–ü—Ä–∏–º–µ—Ä: 5000000\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    context.user_data['prompt_message_id'] = sent_message.message_id 
    return SET_MIN_TURNOVER_CONFIG

async def save_min_turnover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    prompt_message_id = context.user_data.pop('prompt_message_id', None)
    user_input_message_id = update.message.message_id
    
    should_send_new_menu = True # –§–ª–∞–≥, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—â–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞)

    try:
        value_str = update.message.text.strip().replace(",", "")
        value = Decimal(value_str)
        if value < 0: 
            await update.message.reply_text("‚ùå –û–±–æ—Ä–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
            should_send_new_menu = False # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤–æ–º –º–µ–Ω—é
        else:
            sniper_active[chat_id]['min_turnover_usdt'] = value
            await update.message.reply_text(f"‚úÖ –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value:,.0f} USDT")
            
    except (ValueError, TypeError): 
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
        should_send_new_menu = False
    except Exception as e: 
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.")
        should_send_new_menu = False
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º)
    try: 
        await context.bot.delete_message(chat_id=chat_id, message_id=user_input_message_id)
    except Exception as e: print(f"Error deleting user input message: {e}")
    
    if prompt_message_id:
        try: 
            await context.bot.delete_message(chat_id=chat_id, message_id=prompt_message_id)
        except Exception as e: print(f"Error deleting prompt message: {e}")

    if should_send_new_menu:
        await send_final_config_message(chat_id, context) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        
    return ConversationHandler.END
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–Ω. –ü—Ä–æ—Ñ–∏—Ç–∞ ---
async def ask_min_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É!
    chat_id = query.message.chat_id
    ensure_chat_settings(chat_id)
    current_val = sniper_active[chat_id].get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)
    
    try:
        await query.delete_message()
    except Exception as e:
        print(f"Error deleting old menu message in ask_min_profit: {e}")
        
    sent_message = await context.bot.send_message(
        chat_id, 
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ USDT (—Ç–µ–∫—É—â–µ–µ: {current_val}).\n–ü—Ä–∏–º–µ—Ä: 0.05\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    context.user_data['prompt_message_id'] = sent_message.message_id
    return SET_MIN_PROFIT_CONFIG

async def save_min_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    prompt_message_id = context.user_data.pop('prompt_message_id', None)
    user_input_message_id = update.message.message_id
    
    should_send_new_menu = True

    try:
        value_str = update.message.text.strip().replace(",", ".")
        value = Decimal(value_str)
        sniper_active[chat_id]['min_expected_pnl_usdt'] = value
        await update.message.reply_text(f"‚úÖ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} USDT")
            
    except (ValueError, TypeError): 
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05). –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
        should_send_new_menu = False
    except Exception as e: 
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.")
        should_send_new_menu = False
    
    try: 
        await context.bot.delete_message(chat_id=chat_id, message_id=user_input_message_id)
    except Exception as e: print(f"Error deleting user input message for profit: {e}")
    
    if prompt_message_id:
        try: 
            await context.bot.delete_message(chat_id=chat_id, message_id=prompt_message_id)
        except Exception as e: print(f"Error deleting prompt message for profit: {e}")

    if should_send_new_menu:
        await send_final_config_message(chat_id, context) 
        
    return ConversationHandler.END


# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¢–†–ï–ô–î–ò–ù–ì) =====================
def get_position_direction(rate: Decimal) -> str:
    if rate is None: return "NONE"
    if rate < Decimal("0"): return "Buy"
    elif rate > Decimal("0"): return "Sell"
    else: return "NONE"

def quantize_qty(raw_qty: Decimal, qty_step: Decimal) -> Decimal:
    if qty_step <= Decimal("0"): return raw_qty.quantize(Decimal('1e-8'), rounding=ROUND_DOWN)
    return (raw_qty // qty_step) * qty_step

def quantize_price(raw_price: Decimal, tick_size: Decimal) -> Decimal:
    if tick_size <= Decimal("0"): return raw_price.quantize(Decimal('1e-8'), rounding=ROUND_DOWN)
    return (raw_price / tick_size).quantize(Decimal("1"), rounding=ROUND_HALF_UP) * tick_size

async def get_orderbook_snapshot_and_spread(session, symbol, category="linear", retries=3):
    for attempt in range(retries):
        try:
            response = session.get_orderbook(category=category, symbol=symbol, limit=1)
            if response and response.get("retCode") == 0 and response.get("result"):
                ob = response["result"]
                if ob.get('b') and ob.get('a') and ob['b'] and ob['a'] and ob['b'][0] and ob['a'][0]: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
                    bid_str, ask_str = ob['b'][0][0], ob['a'][0][0]
                    if not bid_str or not ask_str: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                        print(f"[Orderbook] Empty bid/ask string for {symbol}"); await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY); continue
                    bid, ask = Decimal(bid_str), Decimal(ask_str)
                    if bid <= 0 or ask <= 0 or ask < bid: print(f"[Orderbook] Invalid bid/ask value for {symbol}: {bid}/{ask}"); await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY); continue
                    spread_abs = ask - bid; mid = (ask + bid) / 2
                    return {"best_bid": bid, "best_ask": ask, "mid_price": mid, 
                            "spread_abs": spread_abs, "spread_rel_pct": (spread_abs / mid) * 100 if mid > 0 else Decimal("0")}
            # print(f"[Orderbook] Attempt {attempt+1} failed for {symbol}: {response.get('retMsg')}")
        except Exception as e: print(f"[Orderbook] Attempt {attempt+1} for {symbol}: {e}")
        if attempt < retries - 1: await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY)
    return None

async def calculate_pre_trade_pnl_estimate(
    symbol: str, funding_rate: Decimal, position_size_usdt: Decimal, target_qty: Decimal,
    best_bid: Decimal, best_ask: Decimal, open_side: str 
):
    if not all([position_size_usdt > 0, target_qty > 0, best_bid > 0, best_ask > 0, funding_rate is not None]): 
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ PnL (–≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)."
    
    actual_funding_gain = Decimal("0")
    if open_side == "Buy": 
        actual_funding_gain = position_size_usdt * abs(funding_rate)
    elif open_side == "Sell": 
        actual_funding_gain = position_size_usdt * funding_rate
    
    pessimistic_entry_price = best_ask if open_side == "Buy" else best_bid
    pessimistic_exit_price = best_bid if open_side == "Buy" else best_ask
    
    price_pnl_component = Decimal("0")
    if open_side == "Buy":
        price_pnl_component = (pessimistic_exit_price - pessimistic_entry_price) * target_qty
    elif open_side == "Sell":
        price_pnl_component = (pessimistic_entry_price - pessimistic_exit_price) * target_qty

    fees_entry_pessimistic = pessimistic_entry_price * target_qty * TAKER_FEE_RATE 
    fees_exit_pessimistic = pessimistic_exit_price * target_qty * TAKER_FEE_RATE
    total_fees_pessimistic = fees_entry_pessimistic + fees_exit_pessimistic
    
    net_pnl_pessimistic = actual_funding_gain + price_pnl_component - total_fees_pessimistic
    
    pnl_calc_details_msg = (
        f"  –°–∏–º–≤–æ–ª: *{symbol}*\n"
        f"  –ù–∞–ø—Ä.: {open_side}, –û–±—ä–µ–º: {target_qty}\n"
        f"  –°—Ç–∞–≤–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (API): {funding_rate*100:.4f}%\n"
        f"  Bid/Ask –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞: {best_bid}/{best_ask}\n"
        f"  –†–∞—Å—á. –ø–µ—Å—Å–∏–º. –≤—Ö–æ–¥: {pessimistic_entry_price}\n"
        f"  –†–∞—Å—á. –ø–µ—Å—Å–∏–º. –≤—ã—Ö–æ–¥: {pessimistic_exit_price}\n"
        f"  –§–∞–Ω–¥–∏–Ω–≥ (–æ–∂–∏–¥. –¥–æ—Ö–æ–¥): `{actual_funding_gain:+.4f}` USDT\n"
        f"  –¶–µ–Ω–∞ (–æ–∂–∏–¥. PnL –æ—Ç —Å–ø—Ä–µ–¥–∞): `{price_pnl_component:+.4f}` USDT\n"
        f"  –ö–æ–º–∏—Å—Å–∏–∏ (Taker/Taker): `{-total_fees_pessimistic:.4f}` USDT\n"
        f"  –ò–¢–û–ì–û (–ø–µ—Å—Å–∏–º.): `{net_pnl_pessimistic:+.4f}` USDT"
    )
    return net_pnl_pessimistic, pnl_calc_details_msg

async def get_order_status_robust(session, order_id, symbol, category="linear", max_retries=3, delay=0.5):
    for _ in range(max_retries):
        try:
            r = session.get_order_history(category=category, orderId=order_id, limit=1)
            if r and r.get("retCode") == 0 and r.get("result", {}).get("list"):
                od = r["result"]["list"][0]
                if od.get("orderId") == order_id: return od
        except Exception as e: print(f"[Order Status] Error for {order_id}: {e}")
        if _ < max_retries - 1: await asyncio.sleep(delay)
    return None

async def place_limit_order_with_retry(
    session, app, chat_id, symbol, side, qty, price, time_in_force="PostOnly", 
    reduce_only=False, max_wait_seconds=7, check_interval_seconds=0.5 ):
    order_id = None
    try:
        p = {"category": "linear", "symbol": symbol, "side": side, "orderType": "Limit", "qty": str(qty), "price": str(price), "timeInForce": time_in_force}
        if reduce_only: p["reduceOnly"] = True
        r = session.place_order(**p)
        if not (r and r.get("retCode") == 0 and r.get("result", {}).get("orderId")):
            err = f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Maker ({symbol}): {r.get('retMsg', 'Unknown') if r else 'No resp'}"
            await app.bot.send_message(chat_id, f"‚ùå {err}"); return {'status': 'ErrorPlacing', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'message': err, 'order_id': None}
        
        order_id = r["result"]["orderId"]
        act = '–í—ã—Ö–æ–¥' if reduce_only else '–í—Ö–æ–¥'
        await app.bot.send_message(chat_id, f"‚è≥ {act} Maker @{price} (ID: ...{order_id[-6:]}) –¥–ª—è {symbol}")
        
        waited = Decimal("0")
        while waited < Decimal(str(max_wait_seconds)): # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(float(check_interval_seconds)); waited += Decimal(str(check_interval_seconds))
            oi = await get_order_status_robust(session, order_id, symbol)
            if oi:
                s, eq_s, ap_s, fee_s = oi.get("orderStatus"), oi.get("cumExecQty", "0"), oi.get("avgPrice", "0"), oi.get("cumExecFee", "0")
                eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
                ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

                if s == "Filled": await app.bot.send_message(chat_id, f"‚úÖ Maker ...{order_id[-6:]} ({symbol}) –ü–û–õ–ù–û–°–¢–¨–Æ –∏—Å–ø–æ–ª–Ω–µ–Ω: {eq_d} @ {ap_d}"); return {'status': 'Filled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Filled'}
                if s == "PartiallyFilled": print(f"Maker ...{order_id[-6:]} –ß–ê–°–¢–ò–ß–ù–û: {eq_d}. –ñ–¥–µ–º."); continue
                if s in ["Cancelled", "Rejected", "Deactivated", "Expired", "New"]: 
                    status_override = "CancelledPostOnly" if s == "New" and time_in_force == "PostOnly" else s
                    msg = f"‚ö†Ô∏è Maker ...{order_id[-6:]} —Å—Ç–∞—Ç—É—Å: {status_override}. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"
                    await app.bot.send_message(chat_id, msg); return {'status': status_override, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': msg}
        
        final_oi = await get_order_status_robust(session, order_id, symbol) # Timeout
        if final_oi:
            s, eq_s, ap_s, fee_s = final_oi.get("orderStatus"), final_oi.get("cumExecQty", "0"), final_oi.get("avgPrice", "0"), final_oi.get("cumExecFee", "0")
            eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
            ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(final_oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

            if s not in ["Filled", "Cancelled", "Rejected", "Deactivated", "Expired"]:
                try: session.cancel_order(category="linear", symbol=symbol, orderId=order_id); await app.bot.send_message(chat_id, f"‚è≥ Maker ...{order_id[-6:]} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"); return {'status': 'CancelledByTimeout', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Cancelled by timeout'}
                except Exception as ce: await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã Maker ...{order_id[-6:]}: {ce}"); return {'status': 'ErrorCancelling', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': str(ce)}
            return {'status': s, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': f'Final status: {s}'}
        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å Maker ...{order_id[-6:]}"); return {'status': 'ErrorNoStatusAfterTimeout', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': 'Could not get final status'}
    except Exception as e:
        err_txt = f"–ö–†–ò–¢.–û–®–ò–ë–ö–ê place_limit_order ({symbol}): {e}"; print(err_txt); import traceback; traceback.print_exc(); await app.bot.send_message(chat_id, f"‚ùå {err_txt}")
        if order_id:
            oi_exc = await get_order_status_robust(session, order_id, symbol)
            if oi_exc: eq_d=Decimal(oi_exc.get("cumExecQty","0")); ap_d=Decimal(oi_exc.get("avgPrice","0")); fee_d=Decimal(oi_exc.get("cumExecFee","0")); return {'status':'ExceptionAfterPlace','executed_qty':eq_d,'avg_price':ap_d,'fee':fee_d,'order_id':order_id, 'message': str(e)}
        return {'status':'Exception','executed_qty':Decimal("0"),'avg_price':Decimal("0"),'fee':Decimal("0"),'order_id':order_id, 'message': str(e)}

async def place_market_order_robust( session, app, chat_id, symbol, side, qty, time_in_force="ImmediateOrCancel", reduce_only=False):
    order_id = None
    try:
        p = {"category": "linear", "symbol": symbol, "side": side, "orderType": "Market", "qty": str(qty), "timeInForce": time_in_force}
        if reduce_only: p["reduceOnly"] = True
        r = session.place_order(**p)
        if not (r and r.get("retCode") == 0 and r.get("result", {}).get("orderId")):
            ret_msg = r.get('retMsg', 'Unknown') if r else 'No resp'
            err_msg = f"‚ùå –û—à–∏–±–∫–∞ –ú–∞—Ä–∫–µ—Ç ({symbol}): {ret_msg}"
            if r and (r.get('retCode') == 110007 or "not enough" in ret_msg.lower() or "insufficient" in ret_msg.lower()): err_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –ú–∞—Ä–∫–µ—Ç ({symbol}): {ret_msg}"
            print(err_msg); await app.bot.send_message(chat_id, err_msg); return {'status': 'ErrorPlacingMarket', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': None, 'message': err_msg}

        order_id = r["result"]["orderId"]
        act = '–≤—ã—Ö–æ–¥' if reduce_only else '–≤—Ö–æ–¥'
        await app.bot.send_message(chat_id, f"üõí –ú–∞—Ä–∫–µ—Ç ({act}) {symbol} ID: ...{order_id[-6:]}. –ü—Ä–æ–≤–µ—Ä—è—é...")
        await asyncio.sleep(1.5) # –î–∞–µ–º –±–∏—Ä–∂–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä IOC
        oi = await get_order_status_robust(session, order_id, symbol)
        if oi:
            s, eq_s, ap_s, fee_s = oi.get("orderStatus"), oi.get("cumExecQty", "0"), oi.get("avgPrice", "0"), oi.get("cumExecFee", "0")
            eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
            ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

            if s == "Filled": await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}) –ò–°–ü–û–õ–ù–ï–ù: {eq_d} @ {ap_d}"); return {'status': 'Filled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Market Filled'}
            if s == "PartiallyFilled" and time_in_force == "ImmediateOrCancel": await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç IOC ...{order_id[-6:]} –ß–ê–°–¢–ò–ß–ù–û: {eq_d} @ {ap_d}"); return {'status': 'PartiallyFilled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Market IOC PartiallyFilled'}
            if eq_d == Decimal("0") and s in ["Cancelled", "Rejected", "Deactivated", "Expired"]: msg = f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç IOC ...{order_id[-6:]} ({symbol}) –ù–ï –ò–°–ü–û–õ–ù–ò–õ –ù–ò–ß–ï–ì–û (—Å—Ç–∞—Ç—É—Å: {s})."; await app.bot.send_message(chat_id, msg); return {'status': s, 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': msg}
            msg = f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}): {s}. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"; await app.bot.send_message(chat_id, msg); return {'status': s, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': msg}
        
        msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω."; await app.bot.send_message(chat_id, msg); return {'status': 'ErrorNoStatusMarket', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': msg}
    except Exception as e:
        err_txt = f"–ö–†–ò–¢.–û–®–ò–ë–ö–ê place_market_order ({symbol}): {e}"; print(err_txt); import traceback; traceback.print_exc(); await app.bot.send_message(chat_id, f"‚ùå {err_txt}")
        return {'status':'ExceptionMarket','executed_qty':Decimal("0"),'avg_price':Decimal("0"),'fee':Decimal("0"),'order_id':order_id, 'message': str(e)}

async def get_current_position_info(session, symbol, category="linear"):
    try:
        r = session.get_positions(category=category, symbol=symbol)
        if r and r.get("retCode") == 0:
            pl = r.get("result", {}).get("list", [])
            if pl: # –î–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ä–µ–∂–∏–º–µ One-Way –±—É–¥–µ—Ç –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–≤–µ –¥–ª—è Hedge Mode
                for pd in pl:
                    if pd.get("symbol") == symbol and Decimal(pd.get("size", "0")) > Decimal("0"):
                        return {"size": Decimal(pd.get("size", "0")), "side": pd.get("side"), 
                                "avg_price": Decimal(pd.get("avgPrice", "0")), "liq_price": Decimal(pd.get("liqPrice", "0")), 
                                "unrealised_pnl": Decimal(pd.get("unrealisedPnl", "0"))}
        return None # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
    except Exception as e: print(f"–û—à–∏–±–∫–∞ get_current_position_info ({symbol}): {e}"); return None

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================
async def funding_sniper_loop(app: ApplicationBuilder): # app is Application
    print(" Sniper loop started ".center(50, "="))
    while True:
        await asyncio.sleep(SNIPER_LOOP_INTERVAL_SECONDS)
        try:
            current_time_epoch = time.time()
            tickers_response = session.get_tickers(category="linear")
            all_tickers = tickers_response.get("result", {}).get("list", [])
            if not all_tickers: continue

            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
            globally_candidate_pairs = []
            for t in all_tickers:
                symbol, rate_s, next_ts_s, turnover_s = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("turnover24h")
                if not all([symbol, rate_s, next_ts_s, turnover_s]): continue
                try:
                    rate_d, next_ts_e, turnover_d = Decimal(rate_s), int(next_ts_s) / 1000, Decimal(turnover_s)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –º—è–≥–∫–∏–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞, 
                    # –∏–ª–∏ DEFAULT_MIN_TURNOVER_USDT –µ—Å–ª–∏ –æ–Ω –≤—ã—à–µ —á–µ–º —É –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤.
                    # –ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –ø—Ä–æ—Å—Ç–æ –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∞ –ø–æ—Ç–æ–º –ø–æ —á–∞—Ç–∞–º.
                    if turnover_d < DEFAULT_MIN_TURNOVER_USDT / 2 : continue # –ì—Ä—É–±—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
                    if abs(rate_d) < MIN_FUNDING_RATE_ABS_FILTER: continue
                    seconds_left = next_ts_e - current_time_epoch
                    if not (ENTRY_WINDOW_END_SECONDS <= seconds_left <= ENTRY_WINDOW_START_SECONDS): continue
                    
                    is_new_candidate = not any(cp_exist["symbol"] == symbol for cp_exist in globally_candidate_pairs)
                    if is_new_candidate:
                         globally_candidate_pairs.append({"symbol": symbol, "rate": rate_d, "next_ts": next_ts_e, "seconds_left": seconds_left, "turnover": turnover_d})
                except (ValueError, TypeError): continue
            
            if not globally_candidate_pairs: continue
            globally_candidate_pairs.sort(key=lambda x: abs(x["rate"]), reverse=True)

            for pair_info in globally_candidate_pairs[:1]: # –í–†–ï–ú–ï–ù–ù–û: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –û–î–ù–û–ô —Ç–æ–ø–æ–≤–æ–π –ø–∞—Ä–µ
                s_sym, s_rate, s_ts, s_sec_left, s_turnover = pair_info["symbol"], pair_info["rate"], pair_info["next_ts"], pair_info["seconds_left"], pair_info["turnover"]
                s_open_side = get_position_direction(s_rate)
                if s_open_side == "NONE": continue

                for chat_id, chat_config in list(sniper_active.items()): # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
                    ensure_chat_settings(chat_id)
                    if not chat_config.get('active'): continue
                    if len(chat_config.get('ongoing_trades', {})) >= chat_config.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES): continue
                    if s_sym in chat_config.get('ongoing_trades', {}): continue
                    
                    s_marja, s_plecho = chat_config.get('real_marja'), chat_config.get('real_plecho')
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    chat_min_turnover = chat_config.get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
                    chat_min_pnl_user = chat_config.get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)

                    if not s_marja or not s_plecho: continue # –ú–∞—Ä–∂–∞ –∏ –ø–ª–µ—á–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã

                    # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    if s_turnover < chat_min_turnover: continue 
                    
                    orderbook_data = await get_orderbook_snapshot_and_spread(session, s_sym)
                                        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï orderbook_data = ... –∏ –ü–ï–†–ï–î if not orderbook_data:
                    log_prefix_tg = f"üîç {s_sym} ({chat_id}):" 

                    if not orderbook_data: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ –ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–µ–π
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.") 
                        print(f"[{s_sym}][{chat_id}] No orderbook data.")
                        continue
                    
                    s_bid, s_ask, s_mid, s_spread_pct = orderbook_data['best_bid'], orderbook_data['best_ask'], orderbook_data['mid_price'], orderbook_data['spread_rel_pct']
                    
                    # --- –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–ö–ê –ù–ê ---
                    spread_debug_msg = (
                        f"{log_prefix_tg} –°—Ç–∞–∫–∞–Ω:\n"
                        f"  Best Bid: {s_bid}\n"
                        f"  Best Ask: {s_ask}\n"
                        f"  Mid Price: {s_mid}\n"
                        f"  –°–ø—Ä–µ–¥ Abs: {s_ask - s_bid}\n"
                        f"  –°–ø—Ä–µ–¥ %: {s_spread_pct:.4f}%\n"
                        f"  –õ–∏–º–∏—Ç —Å–ø—Ä–µ–¥–∞ % (–≤—Ä–µ–º–µ–Ω–Ω–æ): {MAX_ALLOWED_SPREAD_PCT_FILTER}%"
                    )
                    await app.bot.send_message(chat_id, spread_debug_msg)
                    print(f"[{s_sym}][{chat_id}] OB Data: Bid={s_bid}, Ask={s_ask}, SpreadPct={s_spread_pct:.4f}%, SpreadLimit(temp)={MAX_ALLOWED_SPREAD_PCT_FILTER}%")
                    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–ö–ê –ù–ê ---

                    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º—è–≥–∫–∏–º (2%)
                    if s_spread_pct > MAX_ALLOWED_SPREAD_PCT_FILTER: 
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –§–ò–õ–¨–¢–†: –°–ø—Ä–µ–¥ ({s_spread_pct:.3f}%) > –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({MAX_ALLOWED_SPREAD_PCT_FILTER}%). –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Skipped due to spread ({s_spread_pct:.3f}%) > TEMP LIMIT {MAX_ALLOWED_SPREAD_PCT_FILTER}%")
                        continue
                    
                    # ... (–¥–∞–ª–µ–µ –≤–∞—à –∫–æ–¥: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ, —Ä–∞—Å—á–µ—Ç target_qty) ...
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º calculate_pre_trade_pnl_estimate
                    
                    print(f"[{s_sym}][{chat_id}] Pre-PNL Calc: Rate={s_rate}, PosSize={s_pos_size_usdt}, TargetQty={s_target_q}, Bid={s_bid}, Ask={s_ask}, Side={s_open_side}")
                    
                    est_pnl, pnl_calc_details_msg = await calculate_pre_trade_pnl_estimate(
                        s_sym, s_rate, s_pos_size_usdt, s_target_q, 
                        s_bid, s_ask, 
                        s_open_side
                    )
                    
                    print(f"[{s_sym}][{chat_id}] Post-PNL Calc: EstPNL={est_pnl}, Details='{pnl_calc_details_msg}'")

                    if est_pnl is None:
                        error_msg_pnl = pnl_calc_details_msg if pnl_calc_details_msg else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ PnL: {error_msg_pnl}. –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Skipped due to PnL calculation error: {error_msg_pnl}")
                        continue

                    current_min_pnl_filter_for_chat = chat_config.get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)

                    if est_pnl < current_min_pnl_filter_for_chat:
                        await app.bot.send_message(
                            chat_id, 
                            f"{log_prefix_tg} –û–∂–∏–¥. PnL ({est_pnl:.4f}) < –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ({current_min_pnl_filter_for_chat}). –ü—Ä–æ–ø—É—Å–∫.\n"
                            f"–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏:\n{pnl_calc_details_msg}", 
                            parse_mode='Markdown'
                        )
                        print(f"[{s_sym}][{chat_id}] Skipped due to EstPNL ({est_pnl:.4f}) < TEMP MinPNL ({current_min_pnl_filter_for_chat})")
                        continue
                    
                    await app.bot.send_message(
                        chat_id, 
                        f"‚úÖ {s_sym} ({chat_id}): –ü—Ä–æ—à–µ–ª –í–†–ï–ú–ï–ù–ù–´–ï –º—è–≥–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥. PnL: {est_pnl:.4f} USDT. –ù–∞—á–∏–Ω–∞—é –°–î–ï–õ–ö–£ –î–õ–Ø –¢–ï–°–¢–ê.\n"
                        f"–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏:\n{pnl_calc_details_msg}", 
                        parse_mode='Markdown'
                    )
                    
                    if not orderbook_data: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫."); continue
                    
                    s_bid, s_ask, s_mid, s_spread_pct = orderbook_data['best_bid'], orderbook_data['best_ask'], orderbook_data['mid_price'], orderbook_data['spread_rel_pct']
                    if s_spread_pct > MAX_ALLOWED_SPREAD_PCT_FILTER: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –°–ø—Ä–µ–¥ ({s_spread_pct:.3f}%) > –¥–æ–ø. ({MAX_ALLOWED_SPREAD_PCT_FILTER}%). –ü—Ä–æ–ø—É—Å–∫."); continue
                    
                    try: instr_info_resp = session.get_instruments_info(category="linear", symbol=s_sym); instr_info = instr_info_resp["result"]["list"][0]
                    except Exception as e: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {e}. –ü—Ä–æ–ø—É—Å–∫."); continue
                        
                    lot_f, price_f = instr_info["lotSizeFilter"], instr_info["priceFilter"]
                    s_min_q_instr, s_q_step, s_tick_size = Decimal(lot_f["minOrderQty"]), Decimal(lot_f["qtyStep"]), Decimal(price_f["tickSize"])
                    
                    s_pos_size_usdt = s_marja * s_plecho
                    if s_mid <= 0: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ–≤–µ—Ä–Ω–∞—è mid_price ({s_mid}). –ü—Ä–æ–ø—É—Å–∫."); continue
                    s_target_q = quantize_qty(s_pos_size_usdt / s_mid, s_q_step)

                    if s_target_q < s_min_q_instr: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –†–∞—Å—á. –æ–±—ä–µ–º {s_target_q} < –º–∏–Ω. ({s_min_q_instr}). –ü—Ä–æ–ø—É—Å–∫."); continue
                    
                    est_pnl, pnl_msg = await calculate_pre_trade_pnl_estimate(app, chat_id, s_sym, s_rate, s_pos_size_usdt, s_target_q, s_bid, s_ask, s_open_side)
                    if est_pnl is None: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ PnL. {pnl_msg if pnl_msg else ''}"); continue # pnl_msg –º–æ–∂–µ—Ç –±—ã—Ç—å None
                    if est_pnl < chat_min_pnl_user: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –û–∂–∏–¥. PnL ({est_pnl:.4f}) < –ø–æ—Ä–æ–≥–∞ ({chat_min_pnl_user}). –ü—Ä–æ–ø—É—Å–∫.\n{pnl_msg}", parse_mode='Markdown'); continue
                    
                    await app.bot.send_message(chat_id, f"‚úÖ {s_sym}: –ü—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥. PnL: {est_pnl:.4f} USDT. –ù–∞—á–∏–Ω–∞—é.\n{pnl_msg}", parse_mode='Markdown')

                    print(f"\n>>> Processing {s_sym} for chat {chat_id} (Rate: {s_rate*100:.4f}%, Left: {s_sec_left:.0f}s) <<<")
                    
                    trade_data = {
                        "symbol": s_sym, "open_side": s_open_side, "marja": s_marja, "plecho": s_plecho,
                        "funding_rate": s_rate, "next_funding_ts": s_ts,
                        "opened_qty": Decimal("0"), "closed_qty": Decimal("0"),
                        "total_open_value": Decimal("0"), "total_close_value": Decimal("0"),
                        "total_open_fee": Decimal("0"), "total_close_fee": Decimal("0"),
                        "actual_funding_fee": Decimal("0"), "target_qty": s_target_q,
                        "min_qty_instr": s_min_q_instr, "qty_step_instr": s_q_step, "tick_size_instr": s_tick_size,
                        "best_bid_at_entry": s_bid, "best_ask_at_entry": s_ask,
                        "price_decimals": len(price_f.get('tickSize', '0.1').split('.')[1]) if '.' in price_f.get('tickSize', '0.1') else 0
                    }
                    chat_config.setdefault('ongoing_trades', {})[s_sym] = trade_data
                    
                    try:
                        await app.bot.send_message(chat_id, f"üéØ –í—Ö–æ–∂—É –≤ —Å–¥–µ–ª–∫—É: *{s_sym}* ({'üìà LONG' if s_open_side == 'Buy' else 'üìâ SHORT'}), –§: `{s_rate*100:.4f}%`, –û—Å—Ç–∞–ª–æ—Å—å: `{s_sec_left:.0f}—Å`", parse_mode='Markdown')
                        try: session.set_leverage(category="linear", symbol=s_sym, buyLeverage=str(s_plecho), sellLeverage=str(s_plecho))
                        except Exception as e_lev:
                            if "110043" not in str(e_lev): raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç. –ø–ª–µ—á–æ {s_sym}: {e_lev}")
                        
                        op_qty, op_val, op_fee = Decimal("0"), Decimal("0"), Decimal("0")
                        maker_entry_p = quantize_price(s_bid if s_open_side == "Buy" else s_ask, s_tick_size)
                        
                        limit_res = await place_limit_order_with_retry(session, app, chat_id, s_sym, s_open_side, s_target_q, maker_entry_p, max_wait_seconds=MAKER_ORDER_WAIT_SECONDS_ENTRY)
                        if limit_res and limit_res['executed_qty'] > 0: op_qty += limit_res['executed_qty']; op_val += limit_res['executed_qty'] * limit_res['avg_price']; op_fee += limit_res['fee']
                        
                        rem_q_open = quantize_qty(s_target_q - op_qty, s_q_step)
                        if rem_q_open >= s_min_q_instr: # –î–æ–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ >= –º–∏–Ω. –∫–æ–ª-–≤—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                            proceed_market = not (op_qty >= s_min_q_instr and (rem_q_open / s_target_q) < MIN_QTY_TO_MARKET_FILL_PCT_ENTRY)
                            if proceed_market:
                                await app.bot.send_message(chat_id, f"üõí {s_sym}: –î–æ–±–∏–≤–∞—é —Ä—ã–Ω–∫–æ–º: {rem_q_open}")
                                market_res = await place_market_order_robust(session, app, chat_id, s_sym, s_open_side, rem_q_open)
                                if market_res and market_res['executed_qty'] > 0: op_qty += market_res['executed_qty']; op_val += market_res['executed_qty'] * market_res['avg_price']; op_fee += market_res['fee']
                            else: await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: Maker –∏—Å–ø–æ–ª–Ω–∏–ª {op_qty}. –û—Å—Ç–∞—Ç–æ–∫ {rem_q_open} –º–∞–ª, –Ω–µ –¥–æ–±–∏–≤–∞—é.")
                        
                        await asyncio.sleep(0.5) # –î–∞—Ç—å –≤—Ä–µ–º—è –¥–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                        actual_pos = await get_current_position_info(session, s_sym)
                        final_op_q, final_avg_op_p = Decimal("0"), Decimal("0")

                        if actual_pos and actual_pos['side'] == s_open_side:
                            final_op_q, final_avg_op_p = actual_pos['size'], actual_pos['avg_price']
                            if abs(final_op_q - op_qty) > s_q_step / 2: await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: –°–∏–Ω—Ö—Ä. –æ–±—ä–µ–º–∞. –ë–æ—Ç: {op_qty}, –ë–∏—Ä–∂–∞: {final_op_q}.")
                            if op_fee == Decimal("0") and final_op_q > 0: op_fee = Decimal("-1") # –ü—Ä–∏–∑–Ω–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
                        elif op_qty > 0 and not actual_pos: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ë–æ—Ç –¥—É–º–∞–ª –æ—Ç–∫—Ä—ã–ª {op_qty}, –Ω–∞ –±–∏—Ä–∂–µ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°—á–∏—Ç–∞–µ–º 0."); final_op_q = Decimal("0")
                        elif actual_pos and actual_pos['side'] != s_open_side and actual_pos['size'] > 0: raise ValueError(f"–ö–†–ò–¢! {s_sym}: –ù–∞ –±–∏—Ä–∂–µ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è {actual_pos['side']} {actual_pos['size']}. –†—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
                        else: final_op_q = op_qty # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0

                        trade_data["opened_qty"] = final_op_q
                        trade_data["total_open_value"] = final_op_q * final_avg_op_p if final_avg_op_p > 0 else op_val
                        trade_data["total_open_fee"] = op_fee

                        if final_op_q < s_min_q_instr: 
                            msg_err_qty = f"‚ùå {s_sym}: –§–∏–Ω–∞–ª. –æ—Ç–∫—Ä. –æ–±—ä–µ–º ({final_op_q}) < –º–∏–Ω. ({s_min_q_instr}). –û—Ç–º–µ–Ω–∞."
                            if final_op_q > Decimal("0"): msg_err_qty += " –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫..." # –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å
                            raise ValueError(msg_err_qty)
                        
                        avg_op_p_disp = final_avg_op_p if final_avg_op_p > 0 else ((op_val / op_qty) if op_qty > 0 else Decimal("0"))
                        num_decimals_price = trade_data['price_decimals']
                        await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{s_sym}* ({'LONG' if s_open_side == 'Buy' else 'SHORT'}) –æ—Ç–∫—Ä./–ø–æ–¥—Ç–≤.\n–û–±—ä–µ–º: `{final_op_q}`\n–°—Ä.—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{avg_op_p_disp:.{num_decimals_price}f}`\n–ö–æ–º. –æ—Ç–∫—Ä.: `{op_fee:.4f}` USDT", parse_mode='Markdown')
                        
                        wait_dur = max(0, s_ts - time.time()) + POST_FUNDING_WAIT_SECONDS
                        await app.bot.send_message(chat_id, f"‚è≥ {s_sym} –û–∂–∏–¥–∞—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (~{wait_dur:.0f} —Å–µ–∫)..."); await asyncio.sleep(wait_dur)

                        start_log_ts_ms, end_log_ts_ms = int((s_ts - 180)*1000), int((time.time()+5)*1000) # –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–∞
                        log_resp = session.get_transaction_log(category="linear",symbol=s_sym,type="SETTLEMENT",startTime=start_log_ts_ms,endTime=end_log_ts_ms,limit=20)
                        log_list, fund_log_val = log_resp.get("result",{}).get("list",[]), Decimal("0")
                        if log_list:
                            for entry in log_list: # –ò—â–µ–º –∑–∞–ø–∏—Å—å, –±–ª–∏–∂–∞–π—à—É—é –∫ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                                if abs(int(entry.get("transactionTime","0"))/1000 - s_ts) < 120: # 2 –º–∏–Ω—É—Ç—ã –æ–∫–Ω–æ –≤–æ–∫—Ä—É–≥ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                                    fund_log_val += Decimal(entry.get("change","0"))
                        trade_data["actual_funding_fee"] = fund_log_val
                        await app.bot.send_message(chat_id, f"üí∞ {s_sym} –§–∞–Ω–¥–∏–Ω–≥ (–∏–∑ –ª–æ–≥–∞): `{fund_log_val:.4f}` USDT", parse_mode='Markdown')
                        if fund_log_val == Decimal("0") and log_list : await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: SETTLEMENT –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—É–º–º–∞ 0 –∏–ª–∏ –Ω–µ –≤ –æ–∫–Ω–µ.")
                        elif not log_list: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (SETTLEMENT) –ø—É—Å—Ç.")


                        q_to_close = trade_data['opened_qty']
                        if q_to_close < s_min_q_instr: raise ValueError(f"‚ö†Ô∏è {s_sym}: –û–±—ä–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è ({q_to_close}) < –º–∏–Ω. ({s_min_q_instr}). –ó–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
                        
                        close_side = "Buy" if s_open_side == "Sell" else "Sell"
                        cl_qty, cl_val, cl_fee = Decimal("0"), Decimal("0"), Decimal("0")
                        await app.bot.send_message(chat_id, f"üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ {s_sym}: {s_open_side} {q_to_close}")

                        ob_exit = await get_orderbook_snapshot_and_spread(session, s_sym) # –°–≤–µ–∂–∏–π —Å—Ç–∞–∫–∞–Ω –¥–ª—è Maker —Ü–µ–Ω—ã
                        maker_close_p = Decimal("0")
                        if ob_exit: maker_close_p = quantize_price(ob_exit['best_ask'] if close_side == "Sell" else ob_exit['best_bid'], s_tick_size) # –ü—Ä–æ–¥–∞–µ–º –ø–æ –±–∏–¥—É, –ø–æ–∫—É–ø–∞–µ–º –ø–æ –∞—Å–∫—É (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è)
                        
                        if maker_close_p > 0: # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å Maker'–æ–º
                            limit_cl_res = await place_limit_order_with_retry(session,app,chat_id,s_sym,close_side,q_to_close,maker_close_p,reduce_only=True,max_wait_seconds=MAKER_ORDER_WAIT_SECONDS_EXIT)
                            if limit_cl_res and limit_cl_res['executed_qty'] > 0: cl_qty+=limit_cl_res['executed_qty']; cl_val+=limit_cl_res['executed_qty']*limit_cl_res['avg_price']; cl_fee+=limit_cl_res['fee']
                        
                        rem_q_close = quantize_qty(q_to_close - cl_qty, s_q_step)
                        if rem_q_close >= s_q_step: # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ä—ã–Ω–∫–æ–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ö–æ—Ç—è –±—ã 1 —à–∞–≥ –∫–æ–ª-–≤–∞
                            await app.bot.send_message(chat_id, f"üõí {s_sym}: –ó–∞–∫—Ä—ã–≤–∞—é —Ä—ã–Ω–∫–æ–º –æ—Å—Ç–∞—Ç–æ–∫: {rem_q_close}")
                            market_cl_res = await place_market_order_robust(session,app,chat_id,s_sym,close_side,rem_q_close,reduce_only=True)
                            if market_cl_res and market_cl_res['executed_qty'] > 0: cl_qty+=market_cl_res['executed_qty']; cl_val+=market_cl_res['executed_qty']*market_cl_res['avg_price']; cl_fee+=market_cl_res['fee']
                        
                        trade_data["closed_qty"], trade_data["total_close_value"], trade_data["total_close_fee"] = cl_qty, cl_val, cl_fee
                        await asyncio.sleep(1.5) # –î–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                        final_pos_cl = await get_current_position_info(session, s_sym)
                        
                        pos_cl_size_disp = '–Ω–µ—Ç' if not final_pos_cl else final_pos_cl.get('size','–Ω–µ—Ç')
                        if final_pos_cl and final_pos_cl['size'] >= s_q_step: await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è *{s_sym}* –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ö–†–´–¢–ê! –û—Å—Ç–∞—Ç–æ–∫: `{final_pos_cl['size']}`. –ü–†–û–í–ï–†–¨–¢–ï –í–†–£–ß–ù–£–Æ!", parse_mode='Markdown')
                        elif cl_qty >= q_to_close - s_q_step: await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{s_sym}* —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ (–±–æ—Ç: {cl_qty}, –±–∏—Ä–∂–∞: {pos_cl_size_disp}).", parse_mode='Markdown')
                        else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–±–æ—Ç: {cl_qty}, –±–∏—Ä–∂–∞: {pos_cl_size_disp}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ.", parse_mode='Markdown')

                        # PNL Calc
                        op_v_td, op_q_td = trade_data["total_open_value"], trade_data["opened_qty"]
                        avg_op_td = (op_v_td / op_q_td) if op_q_td > 0 else Decimal("0")
                        cl_v_td, cl_q_td = trade_data["total_close_value"], trade_data["closed_qty"]
                        avg_cl_td = (cl_v_td / cl_q_td) if cl_q_td > 0 else Decimal("0")
                        
                        effective_qty_for_pnl = min(op_q_td, cl_q_td) # –°—á–∏—Ç–∞–µ–º PnL –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–º—É –æ–±—ä–µ–º—É, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –≤—Å–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
                        price_pnl_val = (avg_cl_td - avg_op_td) * effective_qty_for_pnl
                        if s_open_side == "Sell": price_pnl_val = -price_pnl_val
                        
                        fund_pnl_val = trade_data["actual_funding_fee"]
                        op_f_val_td = trade_data["total_open_fee"]
                        op_f_disp_td, op_f_calc_td = "", Decimal("0")
                        if op_f_val_td == Decimal("-1"): op_f_disp_td, op_f_calc_td = "–ù–µ–∏–∑–≤.", s_pos_size_usdt * TAKER_FEE_RATE # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º
                        else: op_f_disp_td, op_f_calc_td = f"{-op_f_val_td:.4f}", op_f_val_td
                        
                        cl_f_val_td = trade_data["total_close_fee"]
                        total_f_calc_td = op_f_calc_td + cl_f_val_td
                        net_pnl_val = price_pnl_val + fund_pnl_val - total_f_calc_td
                        roi_val = (net_pnl_val / s_marja) * 100 if s_marja > 0 else Decimal("0")
                        
                        price_decs = trade_data['price_decimals']
                        report = (f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: *{s_sym}* ({'LONG' if s_open_side=='Buy' else 'SHORT'})\n\n"
                                  f"–û—Ç–∫—Ä: `{op_q_td}` @ `{avg_op_td:.{price_decs}f}`\n"
                                  f"–ó–∞–∫—Ä: `{cl_q_td}` @ `{avg_cl_td:.{price_decs}f}`\n\n"
                                  f"PNL (—Ü–µ–Ω–∞): `{price_pnl_val:+.4f}` USDT\n"
                                  f"PNL (—Ñ–∞–Ω–¥–∏–Ω–≥): `{fund_pnl_val:+.4f}` USDT\n"
                                  f"–ö–æ–º.–æ—Ç–∫—Ä: `{op_f_disp_td}` USDT\n"
                                  f"–ö–æ–º.–∑–∞–∫—Ä: `{-cl_f_val_td:.4f}` USDT\n\n"
                                  f"üí∞ *–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_pnl_val:+.4f} USDT*\n"
                                  f"üìà ROI –æ—Ç –º–∞—Ä–∂–∏ ({s_marja} USDT): `{roi_val:.2f}%`")
                        await app.bot.send_message(chat_id, report, parse_mode='Markdown')
                    
                    except ValueError as ve: # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
                        print(f"\n!!! TRADE ABORTED for chat {chat_id}, symbol {s_sym} !!!")
                        print(f"Reason: {ve}");
                        await app.bot.send_message(chat_id, f"‚ùå –°–¥–µ–ª–∫–∞ –ø–æ *{s_sym}* –ø—Ä–µ—Ä–≤–∞–Ω–∞:\n`{ve}`\n\n‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢ –ò –ü–û–ó–ò–¶–ò–ò –í–†–£–ß–ù–£–Æ!*", parse_mode='Markdown')
                    except Exception as trade_e: # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                        print(f"\n!!! TRADE ERROR for chat {chat_id}, symbol {s_sym} !!!")
                        print(f"Error: {trade_e}"); import traceback; traceback.print_exc()
                        await app.bot.send_message(chat_id, f"‚ùå –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –ø–æ *{s_sym}*:\n`{trade_e}`\n\n‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢ –ò –ü–û–ó–ò–¶–ò–ò –í–†–£–ß–ù–£–Æ!*", parse_mode='Markdown')
                    finally:
                        if s_sym in chat_config.get('ongoing_trades', {}):
                            print(f"Cleaning up ongoing_trade for {s_sym} in chat {chat_id}")
                            del chat_config['ongoing_trades'][s_sym]
                        print(f">>> Finished processing {s_sym} for chat {chat_id} <<<")
            # End of loop for globally_candidate_pairs
        except Exception as loop_e:
            print("\n!!! UNHANDLED ERROR IN SNIPER LOOP !!!")
            print(f"Error: {loop_e}"); import traceback; traceback.print_exc()
            # Consider sending to admin or specific log for critical loop errors
            await asyncio.sleep(30) # Longer sleep on outer loop error

# ===================== MAIN =====================
if __name__ == "__main__":
    print("Initializing bot...")
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    # –û–±—â–∏–π cancel –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç user_data
    application.add_handler(CommandHandler("cancel", cancel)) 
    
    application.add_handler(MessageHandler(filters.Regex("^üìä –¢–æ–ø-–ø–∞—Ä—ã$"), show_top_funding))
    application.add_handler(MessageHandler(filters.Regex("^üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–Ω–∞–π–ø–µ—Ä–æ–º$"), sniper_control_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞ (Inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(sniper_control_callback, pattern="^(toggle_sniper|show_top_pairs_inline|set_max_trades_|noop)"))

    # –î–∏–∞–ª–æ–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ú–∞—Ä–∂–∏ –∏ –ü–ª–µ—á–∞ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ ReplyKeyboard)
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ú–∞—Ä–∂–∞$"), set_real_marja)], 
        states={SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)]}, 
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=120.0 # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
    )
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚öñÔ∏è –ü–ª–µ—á–æ$"), set_real_plecho)], 
        states={SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)]}, 
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=120.0
    )
    
    # –î–∏–∞–ª–æ–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ú–∏–Ω. –û–±–æ—Ä–æ—Ç–∞ –∏ –ú–∏–Ω. –ü—Ä–æ—Ñ–∏—Ç–∞ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ InlineKeyboard –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞)
    conv_min_turnover = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_min_turnover, pattern="^set_min_turnover_config$")],
        states={SET_MIN_TURNOVER_CONFIG: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_min_turnover)]},
        fallbacks=[CommandHandler("cancel", cancel)], 
        conversation_timeout=120.0
    )
        
    conv_min_profit = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_min_profit, pattern="^set_min_profit_config$")],
        states={SET_MIN_PROFIT_CONFIG: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_min_profit)]},
        fallbacks=[CommandHandler("cancel", cancel)], 
        conversation_timeout=120.0
    )

    application.add_handler(conv_marja)
    application.add_handler(conv_plecho)
    application.add_handler(conv_min_turnover)
    application.add_handler(conv_min_profit)

    async def post_init_tasks(app_passed: ApplicationBuilder): # –¢–∏–ø –∑–¥–µ—Å—å Application, –∞ –Ω–µ ApplicationBuilder
        print("Running post_init tasks...")
        asyncio.create_task(funding_sniper_loop(app_passed)) # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç Application
        print("Sniper loop task created.")
    
    application.post_init = post_init_tasks

    print("Starting bot polling...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"\nBot polling stopped due to error: {e}")
        import traceback
        traceback.print_exc() # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫ –æ—à–∏–±–∫–∏
    finally:
        print("\nBot shutdown.")

# --- END OF FILE bot (8).py ---
