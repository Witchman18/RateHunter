# =========================================================================
# ===================== RateHunter 2.0 - Alpha v0.2.6 ===================
# =========================================================================
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
# - –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MEXC API
# - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å MEXC
# - –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
# =========================================================================

import os
import asyncio
import aiohttp
import decimal
import json
import time
import hmac
import hashlib
from datetime import datetime, timezone, timedelta
from decimal import Decimal

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
MSK_TIMEZONE = timezone(timedelta(hours=3))

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
user_settings = {}
api_data_cache = {"last_update": None, "data": []}
CACHE_LIFETIME_SECONDS = 60
ALL_AVAILABLE_EXCHANGES = ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin', 'Gate.io', 'HTX', 'Bitget']

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
SET_FUNDING_THRESHOLD, SET_VOLUME_THRESHOLD = range(2)

def get_default_settings():
    return {
        'notifications_on': True, 'exchanges': ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin'],
        'funding_threshold': Decimal('0.005'), 'volume_threshold_usdt': Decimal('1000000'),
    }

def ensure_user_settings(chat_id: int):
    if chat_id not in user_settings: user_settings[chat_id] = get_default_settings()
    for key, value in get_default_settings().items():
        user_settings[chat_id].setdefault(key, value)


# =================================================================
# =================== –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEXC ==================
# =================================================================

async def quick_mexc_debug():
    """
    –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö MEXC
    """
    print("\n" + "üîç" * 20 + " –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEXC " + "üîç" * 20)
    
    try:
        async with aiohttp.ClientSession() as session:
            contracts_url = "https://contract.mexc.com/api/v1/contract/detail"
            
            async with session.get(contracts_url, timeout=15) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    return
                
                data = await response.json()
                
                if not data.get("success"):
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {data}")
                    return
                
                contracts = data.get("data", [])
                print(f"üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(contracts)}")
                
                if contracts:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                    first_contract = contracts[0]
                    print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:")
                    for key, value in first_contract.items():
                        print(f"  {key}: {value} ({type(value).__name__})")
                    
                    # –ò—â–µ–º USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    print(f"\nüîç –ü–æ–∏—Å–∫ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:")
                    
                    # –ú–µ—Ç–æ–¥ 1: –ø–æ quoteCoin
                    usdt_by_quote = [c for c in contracts if c.get("quoteCoin") == "USDT"]
                    print(f"  –ü–æ quoteCoin='USDT': {len(usdt_by_quote)}")
                    
                    # –ú–µ—Ç–æ–¥ 2: –ø–æ symbol
                    usdt_by_symbol = [c for c in contracts if str(c.get("symbol", "")).endswith("USDT")]
                    print(f"  –ü–æ symbol –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 'USDT': {len(usdt_by_symbol)}")
                    
                    # –ú–µ—Ç–æ–¥ 3: –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º
                    for field in ["quoteCurrency", "quote_coin", "baseCoin", "base_coin"]:
                        usdt_by_field = [c for c in contracts if c.get(field) == "USDT"]
                        if usdt_by_field:
                            print(f"  –ü–æ {field}='USDT': {len(usdt_by_field)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                    quote_coins = set(c.get("quoteCoin") for c in contracts if c.get("quoteCoin"))
                    states = set(c.get("state") for c in contracts if c.get("state"))
                    
                    print(f"\nüìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ quoteCoin (–ø–µ—Ä–≤—ã–µ 10): {sorted(list(quote_coins))[:10]}")
                    print(f"üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ state: {sorted(list(states))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                    if usdt_by_symbol:
                        print(f"\nüí∞ –ü—Ä–∏–º–µ—Ä—ã USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:")
                        for i, contract in enumerate(usdt_by_symbol[:3]):
                            symbol = contract.get("symbol")
                            state = contract.get("state")
                            quote = contract.get("quoteCoin")
                            print(f"  {i+1}. {symbol} | state: {state} | quoteCoin: {quote}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    print("üîç" * 60 + "\n")


# =================================================================
# ===================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEXC API =====================
# =================================================================

async def test_mexc_connection():
    """
    –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC API
    """
    print("\n" + "="*60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEXC API")
    print("="*60)
    
    try:
        async with aiohttp.ClientSession() as session:
            # 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            try:
                ping_url = "https://contract.mexc.com/api/v1/contract/ping"
                async with session.get(ping_url, timeout=10) as response:
                    print(f"   Status: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        print(f"   Response: {data}")
                        print("   ‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            # 2. –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            try:
                time_url = "https://contract.mexc.com/api/v1/contract/server_time"
                async with session.get(time_url, timeout=10) as response:
                    print(f"   Status: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        print(f"   Server Time: {data}")
                        if data.get('success'):
                            server_time = data.get('data')
                            local_time = int(time.time() * 1000)
                            diff = abs(server_time - local_time) if server_time else 0
                            print(f"   Time Diff: {diff}ms")
                            print("   ‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ" if diff < 5000 else "   ‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
                        else:
                            print("   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            
            # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            try:
                contracts_url = "https://contract.mexc.com/api/v1/contract/detail"
                async with session.get(contracts_url, timeout=15) as response:
                    print(f"   Status: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            contracts = data.get('data', [])
                            usdt_contracts = [c for c in contracts if c.get('quoteCoin') == 'USDT']
                            print(f"   –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(contracts)}")
                            print(f"   USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(usdt_contracts)}")
                            
                            if usdt_contracts:
                                sample = usdt_contracts[0]
                                print(f"   –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {sample.get('symbol')} - {sample.get('state')}")
                                print("   ‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω")
                            else:
                                print("   ‚ö†Ô∏è USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        else:
                            print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data}")
                    else:
                        print("   ‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {e}")
            
            # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏...")
            try:
                test_symbol = "BTC_USDT"  # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª
                funding_url = f"https://contract.mexc.com/api/v1/contract/funding_rate/{test_symbol}"
                async with session.get(funding_url, timeout=10) as response:
                    print(f"   Status –¥–ª—è {test_symbol}: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        print(f"   Response: {data}")
                        if data.get('success') and data.get('data'):
                            funding_data = data['data']
                            print(f"   Funding Rate: {funding_data.get('fundingRate')}")
                            print(f"   Next Funding: {funding_data.get('nextSettleTime')}")
                            print("   ‚úÖ –§–∞–Ω–¥–∏–Ω–≥ —Å—Ç–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                        else:
                            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É")
                    else:
                        print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            # 5. –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API (–µ—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å)
            print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...")
            api_key = os.getenv("MEXC_API_KEY")
            secret_key = os.getenv("MEXC_API_SECRET")
            
            if api_key and secret_key:
                print(f"   API Key –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...")
                print(f"   Secret Key –Ω–∞–π–¥–µ–Ω: {secret_key[:8]}...")
                
                try:
                    timestamp = str(int(time.time() * 1000))
                    query_string = f"timestamp={timestamp}"
                    signature = hmac.new(
                        secret_key.encode('utf-8'), 
                        query_string.encode('utf-8'), 
                        hashlib.sha256
                    ).hexdigest()
                    
                    headers = {
                        'X-MEXC-APIKEY': api_key,
                        'Content-Type': 'application/json',
                    }
                    
                    private_url = f"https://contract.mexc.com/api/v1/private/account/assets?timestamp={timestamp}&signature={signature}"
                    async with session.get(private_url, headers=headers, timeout=10) as response:
                        print(f"   Private API Status: {response.status}")
                        
                        if response.status == 401:
                            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
                        elif response.status == 403:
                            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É API –∫–ª—é—á–µ–π")
                        elif response.status == 200:
                            data = await response.json()
                            print(f"   Private API Response: {data}")
                            print("   ‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        else:
                            text = await response.text()
                            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {text}")
                            
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API: {e}")
            else:
                print("   ‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: MEXC_API_KEY, MEXC_API_SECRET")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    print("="*60)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60 + "\n")


# =================================================================
# =================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ MEXC ====================
# =================================================================

async def get_mexc_data():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MEXC —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
    """
    print("[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MEXC...")
    results = []
    
    try:
        async with aiohttp.ClientSession() as session:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            print("[DEBUG] MEXC: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            contracts_url = "https://contract.mexc.com/api/v1/contract/detail"
            
            async with session.get(contracts_url, timeout=15) as response:
                if response.status != 200:
                    print(f"[API_ERROR] MEXC: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    return []
                
                contracts_data = await response.json()
                
                if not contracts_data.get("success", False):
                    print(f"[API_ERROR] MEXC: API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {contracts_data}")
                    return []
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                all_contracts = contracts_data.get("data", [])
                print(f"[DEBUG] MEXC: –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_contracts)}")
                
                if all_contracts:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö 3 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print("[DEBUG] MEXC: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:")
                    for i, contract in enumerate(all_contracts[:3]):
                        print(f"  –ö–æ–Ω—Ç—Ä–∞–∫—Ç {i+1}: {contract}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                    quote_coins = set()
                    states = set()
                    symbols_exist = 0
                    
                    for contract in all_contracts:
                        quote_coin = contract.get("quoteCoin")
                        state = contract.get("state")
                        symbol = contract.get("symbol")
                        
                        if quote_coin:
                            quote_coins.add(quote_coin)
                        if state:
                            states.add(state)
                        if symbol:
                            symbols_exist += 1
                    
                    print(f"[DEBUG] MEXC: –ù–∞–π–¥–µ–Ω–Ω—ã–µ quoteCoin: {sorted(quote_coins)}")
                    print(f"[DEBUG] MEXC: –ù–∞–π–¥–µ–Ω–Ω—ã–µ state: {sorted(states)}")
                    print(f"[DEBUG] MEXC: –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å symbol: {symbols_exist}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                usdt_contracts = []
                
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
                usdt_contracts_v1 = [
                    contract for contract in all_contracts
                    if (contract.get("quoteCoin") == "USDT" and 
                        contract.get("state") == "SHOW" and
                        contract.get("symbol"))
                ]
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –¢–æ–ª—å–∫–æ –ø–æ quoteCoin
                usdt_contracts_v2 = [
                    contract for contract in all_contracts
                    if contract.get("quoteCoin") == "USDT"
                ]
                
                # –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
                usdt_contracts_v3 = [
                    contract for contract in all_contracts
                    if (contract.get("quote_coin") == "USDT" or 
                        contract.get("quoteCurrency") == "USDT" or
                        str(contract.get("symbol", "")).endswith("USDT"))
                ]
                
                # –í–∞—Ä–∏–∞–Ω—Ç 4: –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å–∏–º–≤–æ–ª–∞ –Ω–∞ USDT
                usdt_contracts_v4 = [
                    contract for contract in all_contracts
                    if str(contract.get("symbol", "")).endswith("USDT")
                ]
                
                print(f"[DEBUG] MEXC: –§–∏–ª—å—Ç—Ä v1 (quoteCoin=USDT, state=SHOW): {len(usdt_contracts_v1)}")
                print(f"[DEBUG] MEXC: –§–∏–ª—å—Ç—Ä v2 (—Ç–æ–ª—å–∫–æ quoteCoin=USDT): {len(usdt_contracts_v2)}")
                print(f"[DEBUG] MEXC: –§–∏–ª—å—Ç—Ä v3 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è): {len(usdt_contracts_v3)}")
                print(f"[DEBUG] MEXC: –§–∏–ª—å—Ç—Ä v4 (symbol ends with USDT): {len(usdt_contracts_v4)}")
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                if usdt_contracts_v1:
                    usdt_contracts = usdt_contracts_v1
                    print("[DEBUG] MEXC: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä v1")
                elif usdt_contracts_v2:
                    usdt_contracts = usdt_contracts_v2
                    print("[DEBUG] MEXC: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä v2")
                elif usdt_contracts_v4:
                    usdt_contracts = usdt_contracts_v4
                    print("[DEBUG] MEXC: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä v4")
                else:
                    usdt_contracts = usdt_contracts_v3
                    print("[DEBUG] MEXC: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä v3")
                
                print(f"[DEBUG] MEXC: –ò—Ç–æ–≥–æ –≤—ã–±—Ä–∞–Ω–æ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(usdt_contracts)}")
                
                if not usdt_contracts:
                    print("[API_ERROR] MEXC: –ù–µ –Ω–∞–π–¥–µ–Ω–æ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∏ –æ–¥–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º")
                    return []
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            limited_contracts = usdt_contracts[:30]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"[DEBUG] MEXC: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(limited_contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            
            successful_requests = 0
            failed_requests = 0
            
            for i, contract in enumerate(limited_contracts):
                symbol = contract.get("symbol")
                if not symbol:
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ —Å—Ç–∞–≤–∫—É
                    funding_url = f"https://contract.mexc.com/api/v1/contract/funding_rate/{symbol}"
                    
                    async with session.get(funding_url, timeout=8) as funding_response:
                        if funding_response.status == 200:
                            funding_data = await funding_response.json()
                            
                            if funding_data.get("success") and funding_data.get("data"):
                                funding_info = funding_data["data"]
                                funding_rate = funding_info.get("fundingRate")
                                next_funding_time = funding_info.get("nextSettleTime")
                                
                                if funding_rate is not None and next_funding_time is not None:
                                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
                                    volume_24h = Decimal('0')
                                    try:
                                        ticker_url = f"https://contract.mexc.com/api/v1/contract/ticker/{symbol}"
                                        async with session.get(ticker_url, timeout=5) as ticker_response:
                                            if ticker_response.status == 200:
                                                ticker_data = await ticker_response.json()
                                                if ticker_data.get("success") and ticker_data.get("data"):
                                                    volume_24h = Decimal(str(ticker_data["data"].get("volume24", '0')))
                                    except Exception as e:
                                        print(f"[DEBUG] MEXC: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –¥–ª—è {symbol}: {e}")
                                    
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                    symbol_clean = symbol.replace("_", "")
                                    
                                    results.append({
                                        'exchange': 'MEXC',
                                        'symbol': symbol_clean,
                                        'rate': Decimal(str(funding_rate)),
                                        'next_funding_time': int(next_funding_time),
                                        'volume_24h_usdt': volume_24h,
                                        'max_order_value_usdt': Decimal(str(contract.get("maxVol", '0'))),
                                        'trade_url': f'https://futures.mexc.com/exchange/{symbol}'
                                    })
                                    
                                    successful_requests += 1
                                    
                                    if successful_requests % 10 == 0:
                                        print(f"[DEBUG] MEXC: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_requests} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
                                else:
                                    failed_requests += 1
                            else:
                                failed_requests += 1
                        else:
                            failed_requests += 1
                            
                except Exception as e:
                    failed_requests += 1
                    if failed_requests <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"[API_ERROR] MEXC: –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i % 5 == 0 and i > 0:
                    await asyncio.sleep(0.2)
                        
    except Exception as e:
        print(f"[API_ERROR] MEXC: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []
    
    print(f"[DEBUG] MEXC: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {successful_requests}, –û—à–∏–±–æ–∫: {failed_requests}")
    print(f"[DEBUG] MEXC: –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
    
    return results

async def get_bybit_data():
    bybit_url = "https://api.bybit.com/v5/market/tickers?category=linear"
    instrument_url = "https://api.bybit.com/v5/market/instruments-info?category=linear"
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ –æ—Ä–¥–µ—Ä–∞–º
            limits_data = {}
            async with session.get(instrument_url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("retCode") == 0 and data.get("result", {}).get("list"):
                        for inst in data["result"]["list"]:
                            limits_data[inst['symbol']] = inst.get('lotSizeFilter', {}).get('maxOrderQty', '0')

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            async with session.get(bybit_url) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("retCode") == 0 and data.get("result", {}).get("list"):
                    for t in data["result"]["list"]:
                        try:
                            results.append({
                                'exchange': 'Bybit', 'symbol': t.get("symbol"),
                                'rate': Decimal(t.get("fundingRate")), 'next_funding_time': int(t.get("nextFundingTime")),
                                'volume_24h_usdt': Decimal(t.get("turnover24h")),
                                'max_order_value_usdt': Decimal(limits_data.get(t.get("symbol"), '0')),
                                'trade_url': f'https://www.bybit.com/trade/usdt/{t.get("symbol")}'
                            })
                        except (TypeError, ValueError, decimal.InvalidOperation): continue
    except Exception as e: 
        print(f"[API_ERROR] Bybit: {e}")
    
    print(f"[DEBUG] Bybit: –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    return results

async def fetch_all_data(force_update=False):
    now = datetime.now().timestamp()
    if not force_update and api_data_cache["last_update"] and (now - api_data_cache["last_update"] < CACHE_LIFETIME_SECONDS):
        return api_data_cache["data"]
    
    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [get_bybit_data(), get_mexc_data()]
    results_from_tasks = await asyncio.gather(*tasks, return_exceptions=True)
    all_data = []
    
    for i, res in enumerate(results_from_tasks):
        exchange_name = ['Bybit', 'MEXC'][i]
        if isinstance(res, list): 
            all_data.extend(res)
            print(f"‚úÖ {exchange_name}: {len(res)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        elif isinstance(res, Exception): 
            print(f"‚ùå {exchange_name}: –û—à–∏–±–∫–∞ - {res}")

    api_data_cache["data"], api_data_cache["last_update"] = all_data, now
    print(f"üèÅ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n")
    return all_data


# =================================================================
# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° ==================
# =================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user_settings(update.effective_chat.id)
    main_menu_keyboard = [
        ["üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å"], 
        ["üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MEXC", "üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RateHunter 2.0!\n\nüÜï –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MEXC API", reply_markup=reply_markup)

async def run_quick_diagnostics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MEXC"""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É MEXC...\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    await quick_mexc_debug()
    
    await update.message.reply_text("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

async def run_diagnostics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MEXC"""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É MEXC API...\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    await test_mexc_connection()
    
    await update.message.reply_text("‚úÖ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

async def show_top_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]

    if update.callback_query:
        message_to_edit = update.callback_query.message
        await message_to_edit.edit_text("üîÑ –ò—â—É –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º...")
    else:
        message_to_edit = await update.message.reply_text("üîÑ –ò—â—É...")

    all_data = await fetch_all_data()
    if not all_data:
        await message_to_edit.edit_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_filtered_data = [
        item for item in all_data
        if item['exchange'] in settings['exchanges'] and abs(item['rate']) >= settings['funding_threshold']
        and item['volume_24h_usdt'] >= settings['volume_threshold_usdt']
    ]
    user_filtered_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    top_5 = user_filtered_data[:5]
    if not top_5:
        await message_to_edit.edit_text("üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        return

    message_text = f"üî• **–¢–û–ü-5 —Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤ > {settings['funding_threshold']*100:.2f}%**\n\n"
    buttons = []
    for item in top_5:
        symbol_only = item['symbol'].replace("USDT", "")
        funding_dt = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=MSK_TIMEZONE)
        time_str = funding_dt.strftime('%H:%M –ú–°–ö')
        direction_text = "üü¢ LONG" if item['rate'] < 0 else "üî¥ SHORT"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        message_text += f"{direction_text} *{symbol_only}* `{rate_str}` –≤ `{time_str}` [{item['exchange']}]\n"
        buttons.append(InlineKeyboardButton(symbol_only, callback_data=f"drill_{item['symbol']}"))

    keyboard = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    await message_to_edit.edit_text(
        message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True
    )

async def drill_down_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol_to_show = query.data.split('_')[1]

    all_data = api_data_cache.get("data", [])
    if not all_data:
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        all_data = await fetch_all_data(force_update=True)

    symbol_specific_data = [item for item in all_data if item['symbol'] == symbol_to_show]
    symbol_specific_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    symbol_only = symbol_to_show.replace("USDT", "")
    message_text = f"üíé **–î–µ—Ç–∞–ª–∏ –ø–æ {symbol_only}**\n\n"
    for item in symbol_specific_data:
        funding_dt = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=MSK_TIMEZONE)
        time_str = funding_dt.strftime('%H:%M –ú–°–ö')
        direction_text = "üü¢ –õ–û–ù–ì" if item['rate'] < 0 else "üî¥ –®–û–†–¢"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        message_text += f"{direction_text} `{rate_str}` –≤ `{time_str}` [{item['exchange']}]({item['trade_url']})\n"

        max_pos = item.get('max_order_value_usdt', Decimal('0'))
        if max_pos > 0:
            message_text += f"  *–ú–∞–∫—Å. –æ—Ä–¥–µ—Ä:* `{max_pos:,.0f}`\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]]
    await query.edit_message_text(
        text=message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True
    )

async def back_to_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    await show_top_rates(update, context)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def send_filters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]
    notif_emoji = "‚úÖ" if settings['notifications_on'] else "üî¥"
    vol = settings['volume_threshold_usdt']
    vol_str = f"{vol / 1_000_000:.1f}M" if vol >= 1_000_000 else f"{vol / 1_000:.0f}K"
    message_text = "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**"
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∏—Ä–∂–∏", callback_data="filters_exchanges")],
        [InlineKeyboardButton(f"üîî –°—Ç–∞–≤–∫–∞: > {settings['funding_threshold']*100:.2f}%", callback_data="filters_funding")],
        [InlineKeyboardButton(f"üíß –û–±—ä–µ–º: > {vol_str}", callback_data="filters_volume")],
        [InlineKeyboardButton(f"{notif_emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if settings['notifications_on'] else '–í–´–ö–õ'}", callback_data="filters_toggle_notif")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="filters_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def filters_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_filters_menu(update, context)

async def filters_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    action = query.data.split('_', 1)[1]
    if action == "close":
        await query.message.delete()
    elif action == "toggle_notif":
        user_settings[update.effective_chat.id]['notifications_on'] ^= True
        await send_filters_menu(update, context)
    elif action == "exchanges":
        await show_exchanges_menu(update, context)

async def show_exchanges_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    active_exchanges = user_settings[query.message.chat_id]['exchanges']
    buttons = [InlineKeyboardButton(f"{'‚úÖ' if ex in active_exchanges else '‚¨úÔ∏è'} {ex}", callback_data=f"exch_{ex}") for ex in ALL_AVAILABLE_EXCHANGES]
    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)] + [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="exch_back")]]
    await query.edit_message_text("üè¶ **–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏**", reply_markup=InlineKeyboardMarkup(keyboard))

async def exchanges_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    action = query.data.split('_', 1)[1]
    if action == "back": await send_filters_menu(update, context)
    else:
        active_exchanges = user_settings[query.message.chat_id]['exchanges']
        if action in active_exchanges: active_exchanges.remove(action)
        else: active_exchanges.append(action)
        await show_exchanges_menu(update, context)

async def ask_for_value(update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str):
    query = update.callback_query; await query.answer()
    chat_id = update.effective_chat.id
    prompts = {
        'funding': (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å—Ç–∞–≤–∫–∏: `> {user_settings[chat_id]['funding_threshold']*100:.2f}%`.\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.75`)."),
        'volume': (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: `{user_settings[chat_id]['volume_threshold_usdt']:,.0f} USDT`.\n\n"
                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, `500000`).")
    }
    await query.message.delete()
    sent_message = await context.bot.send_message(
        chat_id=chat_id, text=prompts[setting_type] + "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.", parse_mode='Markdown'
    )
    context.user_data['prompt_message_id'] = sent_message.message_id
    return SET_FUNDING_THRESHOLD if setting_type == 'funding' else SET_VOLUME_THRESHOLD

async def save_value(update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str):
    chat_id = update.effective_chat.id
    try:
        value_str = update.message.text.strip().replace(",", ".")
        value = Decimal(value_str)
        if setting_type == 'funding':
            if not (0 < value < 100): raise ValueError("Value out of range 0-100")
            user_settings[chat_id]['funding_threshold'] = value / 100
        elif setting_type == 'volume':
            if value < 0: raise ValueError("Value must be positive")
            user_settings[chat_id]['volume_threshold_usdt'] = value
    except (ValueError, TypeError, decimal.InvalidOperation):
        error_messages = {
            'funding': "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.75`).",
            'volume': "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `500000`)."
        }
        await update.message.reply_text(error_messages[setting_type] + " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode='Markdown')
        return SET_FUNDING_THRESHOLD if setting_type == 'funding' else SET_VOLUME_THRESHOLD
    if 'prompt_message_id' in context.user_data:
        await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
    await context.bot.delete_message(chat_id, update.message.message_id)
    await send_filters_menu(update, context)
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
        except Exception: pass
    try: await context.bot.delete_message(chat_id, update.message.id)
    except Exception: pass
    await context.bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await send_filters_menu(update, context)
    return ConversationHandler.END

async def show_my_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]
    
    exchanges_list = ", ".join(settings['exchanges'])
    vol = settings['volume_threshold_usdt']
    vol_str = f"{vol / 1_000_000:.1f}M" if vol >= 1_000_000 else f"{vol / 1_000:.0f}K"
    
    message_text = f"""‚ÑπÔ∏è **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

üè¶ **–ë–∏—Ä–∂–∏:** {exchanges_list}
üîî **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:** > {settings['funding_threshold']*100:.2f}%
üíß **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º:** > {vol_str} USDT
üîï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if settings['notifications_on'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
"""
    
    await update.message.reply_text(message_text, parse_mode='Markdown')

async def background_scanner(app):
    """–§–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)"""
    pass


# =================================================================
# ========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========================
# =================================================================

if __name__ == "__main__":
    # –û–ø—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é):
    
    # –í–ê–†–ò–ê–ù–¢ 1: –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MEXC...")
    asyncio.run(quick_mexc_debug())
    
    # –í–ê–†–ò–ê–ù–¢ 2: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MEXC...")
    # asyncio.run(test_mexc_connection())
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    conv_handler_funding = ConversationHandler(
        entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'funding'), pattern="^filters_funding$")],
        states={SET_FUNDING_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'funding'))]},
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    
    conv_handler_volume = ConversationHandler(
        entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'volume'), pattern="^filters_volume$")],
        states={SET_VOLUME_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'volume'))]},
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å$"), show_top_rates))
    app.add_handler(MessageHandler(filters.Regex("^üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã$"), filters_menu_entry))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$"), show_my_settings))
    app.add_handler(MessageHandler(filters.Regex("^üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MEXC$"), run_diagnostics))
    app.add_handler(MessageHandler(filters.Regex("^üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞$"), run_quick_diagnostics))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    app.add_handler(conv_handler_funding)
    app.add_handler(conv_handler_volume)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(drill_down_callback, pattern="^drill_"))
    app.add_handler(CallbackQueryHandler(back_to_top_callback, pattern="^back_to_top$"))
    app.add_handler(CallbackQueryHandler(filters_callback_handler, pattern="^filters_(close|toggle_notif|exchanges)$"))
    app.add_handler(CallbackQueryHandler(exchanges_callback_handler, pattern="^exch_"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    async def post_init(app): 
        asyncio.create_task(background_scanner(app))
    app.post_init = post_init

    print("ü§ñ RateHunter 2.0 –∑–∞–ø—É—â–µ–Ω!")
    print("üîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MEXC –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ")
    app.run_polling()
