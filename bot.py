# --- START OF FILE bot (9).py ---

import os
import asyncio
import time
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET, recv_window=20000)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñÔ∏è –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ENTRY_WINDOW_START_SECONDS = 25
ENTRY_WINDOW_END_SECONDS = 10
POST_FUNDING_WAIT_SECONDS = 7
MAKER_ORDER_WAIT_SECONDS_ENTRY = 2
MAKER_ORDER_WAIT_SECONDS_EXIT = 5
SNIPER_LOOP_INTERVAL_SECONDS = 5
MIN_USDT_BALANCE_CHECK = Decimal("10") # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ (–æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)

# ... (–§—É–Ω–∫—Ü–∏–∏ show_top_funding, start, cancel, –¥–∏–∞–ª–æ–≥–∏ –º–∞—Ä–∂–∏/–ø–ª–µ—á–∞, signal_menu, signal_callback,
# get_position_direction, quantize_qty, quantize_price –û–°–¢–ê–Æ–¢–°–Ø –¢–ê–ö–ò–ú–ò –ñ–ï, –∫–∞–∫ –≤ bot (8).py) ...
# –Ø –≤—Å—Ç–∞–≤–ª—é –∏—Ö —Å—é–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤.

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; message = update.message; chat_id = update.effective_chat.id
    loading_message_id = None
    try:
        if query:
            await query.answer()
            try: await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä..."); loading_message_id = query.message.message_id
            except Exception: sent_message = await context.bot.send_message(chat_id, "üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä..."); loading_message_id = sent_message.message_id
        elif message: sent_message = await message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä..."); loading_message_id = sent_message.message_id
        else: return
        response = session.get_tickers(category="linear"); tickers = response.get("result", {}).get("list", [])
        if not tickers:
            result_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤."
            if loading_message_id: await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=result_msg)
            return
        funding_data = []
        for t in tickers:
            symbol, rate_str, next_ts_str, _, turnover_str = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("volume24h"), t.get("turnover24h")
            if not all([symbol, rate_str, next_ts_str, turnover_str]): continue
            try:
                 rate_f, next_time_int, turnover_f = float(rate_str), int(next_ts_str), float(turnover_str)
                 if turnover_f < 1_000_000 or abs(rate_f) < 0.0001: continue
                 funding_data.append((symbol, rate_f, next_time_int))
            except: continue
        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs; latest_top_pairs = funding_data[:5]
        if not latest_top_pairs: result_msg = "üìä –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä."
        else:
            result_msg = "üìä –¢–æ–ø –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É:\n\n"; now_ts = datetime.utcnow().timestamp()
            for symbol, rate, ts in latest_top_pairs:
                try:
                    delta_sec = int(ts / 1000 - now_ts);
                    if delta_sec < 0: delta_sec = 0
                    h, rem = divmod(delta_sec, 3600); m, s = divmod(rem, 60)
                    time_left = f"{h:01d}—á {m:02d}–º {s:02d}—Å"
                    direction = "üìà LONG (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç)" if rate < 0 else "üìâ SHORT (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç)"
                    result_msg += (f"üéüÔ∏è *{symbol}*\n{direction}\nüíπ –§–∞–Ω–¥–∏–Ω–≥: `{rate * 100:.4f}%`\n‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: `{time_left}`\n\n")
                except: result_msg += f"üéüÔ∏è *{symbol}* - _–æ—à–∏–±–∫–∞_\n\n"
        if loading_message_id: await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=result_msg.strip(), parse_mode='Markdown', disable_web_page_preview=True)
    except Exception as e:
        print(f"Error show_top_funding: {e}"); import traceback; traceback.print_exc()
        error_message = f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–ø–∞: {e}"
        try:
            if loading_message_id: await context.bot.edit_message_text(chat_id=chat_id, message_id=loading_message_id, text=error_message)
            elif message: await message.reply_text(error_message)
            elif query: await query.message.reply_text(error_message)
        except: await context.bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç RateHunter. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); return ConversationHandler.END

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ –¥–ª—è –û–î–ù–û–ô —Å–¥–µ–ª–∫–∏ (–≤ USDT):"); return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        marja = Decimal(update.message.text.strip().replace(",", "."))
        if marja <= 0: await update.message.reply_text("‚ùå –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0."); return ConversationHandler.END
        sniper_active.setdefault(chat_id, {})["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞: {marja} USDT")
    except: await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."); return SET_MARJA
    return ConversationHandler.END

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 10):"); return SET_PLECHO # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–º–æ–¥–∑–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        plecho = Decimal(update.message.text.strip().replace(",", "."))
        if not (0 < plecho <= 100): await update.message.reply_text("‚ùå –ü–ª–µ—á–æ (0, 100]."); return ConversationHandler.END
        sniper_active.setdefault(chat_id, {})["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ: {plecho}x")
    except: await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."); return SET_PLECHO
    return ConversationHandler.END

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; is_active = sniper_active.get(chat_id, {}).get('active', False)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    buttons = [[InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å: {status_text}", callback_data="toggle_sniper")],
               [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")]]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä–æ–º:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; chat_id = query.message.chat_id; data = query.data
    if data == "toggle_sniper":
        await query.answer()
        sniper_active.setdefault(chat_id, {'active': False})
        new_status = not sniper_active[chat_id]['active']
        sniper_active[chat_id]['active'] = new_status
        status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if new_status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        action_text = "üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!" if new_status else "üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        buttons = [[InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å: {status_text}", callback_data="toggle_sniper")],
                   [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        try: await query.edit_message_text(f"{action_text}\nüì° –ú–µ–Ω—é:", reply_markup=reply_markup)
        except Exception as e: await context.bot.send_message(chat_id, f"{action_text}\n(–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é)")
    elif data == "show_top_pairs_inline": await show_top_funding(update, context)

def get_position_direction(rate: float) -> str:
    if rate is None: return "NONE"
    return "Buy" if rate < 0 else ("Sell" if rate > 0 else "NONE")

def quantize_qty(raw_qty: Decimal, qty_step: Decimal) -> Decimal:
    return (raw_qty // qty_step) * qty_step if qty_step > 0 else raw_qty

def quantize_price(raw_price: Decimal, tick_size: Decimal) -> Decimal:
    return round(raw_price / tick_size) * tick_size if tick_size > 0 else raw_price

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================

async def funding_sniper_loop(app: ApplicationBuilder):
    print(" Sniper loop started ".center(50, "="))
    while True:
        await asyncio.sleep(SNIPER_LOOP_INTERVAL_SECONDS)
        try:
            now_ts = time.time()
            response = session.get_tickers(category="linear") # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
            tickers = response.get("result", {}).get("list", [])
            if not tickers: print("No tickers."); continue
            funding_data = [] # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è funding_data
            for t in tickers:
                symbol, rate_str, next_ts_str, _, turnover_str = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("volume24h"), t.get("turnover24h")
                if not all([symbol, rate_str, next_ts_str, turnover_str]): continue
                try:
                    rate_f, next_ts_val, turnover_f = float(rate_str), int(next_ts_str) / 1000, float(turnover_str)
                    if turnover_f < 1_000_000 or abs(rate_f) < 0.0001: continue
                    funding_data.append({"symbol": symbol, "rate": rate_f, "next_ts": next_ts_val})
                except: continue
            if not funding_data: print("No suitable pairs."); continue
            funding_data.sort(key=lambda x: abs(x["rate"]), reverse=True)
            top_pair = funding_data[0] # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø-1 –ø–∞—Ä—ã
            top_symbol, rate, next_funding_ts = top_pair["symbol"], top_pair["rate"], top_pair["next_ts"]
            seconds_left = next_funding_ts - now_ts

            if ENTRY_WINDOW_END_SECONDS <= seconds_left <= ENTRY_WINDOW_START_SECONDS:
                print(f"Entering trade window for {top_symbol} ({seconds_left:.0f}s left)")
                open_side = get_position_direction(rate)
                if open_side == "NONE": print("Funding rate is zero, skipping."); continue

                for chat_id, data in list(sniper_active.items()): # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    if not data.get('active'): continue
                    if (data.get("last_entry_symbol") == top_symbol and data.get("last_entry_ts") == next_funding_ts): continue
                    marja, plecho = data.get('real_marja'), data.get('real_plecho')
                    if not marja or not plecho: continue
                    
                    # === –ù–û–í–û–ï: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≥–ª—É–±–æ–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ===
                    try:
                        # –î–ª—è UTA –æ–±—ã—á–Ω–æ coin –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ–±—â–∏–π USDT –±–∞–ª–∞–Ω—Å, –Ω–æ –¥–ª—è CONTRACT –º–æ–∂–µ—Ç –±—ã—Ç—å.
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞, –∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –∑–∞–π–º–∞, —Ç.–∫. –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é –º–∞—Ä–∂—É.
                        wallet_info = session.get_wallet_balance(accountType="UNIFIED") # –∏–ª–∏ "CONTRACT" –µ—Å–ª–∏ –Ω–µ UTA
                        usdt_balance_data = next((item for item in wallet_info.get("result",{}).get("list",[{}])[0].get("coin",[]) if item.get("coin") == "USDT"), None)
                        if usdt_balance_data and Decimal(usdt_balance_data.get("walletBalance", "0")) < MIN_USDT_BALANCE_CHECK:
                            print(f"Chat {chat_id}: Low USDT balance ({usdt_balance_data.get('walletBalance')}), skipping trade for {top_symbol}")
                            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å, –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥
                            # await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {top_symbol}: –ù–∏–∑–∫–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å USDT –Ω–∞ –±–∏—Ä–∂–µ.")
                            continue 
                    except Exception as e:
                        print(f"Error checking wallet balance for chat {chat_id}: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–∏—Å–∫–æ–º
                        # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ–±—ã –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ
                        continue
                    # =================================================================

                    print(f"\n>>> Processing {top_symbol} for chat {chat_id} <<<")
                    await app.bot.send_message(chat_id, f"üéØ –í—Ö–æ–¥: *{top_symbol}* ({'üìà L' if open_side == 'Buy' else 'üìâ S'}), F: `{rate*100:.4f}%`, T: `{seconds_left:.0f}—Å`", parse_mode='Markdown')
                    
                    position_data = { # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                        "opened_qty": Decimal("0"), "avg_open_price": Decimal("0"), "total_open_fee": Decimal("0"),
                        "closed_qty": Decimal("0"), "total_close_value": Decimal("0"), "total_close_fee": Decimal("0"),
                        "actual_funding_fee": Decimal("0")
                    }
                    opened_successfully_flags = {"maker": False, "market": False} # –§–ª–∞–≥–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

                    try:
                        # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ –∏ —Ä–∞—Å—á–µ—Ç –∫–æ–ª-–≤–∞ ---
                        info_resp = session.get_instruments_info(category="linear", symbol=top_symbol); instrument_info = info_resp.get("result", {}).get("list", [])[0]
                        min_qty, qty_step = Decimal(instrument_info["lotSizeFilter"]["minOrderQty"]), Decimal(instrument_info["lotSizeFilter"]["qtyStep"])
                        tick_size = Decimal(instrument_info["priceFilter"]["tickSize"])
                        ticker_resp = session.get_tickers(category="linear", symbol=top_symbol); last_price = Decimal(ticker_resp["result"]["list"][0]["lastPrice"])
                        raw_qty = (marja * plecho) / last_price; adjusted_qty = quantize_qty(raw_qty, qty_step)
                        if adjusted_qty < min_qty: await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û–±—ä–µ–º {adjusted_qty} < –º–∏–Ω {min_qty}"); continue
                        
                        # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ ---
                        try: session.set_leverage(category="linear", symbol=top_symbol, buyLeverage=str(plecho), sellLeverage=str(plecho))
                        except Exception as e:
                            if "110043" not in str(e): raise ValueError(f"–ü–ª–µ—á–æ: {e}")

                        # --- –û–¢–ö–†–´–¢–ò–ï (Maker -> Market) ---
                        open_qty_rem = adjusted_qty
                        # –ü–æ–ø—ã—Ç–∫–∞ Maker Open
                        # (–õ–æ–≥–∏–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ Maker –æ—Ä–¥–µ—Ä–∞ –∏ Market –æ—Ä–¥–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –Ω–∏—Ö)
                        # ... (–∫–æ–¥ –¥–ª—è Maker Open) ...
                        try:
                            ob_resp = session.get_orderbook(category="linear", symbol=top_symbol, limit=1); ob = ob_resp['result']
                            mp = quantize_price(Decimal(ob['b'][0][0] if open_side=="Buy" else ob['a'][0][0]), tick_size)
                            resp = session.place_order(category="linear",symbol=top_symbol,side=open_side,order_type="Limit",qty=str(open_qty_rem),price=str(mp),time_in_force="PostOnly")
                            oid = resp["result"]["orderId"]
                            await app.bot.send_message(chat_id, f"‚è≥ Maker –≤—Ö. @{mp} (ID: ...{oid[-6:]})")
                            await asyncio.sleep(MAKER_ORDER_WAIT_SECONDS_ENTRY)
                            hist_resp = session.get_order_history(category="linear", orderId=oid, limit=1); hist_list = hist_resp.get("result",{}).get("list",[])
                            if hist_list:
                                h = hist_list[0]; exec_q_str = h.get("cumExecQty","0"); exec_q = Decimal(exec_q_str)
                                if exec_q > 0:
                                    opened_successfully_flags["maker"] = True # –§–ª–∞–≥, —á—Ç–æ Maker —á—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª–Ω–∏–ª
                                    position_data["total_open_fee"] += Decimal(h.get("cumExecFee","0")) # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                                    # opened_qty –∏ avg_open_price –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ get_positions
                                    open_qty_rem -= exec_q # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–æ–±–∏–≤–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–º
                                    await app.bot.send_message(chat_id, f"‚ÑπÔ∏è Maker –≤—Ö. –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {exec_q})")
                                if h.get("orderStatus") not in ["Filled","Cancelled","Rejected"]: 
                                    try: session.cancel_order(category="linear",symbol=top_symbol,orderId=oid)
                                    except Exception as cancel_e: print(f"Minor cancel (Maker Open): {cancel_e}")
                        except Exception as e: print(f"Maker Open exc: {e}"); await app.bot.send_message(chat_id, f"‚ö†Ô∏è Maker –≤—Ö. –æ—à–∏–±–∫–∞: {e}")
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ Market Open (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        open_qty_rem = quantize_qty(open_qty_rem, qty_step)
                        if open_qty_rem >= min_qty and not opened_successfully_flags["maker"]: # –î–æ–±–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–π–∫–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª –í–ï–°–¨ –æ–±—ä–µ–º
                           # –ò–õ–ò: if open_qty_rem >= min_qty (–≤—Å–µ–≥–¥–∞ –¥–æ–±–∏–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫) - —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞
                            await app.bot.send_message(chat_id, f"üõí Market –≤—Ö. –æ—Å—Ç–∞—Ç–æ–∫: {open_qty_rem}")
                            try:
                                resp = session.place_order(category="linear",symbol=top_symbol,side=open_side,order_type="Market",qty=str(open_qty_rem),time_in_force="ImmediateOrCancel")
                                oid = resp["result"]["orderId"]; await asyncio.sleep(1.5)
                                hist_resp = session.get_order_history(category="linear",orderId=oid,limit=1); hist_list = hist_resp.get("result",{}).get("list",[])
                                if hist_list:
                                    h=hist_list[0]; exec_q_str = h.get("cumExecQty","0"); exec_q = Decimal(exec_q_str)
                                    if exec_q > 0:
                                        opened_successfully_flags["market"] = True # –§–ª–∞–≥, —á—Ç–æ Market —á—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª–Ω–∏–ª
                                        position_data["total_open_fee"] += Decimal(h.get("cumExecFee","0")) # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                                        await app.bot.send_message(chat_id, f"‚ÑπÔ∏è Market –≤—Ö. –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {exec_q})")
                                    # else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è Market –≤—Ö. ({oid}) –Ω–µ –∏—Å–ø–æ–ª–Ω.") # –£–∂–µ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ get_positions —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                            except Exception as e: print(f"Market Open exc: {e}"); await app.bot.send_message(chat_id, f"‚ùå Market –≤—Ö. –æ—à–∏–±–∫–∞: {e}")
                        
                        # === –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ ===
                        final_opened_qty = Decimal("0")
                        avg_open_price = Decimal("0")
                        await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –±–∏—Ä–∂–µ
                        try:
                            pos_resp = session.get_positions(category="linear", symbol=top_symbol)
                            pos_list = pos_resp.get("result", {}).get("list", [])
                            if pos_list:
                                current_pos = pos_list[0] # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ –æ–¥–Ω–æ–π –ø–∞—Ä–µ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                                pos_size_str = current_pos.get("size", "0")
                                pos_side_bybit = current_pos.get("side") # "Buy" or "Sell"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É –Ω–∞–º–µ—Ä–µ–Ω–∏—é
                                if pos_side_bybit == open_side:
                                    final_opened_qty = Decimal(pos_size_str)
                                    avg_open_price = Decimal(current_pos.get("avgPrice", "0"))
                                    print(f"Position check for {top_symbol}: Size={final_opened_qty}, AvgPrice={avg_open_price}, Side={pos_side_bybit}")
                                else:
                                    print(f"Position check for {top_symbol}: Found position but wrong side ({pos_side_bybit} vs {open_side}). Treating as not opened.")
                            else:
                                print(f"Position check for {top_symbol}: No active position found.")
                        except Exception as e:
                            print(f"Error getting positions for {top_symbol}: {e}")
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {top_symbol}.")
                        
                        position_data["opened_qty"] = final_opened_qty
                        position_data["avg_open_price"] = avg_open_price
                        # total_open_value –Ω–∞–º —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç–∞–∫ –≤–∞–∂–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å avg_open_price, –Ω–æ –∫–æ–º–∏—Å—Å–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        # position_data["total_open_value"] = final_opened_qty * avg_open_price 
                        # (—ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ, —Ç.–∫. –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ —É—á—Ç–µ–Ω—ã –≤ avgPrice –æ–±—ã—á–Ω–æ)

                        if final_opened_qty < min_qty:
                            await app.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ *{top_symbol}* (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ API –ø–æ–∑–∏—Ü–∏–π). –û—Ç–∫—Ä—ã—Ç–æ: {final_opened_qty}. –û—Ç–º–µ–Ω–∞.", parse_mode='Markdown'); 
                            continue
                        
                        await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* ({'L' if open_side=='Buy' else 'S'}) –æ—Ç–∫—Ä—ã—Ç–∞ (API).\n–û–±—ä–µ–º: `{final_opened_qty}`, –°—Ä.—Ü–µ–Ω–∞: `{avg_open_price}`, –ö–æ–º.–æ—Ç–∫—Ä (–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤): `{position_data['total_open_fee']:.4f}`", parse_mode='Markdown')
                        data["last_entry_symbol"], data["last_entry_ts"] = top_symbol, next_funding_ts
                        # =====================================================

                        # --- –û–ñ–ò–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –§–ê–ù–î–ò–ù–ì–ê (–∫–∞–∫ –≤ bot 8) ---
                        wait_duration = max(0, next_funding_ts - time.time()) + POST_FUNDING_WAIT_SECONDS
                        await app.bot.send_message(chat_id, f"‚è≥ –û–∂–∏–¥–∞—é —Ñ–∞–Ω–¥–∏–Ω–≥ (~{wait_duration:.0f} —Å–µ–∫)..."); await asyncio.sleep(wait_duration)
                        # (–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ get_transaction_log –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ bot 8)
                        print("Checking funding via Transaction Log...")
                        try:
                            start_ts_ms = int((next_funding_ts - 120)*1000); end_ts_ms = int((next_funding_ts + 120)*1000)
                            log_resp = session.get_transaction_log(category="linear",symbol=top_symbol,type="SETTLEMENT",startTime=start_ts_ms,endTime=end_ts_ms,limit=10)
                            log_list = log_resp.get("result",{}).get("list",[])
                            funding_val = Decimal("0")
                            if log_list:
                                for entry in log_list:
                                    if abs(int(entry.get("transactionTime","0"))/1000 - next_funding_ts) < 60: funding_val += Decimal(entry.get("change","0"))
                                if funding_val != Decimal("0"): position_data["actual_funding_fee"] = funding_val; await app.bot.send_message(chat_id, f"üí∞ –§–∞–Ω–¥–∏–Ω–≥ (–ª–æ–≥): `{funding_val:.4f}` USDT", parse_mode='Markdown')
                                else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è SETTLEMENT –¥–ª—è {top_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                            else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è –õ–æ–≥ —Ç—Ä–∞–Ω–∑. –ø—É—Å—Ç –¥–ª—è {top_symbol}.")
                        except Exception as e: print(f"Err funding log: {e}"); await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {e}")


                        # --- –ó–ê–ö–†–´–¢–ò–ï (Maker -> Market) ---
                        close_side = "Buy" if open_side == "Sell" else "Sell"
                        close_qty_rem = final_opened_qty # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –§–ê–ö–¢–ò–ß–ï–°–ö–ò –æ—Ç–∫—Ä—ã—Ç–æ
                        
                        # (–õ–æ–≥–∏–∫–∞ Maker Close –∏ Market Close –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ bot 8,
                        # –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç final_opened_qty)
                        # ... (–∫–æ–¥ –¥–ª—è Maker Close –∏ Market Close) ...
                        try: # Maker Close
                            ob_resp = session.get_orderbook(category="linear",symbol=top_symbol,limit=1); ob = ob_resp['result']
                            mp = quantize_price(Decimal(ob['b'][0][0] if close_side=="Buy" else ob['a'][0][0]), tick_size)
                            resp = session.place_order(category="linear",symbol=top_symbol,side=close_side,order_type="Limit",qty=str(close_qty_rem),price=str(mp),time_in_force="PostOnly",reduce_only=True)
                            oid = resp["result"]["orderId"]; await app.bot.send_message(chat_id, f"‚è≥ Maker –≤—ã—Ö. @{mp} (ID: ...{oid[-6:]})"); await asyncio.sleep(MAKER_ORDER_WAIT_SECONDS_EXIT)
                            hist_resp = session.get_order_history(category="linear",orderId=oid,limit=1); hist_list = hist_resp.get("result",{}).get("list",[])
                            if hist_list:
                                h=hist_list[0]; exec_q=Decimal(h.get("cumExecQty","0"))
                                if exec_q > 0: position_data["closed_qty"]+=exec_q; position_data["total_close_value"]+=Decimal(h.get("cumExecValue","0")); position_data["total_close_fee"]+=Decimal(h.get("cumExecFee","0")); close_qty_rem-=exec_q; await app.bot.send_message(chat_id, f"‚úÖ Maker –≤—ã—Ö. –∏—Å–ø–æ–ª–Ω: {exec_q}")
                                if h.get("orderStatus") not in ["Filled","Cancelled","Rejected","Deactivated"]: 
                                    try: session.cancel_order(category="linear",symbol=top_symbol,orderId=oid)
                                    except Exception as cancel_e: print(f"Minor cancel (Maker Close): {cancel_e}")
                        except Exception as e: print(f"Maker Close exc: {e}"); await app.bot.send_message(chat_id, f"‚ö†Ô∏è Maker –≤—ã—Ö. –æ—à–∏–±–∫–∞: {e}")
                        
                        close_qty_rem = quantize_qty(close_qty_rem, qty_step) # Market Close
                        if close_qty_rem >= min_qty:
                            await app.bot.send_message(chat_id, f"üõí Market –≤—ã—Ö. –æ—Å—Ç–∞—Ç–æ–∫: {close_qty_rem}")
                            try:
                                resp = session.place_order(category="linear",symbol=top_symbol,side=close_side,order_type="Market",qty=str(close_qty_rem),time_in_force="ImmediateOrCancel",reduce_only=True)
                                oid = resp["result"]["orderId"]; await asyncio.sleep(1.5)
                                hist_resp = session.get_order_history(category="linear",orderId=oid,limit=1); hist_list = hist_resp.get("result",{}).get("list",[])
                                if hist_list:
                                    h=hist_list[0]; exec_q=Decimal(h.get("cumExecQty","0"))
                                    if exec_q > 0: position_data["closed_qty"]+=exec_q; position_data["total_close_value"]+=Decimal(h.get("cumExecValue","0")); position_data["total_close_fee"]+=Decimal(h.get("cumExecFee","0")); await app.bot.send_message(chat_id, f"‚úÖ Market –≤—ã—Ö. –∏—Å–ø–æ–ª–Ω: {exec_q}")
                                    # else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è Market –≤—ã—Ö. ({oid}) –Ω–µ –∏—Å–ø–æ–ª–Ω.")
                            except Exception as e: print(f"Market Close exc: {e}"); await app.bot.send_message(chat_id, f"‚ùå Market –≤—ã—Ö. –æ—à–∏–±–∫–∞: {e}")

                        final_closed_qty = position_data["closed_qty"]
                        if abs(final_closed_qty - final_opened_qty) > min_qty * Decimal("0.1"): await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞! –û—Ç–∫—Ä: `{final_opened_qty}`, –ó–∞–∫—Ä: `{final_closed_qty}`. –ü–†–û–í–ï–†–¨–¢–ï!", parse_mode='Markdown')
                        else: await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ ({final_closed_qty}).", parse_mode='Markdown')

                        # --- –†–ê–°–ß–ï–¢ PNL ---
                        # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ PNL —Ü–µ–Ω—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º avg_open_price –∏–∑ get_positions
                        # –∏ total_close_value / final_closed_qty (–µ—Å–ª–∏ closed_qty > 0) –∫–∞–∫ avg_close_price
                        price_pnl = Decimal("0")
                        if final_opened_qty > 0 and final_closed_qty > 0 and avg_open_price > 0:
                            avg_close_price = position_data["total_close_value"] / final_closed_qty if final_closed_qty > 0 else Decimal("0")
                            if avg_close_price > 0:
                                if open_side == "Buy": # LONG
                                    price_pnl = (avg_close_price - avg_open_price) * final_closed_qty # –ë–µ—Ä–µ–º –∑–∞–∫—Ä—ã—Ç–æ–µ –∫–æ–ª-–≤–æ
                                else: # SHORT
                                    price_pnl = (avg_open_price - avg_close_price) * final_closed_qty
                        
                        funding_pnl = position_data["actual_funding_fee"] 
                        total_fees = position_data["total_open_fee"] + position_data["total_close_fee"]
                        net_pnl = price_pnl + funding_pnl - total_fees
                        roi_pct = (net_pnl / marja) * 100 if marja != Decimal(0) else Decimal("0")
                        await app.bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: *{top_symbol}* ({'L' if open_side=='Buy' else 'S'})\n PNL (—Ü–µ–Ω–∞): `{price_pnl:+.4f}`\n PNL (—Ñ–∞–Ω–¥–∏–Ω–≥): `{funding_pnl:+.4f}`\n –ö–æ–º–∏—Å—Å–∏–∏: `{-total_fees:.4f}`\nüí∞ *–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_pnl:+.4f} USDT*\nüìà ROI ({marja} USDT): `{roi_pct:.2f}%`", parse_mode='Markdown')

                    except Exception as trade_e:
                        print(f"CRITICAL TRADE ERROR for {chat_id}, {top_symbol}: {trade_e}"); import traceback; traceback.print_exc()
                        await app.bot.send_message(chat_id, f"‚ùå –ö–†–ò–¢. –û–®–ò–ë–ö–ê —Å–¥–µ–ª–∫–∏ *{top_symbol}*:\n`{trade_e}`\n‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢!*", parse_mode='Markdown')
            
        except Exception as loop_e:
            print(f"UNHANDLED ERROR IN SNIPER LOOP: {loop_e}"); import traceback; traceback.print_exc()
            await asyncio.sleep(30)

# ===================== MAIN =====================
# (–ë–ª–æ–∫ if __name__ == "__main__": –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –∫–∞–∫ –≤ bot (8).py)
if __name__ == "__main__":
    print("Initializing bot...")
    app_builder = ApplicationBuilder().token(BOT_TOKEN)
    app = app_builder.build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.Regex("^üìä –¢–æ–ø-–ø–∞—Ä—ã$"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("^üì° –°–∏–≥–Ω–∞–ª—ã$"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback, pattern="^(toggle_sniper|show_top_pairs_inline)$"))
    conv_marja = ConversationHandler(entry_points=[MessageHandler(filters.Regex("^üí∞ –ú–∞—Ä–∂–∞$"), set_real_marja)], states={SET_MARJA: [MessageHandler(filters.TEXT&~filters.COMMAND, save_real_marja)]}, fallbacks=[CommandHandler("cancel", cancel)], conversation_timeout=60.0)
    app.add_handler(conv_marja)
    conv_plecho = ConversationHandler(entry_points=[MessageHandler(filters.Regex("^‚öñÔ∏è –ü–ª–µ—á–æ$"), set_real_plecho)], states={SET_PLECHO: [MessageHandler(filters.TEXT&~filters.COMMAND, save_real_plecho)]}, fallbacks=[CommandHandler("cancel", cancel)], conversation_timeout=60.0)
    app.add_handler(conv_plecho)
    async def post_init_tasks(passed_app: ApplicationBuilder):
        print("Running post_init tasks..."); asyncio.create_task(funding_sniper_loop(passed_app)); print("Sniper loop task created.")
    app.post_init = post_init_tasks
    print("Starting bot polling...")
    try: app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e: print(f"\nBot polling stopped due to error: {e}")
    finally: print("\nBot shutdown.")

# --- END OF FILE bot (9).py ---
