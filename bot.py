import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
DEVELOPER_CHAT_ID = int(os.getenv("DEVELOPER_CHAT_ID"))  # –í–∞—à chat_id –≤ .env

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
session = HTTP(
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET,
    testnet=False  # True –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏
try:
    session.switch_margin_mode(
        category="linear",
        symbol="BTCUSDT",
        tradeMode=1,  # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞
        buyLeverage=10,
        sellLeverage=10
    )
    print("‚öôÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏: {e}")

keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
    ["üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É", "‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ"],
    ["üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏"]
]
latest_top_pairs = []
sniper_active = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
SET_MARJA, SET_PLECHO = range(2)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
def is_developer(chat_id: int) -> bool:
    return chat_id == DEVELOPER_CHAT_ID

# --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –±–∞–ª–∞–Ω—Å–∞ ---
async def get_usdt_balance():
    try:
        balance = session.get_wallet_balance(accountType="UNIFIED", coin="USDT")
        return float(balance["result"]["list"][0]["availableBalance"])
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

# --- –°–∏–≥–Ω–∞–ª—ã ---
async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="sniper_off")]
    ]
    await update.message.reply_text(
        "üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if query.data == "sniper_on":
        sniper_active[chat_id] = {
            **sniper_active.get(chat_id, {}),
            "active": True
        }
        await query.edit_message_text("üü¢ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞")
    else:
        sniper_active[chat_id] = {
            **sniper_active.get(chat_id, {}),
            "active": False
        }
        await query.edit_message_text("üî¥ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        reply_markup=reply_markup
    )

async def show_top_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = session.get_tickers(category="linear")
        usdt_pairs = [t for t in response["result"]["list"] if t["symbol"].endswith("USDT")]
        
        if not usdt_pairs:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT-–ø–∞—Ä")
            return

        top_pairs = sorted(
            [(t["symbol"], float(t["fundingRate"]), int(t["nextFundingTime"])) 
            for t in usdt_pairs if t.get("fundingRate")],
            key=lambda x: abs(x[1]),
            reverse=True
        )[:5]

        global latest_top_pairs
        latest_top_pairs = top_pairs

        msg = "üìä –¢–æ–ø USDT-–ø–∞—Ä:\n\n"
        for symbol, rate, ts in top_pairs:
            time_left = datetime.fromtimestamp(ts/1000).strftime("%H:%M:%S")
            msg += (
                f"‚ñ™Ô∏è {symbol}\n"
                f"–§–∞–Ω–¥–∏–Ω–≥: {rate*100:.4f}% | "
                f"–í—ã–ø–ª–∞—Ç–∞: {time_left}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'LONG' if rate < 0 else 'SHORT'}\n\n"
            )
        
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
async def set_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–∞—Ä–∂–∏ –≤ USDT (–º–∏–Ω. 10):")
    return SET_MARJA

async def save_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        if marja < 10:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º—É–º 10 USDT")
            return SET_MARJA
            
        available = await get_usdt_balance()
        if marja > available:
            await update.message.reply_text(f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDT")
            return SET_MARJA

        chat_id = update.effective_chat.id
        sniper_active[chat_id] = {
            **sniper_active.get(chat_id, {}),
            "real_marja": marja
        }
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞: {marja} USDT")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")
        return SET_MARJA

async def set_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÜîÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (1-100):")
    return SET_PLECHO

async def save_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plecho = int(update.message.text)
        if not 1 <= plecho <= 100:
            await update.message.reply_text("‚ùå –î–æ–ø—É—Å—Ç–∏–º–æ 1-100")
            return SET_PLECHO

        chat_id = update.effective_chat.id
        sniper_active[chat_id] = {
            **sniper_active.get(chat_id, {}),
            "real_plecho": plecho
        }
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ: {plecho}x")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return SET_PLECHO

# --- –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ---
async def execute_trade(symbol: str, direction: str, chat_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        settings = sniper_active.get(chat_id, {})
        if not settings.get("real_marja") or not settings.get("real_plecho"):
            await app.bot.send_message(chat_id, "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Ä–∂–∞/–ø–ª–µ—á–æ")
            return False

        symbol_info = session.get_instruments_info(category="linear", symbol=symbol)
        if not symbol_info["result"]["list"]:
            await app.bot.send_message(chat_id, f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        min_qty = float(symbol_info["result"]["list"][0]["lotSizeFilter"]["minOrderQty"])
        qty_step = float(symbol_info["result"]["list"][0]["lotSizeFilter"]["qtyStep"])
        position_size = settings["real_marja"] * settings["real_plecho"]
        adjusted_qty = max(min_qty, round(position_size / qty_step) * qty_step)

        if adjusted_qty > await get_usdt_balance():
            await app.bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT")
            return False

        await app.bot.send_message(
            chat_id,
            f"üîç –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–∫–∏:\n"
            f"‚Ä¢ –ü–∞—Ä–∞: {symbol}\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"‚Ä¢ –û–±—ä–µ–º: {adjusted_qty:.2f} USDT"
        )

        order = session.place_order(
            category="linear",
            symbol=symbol,
            side="Buy" if direction == "LONG" else "Sell",
            order_type="Market",
            qty=adjusted_qty,
            time_in_force="FillOrKill"
        )

        await app.bot.send_message(
            chat_id,
            f"‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞:\n"
            f"‚Ä¢ ID: {order['result']['orderId']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {order['result']['avgPrice']}"
        )
        return True

    except Exception as e:
        await app.bot.send_message(
            chat_id,
            f"‚õî –û—à–∏–±–∫–∞:\n{str(e)}"
        )
        return False

# --- –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
async def test_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞! –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"""
    chat_id = update.effective_chat.id
    
    if not is_developer(chat_id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if chat_id not in sniper_active:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä–∂—É –∏ –ø–ª–µ—á–æ")
            return

        marja = sniper_active[chat_id].get("real_marja")
        plecho = sniper_active[chat_id].get("real_plecho")
        
        if not marja or not plecho:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n"
                f"‚Ä¢ –ú–∞—Ä–∂–∞: {'‚úÖ' if marja else '‚ùå'}\n"
                f"‚Ä¢ –ü–ª–µ—á–æ: {'‚úÖ' if plecho else '‚ùå'}"
            )
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BTCUSDT –¥–ª—è —Ç–µ—Å—Ç–∞
        symbol = "BTCUSDT"
        direction = "LONG"  # –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        
        await update.message.reply_text(
            f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:\n"
            f"‚Ä¢ –ü–∞—Ä–∞: {symbol}\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"‚Ä¢ –ú–∞—Ä–∂–∞: {marja} USDT\n"
            f"‚Ä¢ –ü–ª–µ—á–æ: {plecho}x\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å..."
        )

        success = await execute_trade(symbol, direction, chat_id)
        
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª Bybit")
        else:
            await update.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏")

    except Exception as e:
        await update.message.reply_text(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ---
async def funding_sniper(app):
    while True:
        try:
            tickers = session.get_tickers(category="linear")["result"]["list"]
            usdt_pairs = [t for t in tickers if t["symbol"].endswith("USDT")]

            valid_pairs = []
            for t in usdt_pairs:
                try:
                    rate = float(t["fundingRate"])
                    valid_pairs.append((t["symbol"], rate, int(t["nextFundingTime"])))
                except:
                    continue

            if not valid_pairs:
                await asyncio.sleep(30)
                continue

            best_pair = max(valid_pairs, key=lambda x: abs(x[1]))
            symbol, rate, next_ts = best_pair
            time_left = (next_ts - int(datetime.now().timestamp()*1000)) // 60000

            if 0 <= time_left <= 1:
                direction = "LONG" if rate < 0 else "SHORT"
                
                for chat_id in list(sniper_active.keys()):
                    if sniper_active[chat_id].get("active"):
                        await execute_trade(symbol, direction, chat_id)
                        await asyncio.sleep(1)

        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
        finally:
            await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø-–ø–∞—Ä—ã"), show_top_pairs))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_marja)],
        states={SET_MARJA: [MessageHandler(filters.TEXT, save_marja)]},
        fallbacks=[]
    ))
    
    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ"), set_plecho)],
        states={SET_PLECHO: [MessageHandler(filters.TEXT, save_plecho)]},
        fallbacks=[]
    ))

    # –°–∏–≥–Ω–∞–ª—ã
    app.add_handler(MessageHandler(filters.Regex("üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    app.add_handler(CommandHandler("test_trade", test_trade, filters=filters.User(DEVELOPER_CHAT_ID)))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    async def on_startup(_):
        asyncio.create_task(funding_sniper(app))
    
    app.post_init = on_startup
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
