import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Bybit
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"], ["üì° –°–∏–≥–Ω–∞–ª—ã"], ["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"]]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
latest_top_pairs = []  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ø-5 –ø–∞—Ä
sniper_active = {}     # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CALC_SUM, CALC_MARJA, CALC_PLECHO = range(3)  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
SET_MARJA = 0  # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 funding-–ø–∞—Ä"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∞—Ö —Å Bybit
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ funding rate
        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é funding rate
        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-5

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction} ‚è± —á–µ—Ä–µ–∑ {time_left}\n"

        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

# ===================== –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–ò =====================

async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (–≤ USDT):")
    return CALC_SUM

async def set_calc_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        calc_sum = float(update.message.text)
        context.user_data['calc_sum'] = calc_sum  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∂—É (–≤ USDT):")
        return CALC_MARJA
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CALC_SUM

async def set_calc_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –º–∞—Ä–∂–∏"""
    try:
        marja = float(update.message.text)
        context.user_data['marja'] = marja  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        return CALC_PLECHO
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Ä–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CALC_MARJA

async def set_calc_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–µ—á–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        plecho = float(update.message.text)
        calc_sum = context.user_data['calc_sum']
        marja = context.user_data['marja']
        
        if not latest_top_pairs:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üìä –¢–æ–ø 5 funding-–ø–∞—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        msg = (f"üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ç–æ–ø 5 –ø–∞—Ä–∞–º\n"
               f"–°—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {calc_sum} USDT\n"
               f"–ú–∞—Ä–∂–∞: {marja} USDT | –ü–ª–µ—á–æ: {plecho}x\n\n")
               
        for symbol, rate, _ in latest_top_pairs:
            position = calc_sum * plecho
            gross = position * abs(rate)
            fees = position * 0.0006
            spread = position * 0.0002
            net = gross - fees - spread
            roi = (net / marja) * 100
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            warn = "‚ö†Ô∏è –ù–µ—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ" if net < 0 else ""
            
            msg += (
                f"{symbol} ‚Üí {direction}\n"
                f"  üìä –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"  üí∞ –ì—Ä—è–∑–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {gross:.2f} USDT\n"
                f"  üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {fees:.2f} USDT\n"
                f"  üìâ –°–ø—Ä–µ–¥: {spread:.2f} USDT\n"
                f"  ‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT\n"
                f"  üìà ROI: {roi:.2f}% {warn}\n\n"
            )
            
        await update.message.reply_text(msg)
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CALC_PLECHO

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–∞—Ä–∂–∏ (–≤ USDT), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫:")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["totalEquity"])
        if marja > usdt_balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∂—É
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['real_marja'] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ.")
        return SET_MARJA

# ===================== –°–ò–ì–ù–ê–õ–´ =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="sniper_off")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì° –†–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "sniper_on":
        sniper_active[chat_id] = True
        await query.edit_message_text("üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã.")
    elif query.data == "sniper_off":
        sniper_active[chat_id] = False
        await query.edit_message_text("üî¥ –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# ===================== –û–¢–ú–ï–ù–ê =====================

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –§–û–ù–î–û–í–´–ï –ó–ê–î–ê–ß–ò =====================

async def funding_sniper_loop(app):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ funding rate –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    await asyncio.sleep(5)
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
            for chat_id, active in sniper_active.items():
                if not active:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                marja = sniper_active[chat_id].get("real_marja", 0)
                leverage = 5
                if marja <= 0:
                    continue

                position = marja * leverage

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã
                for t in tickers:
                    symbol = t["symbol"]
                    rate = t.get("fundingRate")
                    next_time = t.get("nextFundingTime")

                    if not rate or not next_time:
                        continue

                    try:
                        rate = float(rate)
                        next_ts = int(next_time) / 1000
                        minutes_left = int((next_ts - now_ts) / 60)
                    except:
                        continue

                    # –ï—Å–ª–∏ –¥–æ funding –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                    if 0 <= minutes_left <= 1:
                        gross = position * abs(rate)
                        fees = position * 0.0006
                        spread = position * 0.0002
                        net = gross - fees - spread

                        if net > 0:  # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
                            await app.bot.send_message(
                                chat_id, 
                                f"üì° –°–ò–ì–ù–ê–õ\n{symbol} ‚Äî —Ñ–∞–Ω–¥–∏–Ω–≥ {rate * 100:.4f}%\n"
                                f"–û–∂–∏–¥–∞–µ–º–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT"
                            )
                            await asyncio.sleep(60)
                            await app.bot.send_message(
                                chat_id, 
                                f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ {symbol}\n"
                                f"–°–∏–º—É–ª—è—Ü–∏—è: {net:.2f} USDT –ø—Ä–∏–±—ã–ª–∏"
                            )
        except Exception as e:
            print(f"[Sniper Error] {e}")
        await asyncio.sleep(60)

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
    conv_calc = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), start_calc)],
        states={
            CALC_SUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_calc_sum)],
            CALC_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_calc_marja)],
            CALC_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_calc_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_calc)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
