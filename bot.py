import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

def get_position_direction(funding_rate: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞"""
    if funding_rate > 0:
        return "SHORT"  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Üí –ø–æ–ª—É—á–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –≤ SHORT
    elif funding_rate < 0:
        return "LONG"   # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Üí –ø–æ–ª—É—á–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –≤ LONG
    else:
        return "NONE"

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø –ø–∞—Ä—ã:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = get_position_direction(rate)
            if direction == "NONE":
                continue

            msg += (
                f"üéü {symbol}\n"
                f"{'üìâ SHORT' if direction == 'SHORT' else 'üìà LONG'} | üìä {rate * 100:.4f}%\n"
                f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {time_left}\n\n"
            )

        await update.message.reply_text(msg.strip())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ start, cancel, set_real_marja, save_real_marja –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ===================== –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê =====================

async def funding_sniper_loop(app):
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            funding_data = []
            for t in tickers:
                symbol = t["symbol"]
                rate = t.get("fundingRate")
                next_time = t.get("nextFundingTime")
                try:
                    rate = float(rate)
                    funding_data.append((symbol, rate, int(next_time)))
                except:
                    continue

            funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
            global latest_top_pairs
            latest_top_pairs = funding_data[:5]

            if not latest_top_pairs:
                await asyncio.sleep(30)
                continue

            top_symbol, rate, next_ts = latest_top_pairs[0]
            minutes_left = int((next_ts / 1000 - now_ts) / 60)

            if 0 <= minutes_left <= 1:
                direction = get_position_direction(rate)
                if direction == "NONE":
                    await asyncio.sleep(30)
                    continue

                for chat_id, data in sniper_active.items():
                    if not data.get('active'):
                        continue

                    if (data.get("last_entry_symbol") == top_symbol and data.get("last_entry_ts") == next_ts):
                        continue

                    marja = data.get('real_marja')
                    plecho = data.get('real_plecho')
                    if not marja or not plecho:
                        continue

                    position_size = marja * plecho
                    gross = position_size * abs(rate)
                    fees = position_size * 0.0006
                    spread = position_size * 0.0002
                    net = gross - fees - spread
                    roi = (net / marja) * 100

                    await app.bot.send_message(
                        chat_id,
                        f"üì° –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {top_symbol}\n"
                        f"{'üìâ SHORT' if direction == 'SHORT' else 'üìà LONG'} | üìä {rate * 100:.4f}%\n"
                        f"üíº {marja} USDT x{plecho} | üí∞ –î–æ—Ö–æ–¥: {net:.2f} USDT\n"
                        f"‚è± –í—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
                    )

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
                        info = session.get_instruments_info(category="linear", symbol=top_symbol)
                        filters = info["result"]["list"][0]["lotSizeFilter"]
                        min_qty = float(filters["minOrderQty"])
                        step = float(filters["qtyStep"])

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        ticker_info = session.get_tickers(category="linear", symbol=top_symbol)
                        last_price = float(ticker_info["result"]["list"][0]["lastPrice"])
                        raw_qty = position_size / last_price
                        adjusted_qty = raw_qty - (raw_qty % step)

                        if adjusted_qty < min_qty:
                            await app.bot.send_message(
                                chat_id,
                                f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ø–æ {top_symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: –æ–±—ä—ë–º {adjusted_qty:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty})"
                            )
                            continue

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏)
                        try:
                            session.set_leverage(
                                category="linear",
                                symbol=top_symbol,
                                buyLeverage=str(plecho),
                                sellLeverage=str(plecho)
                            )
                        except Exception as e:
                            if "leverage not modified" in str(e):
                                # –ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É
                                pass
                            else:
                                raise e

                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        session.place_order(
                            category="linear",
                            symbol=top_symbol,
                            side="Sell" if direction == "SHORT" else "Buy",
                            order_type="Market",
                            qty=str(adjusted_qty),  # –í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                            time_in_force="FillOrKill"
                        )

                        sniper_active[chat_id]["last_entry_symbol"] = top_symbol
                        sniper_active[chat_id]["last_entry_ts"] = next_ts

                        # –ñ–¥—ë–º –º–æ–º–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                        now = datetime.utcnow().timestamp()
                        delay = (next_ts / 1000) - now
                        if delay > 0:
                            await asyncio.sleep(delay)

                        await asyncio.sleep(10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        close_side = "Buy" if direction == "SHORT" else "Sell"
                        session.place_order(
                            category="linear",
                            symbol=top_symbol,
                            side=close_side,
                            order_type="Market",
                            qty=str(adjusted_qty),
                            time_in_force="FillOrKill"
                        )

                        await app.bot.send_message(
                            chat_id,
                            f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {top_symbol} ({direction})\n"
                            f"üí∏ –ü—Ä–æ—Ñ–∏—Ç: {net:.2f} USDT | üìà ROI: {roi:.2f}%"
                        )

                    except Exception as e:
                        await app.bot.send_message(
                            chat_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ {top_symbol}:\n{str(e)}"
                        )

        except Exception as e:
            print(f"[Sniper Error] {e}")

        await asyncio.sleep(30)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
