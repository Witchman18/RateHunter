# --- START OF FILE bot (7).py ---

import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except (ValueError, TypeError): # –õ—É—á—à–µ –ª–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø –ø–∞—Ä—ã:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"

            msg += (
                f"üéü {symbol}\n"
                f"{direction} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                f"üíπ –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {time_left}\n\n"
            )

        await update.message.reply_text(msg.strip())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        marja = float(update.message.text.strip().replace(",", "."))
        if marja <= 0:
             await update.message.reply_text("‚ùå –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
             return ConversationHandler.END
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∂–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ü–õ–ï–ß–ê =====================

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞:")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        plecho = float(update.message.text.strip().replace(",", "."))
        if plecho <= 0:
             await update.message.reply_text("‚ùå –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
             return ConversationHandler.END
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–µ—á–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    return ConversationHandler.END

# ===================== –ú–ï–ù–Æ –°–ò–ì–ù–ê–õ–û–í =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    buttons = [
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä–∞", callback_data="start_sniper")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä–∞", callback_data="stop_sniper")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –°–∏–≥–Ω–∞–ª—ã:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data == "start_sniper":
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['active'] = True
        await query.edit_message_text("üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    elif data == "stop_sniper":
        if chat_id in sniper_active:
            sniper_active[chat_id]['active'] = False
        await query.edit_message_text("üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def get_position_direction(rate: float) -> str:
    if rate is None:
        return "NONE"
    if rate < 0:
        return "LONG"
    elif rate > 0:
        return "SHORT"
    else:
        return "NONE"

def calculate_adjusted_qty(position_size, price, qty_step, min_qty):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏ (qty), –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏.
    """
    if price <= 0: # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É
        return None
    raw_qty = position_size / price
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –í–ù–ò–ó –¥–æ —à–∞–≥–∞ qty_step
    adjusted_qty = (raw_qty // qty_step) * qty_step
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å float
    adjusted_qty = round(adjusted_qty, 8)
    if adjusted_qty < min_qty:
        return None
    return adjusted_qty

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================

async def funding_sniper_loop(app):
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            funding_data = []
            for t in tickers:
                symbol = t["symbol"]
                rate = t.get("fundingRate")
                next_time = t.get("nextFundingTime")
                try:
                    rate = float(rate) if rate else 0.0 # –û–±—Ä–∞–±–æ—Ç–∫–∞ None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                    funding_data.append((symbol, rate, int(next_time)))
                except (ValueError, TypeError):
                    continue

            funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
            global latest_top_pairs
            latest_top_pairs = funding_data[:5]

            if not latest_top_pairs:
                await asyncio.sleep(30)
                continue

            top_symbol, rate, next_ts = latest_top_pairs[0]
            minutes_left = int((next_ts / 1000 - now_ts) / 60)

            if 0 <= minutes_left <= 1: # –í—Ö–æ–¥ –∑–∞ 0-1 –º–∏–Ω—É—Ç—É –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                direction = get_position_direction(rate)
                if direction == "NONE":
                    continue

                for chat_id, data in sniper_active.items():
                    if not data.get('active'):
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—Ö–æ–¥–∏–ª–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ –≤ —ç—Ç–æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥-–ø–µ—Ä–∏–æ–¥
                    if (data.get("last_entry_symbol") == top_symbol and
                            data.get("last_entry_ts") == next_ts):
                        continue

                    marja = data.get('real_marja')
                    plecho = data.get('real_plecho')
                    if not marja or not plecho:
                        await app.bot.send_message(
                            chat_id,
                            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {top_symbol}: –ú–∞—Ä–∂–∞ ({marja}) –∏–ª–∏ –ø–ª–µ—á–æ ({plecho}) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
                        )
                        continue

                    position_size = marja * plecho
                    gross = position_size * abs(rate)
                    fees = position_size * 0.0006 * 2 # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    # –°–ø—Ä–µ–¥ - –≤–µ—â—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è, –ª—É—á—à–µ —Å—á–∏—Ç–∞—Ç—å –ø–æ —Ñ–∞–∫—Ç—É
                    # net = gross - fees
                    # roi = (net / marja) * 100

                    await app.bot.send_message(
                        chat_id,
                        f"üì° –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {top_symbol}\n"
                        f"{'üìâ SHORT' if direction == 'SHORT' else 'üìà LONG'} | üìä {rate * 100:.4f}%\n"
                        f"üíº {marja:.2f} USDT x{plecho} | –†–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {position_size:.2f} USDT\n"
                        # f"üí∞ –†–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥ (–±–µ–∑ —Å–ø—Ä–µ–¥–∞): {net:.2f} USDT ({roi:.2f}%)\n"
                        f"‚è± –í—Ö–æ–¥ —á–µ—Ä–µ–∑ ~{minutes_left} –º–∏–Ω."
                    )

                    # ==================== –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –°–î–ï–õ–ö–ò ====================
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                        info = session.get_instruments_info(category="linear", symbol=top_symbol)
                        filters = info["result"]["list"][0]["lotSizeFilter"]
                        min_qty = float(filters["minOrderQty"])
                        step = float(filters["qtyStep"])
                        price_filter = info["result"]["list"][0]["priceFilter"]
                        tick_size = float(price_filter["tickSize"])


                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
                        ticker_info = session.get_tickers(category="linear", symbol=top_symbol)
                        last_price = float(ticker_info["result"]["list"][0]["lastPrice"])

                        # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª-–≤–æ
                        adjusted_qty = calculate_adjusted_qty(position_size, last_price, step, min_qty)

                        # ---- –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨ (–û—Ç—Å—Ç—É–ø—ã) ----
                        if adjusted_qty is None:
                            await app.bot.send_message(
                                chat_id,
                                f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ø–æ {top_symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: —Ä–∞—Å—á–µ—Ç–Ω—ã–π –æ–±—ä—ë–º ({position_size / last_price:.6f}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}) –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è."
                            )
                            continue
                        # -------------------------------------

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
                        try:
                            session.set_leverage(
                                category="linear",
                                symbol=top_symbol,
                                buyLeverage=str(plecho),
                                sellLeverage=str(plecho)
                            )
                        except Exception as e:
                            if "110043" in str(e): # Leverage not modified
                                await app.bot.send_message(chat_id, f"‚ÑπÔ∏è –ü–ª–µ—á–æ {plecho}x –¥–ª—è {top_symbol} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                            else:
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {top_symbol}: {str(e)}")
                                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ

                        # --- –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ---
                        orderbook = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
                        best_bid = float(orderbook['result']['b'][0][0])
                        best_ask = float(orderbook['result']['a'][0][0])
                        open_side = "Sell" if direction == "SHORT" else "Buy"
                        # –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (—á—É—Ç—å —Ö—É–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è)
                        open_price = best_ask if open_side == "Buy" else best_bid

                        await app.bot.send_message(chat_id, f"‚è± –û—Ç–∫—Ä—ã–≤–∞—é {direction} {adjusted_qty} {top_symbol}...")

                        open_order_resp = None
                        open_order_id = None
                        cum_exec_qty_open = 0.0
                        cum_exec_value_open = 0.0
                        cum_exec_fee_open = 0.0

                        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
                        try:
                            open_order_resp = session.place_order(
                                category="linear",
                                symbol=top_symbol,
                                side=open_side,
                                order_type="Limit",
                                qty=str(adjusted_qty), # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                price=str(open_price),
                                time_in_force="GoodTillCancel" # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
                            )
                            open_order_id = open_order_resp["result"]["orderId"]
                            await app.bot.send_message(chat_id, f"‚è≥ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {open_order_id} –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω.")
                            await asyncio.sleep(3) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
                        except Exception as e:
                             await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –ª–∏–º–∏—Ç–∫–∏
                        if open_order_id:
                            try:
                                order_info = session.get_order_history(category="linear", orderId=open_order_id, limit=1)
                                order_list = order_info.get("result", {}).get("list", [])
                                if order_list:
                                    ord_data = order_list[0]
                                    cum_exec_qty_open = float(ord_data.get("cumExecQty", 0))
                                    cum_exec_value_open = float(ord_data.get("cumExecValue", 0))
                                    cum_exec_fee_open = float(ord_data.get("cumExecFee", 0))
                                    order_status = ord_data.get("orderStatus")
                                    # –û—Ç–º–µ–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                                    if order_status not in ["Filled", "Cancelled", "Rejected"]:
                                        try:
                                            session.cancel_order(category="linear", symbol=top_symbol, orderId=open_order_id)
                                            await app.bot.send_message(chat_id, f"‚Ü™Ô∏è –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {open_order_id} –æ—Ç–º–µ–Ω–µ–Ω (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ {cum_exec_qty_open}).")
                                        except Exception as cancel_e:
                                            # –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è/–æ—Ç–º–µ–Ω–∏–ª—Å—è –ø–æ–∫–∞ –º—ã —Å–ø–∞–ª–∏
                                             if "Order does not exist" not in str(cancel_e) and "already been filled" not in str(cancel_e):
                                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {open_order_id}: {cancel_e}")
                                else:
                                     await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ä–¥–µ—Ä—É {open_order_id}")

                            except Exception as e:
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ—Ç–º–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {open_order_id}: {e}")

                        # –î–æ–±–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        remaining_qty = round(adjusted_qty - cum_exec_qty_open, 8) # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                        open_order_id_2 = None
                        cum_exec_qty_open2 = 0.0
                        cum_exec_value_open2 = 0.0
                        cum_exec_fee_open2 = 0.0

                        if remaining_qty >= min_qty: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º
                            await app.bot.send_message(chat_id, f"üõí –î–æ–±–∏–≤–∞—é {remaining_qty} {top_symbol} –º–∞—Ä–∫–µ—Ç–æ–º...")
                            try:
                                order_resp2 = session.place_order(
                                    category="linear",
                                    symbol=top_symbol,
                                    side=open_side,
                                    order_type="Market",
                                    qty=str(remaining_qty), # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                    time_in_force="FillOrKill" # –ò–ª–∏ ImmediateOrCancel
                                )
                                open_order_id_2 = order_resp2["result"]["orderId"]
                                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
                                await asyncio.sleep(2)
                                order_info2 = session.get_order_history(category="linear", orderId=open_order_id_2, limit=1)
                                order_list2 = order_info2.get("result", {}).get("list", [])
                                if order_list2:
                                    ord_data2 = order_list2[0]
                                    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è
                                    if ord_data2.get("orderStatus") == "Filled":
                                        cum_exec_qty_open2 = float(ord_data2.get("cumExecQty", 0))
                                        cum_exec_value_open2 = float(ord_data2.get("cumExecValue", 0))
                                        cum_exec_fee_open2 = float(ord_data2.get("cumExecFee", 0))
                                        await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä {open_order_id_2} –∏—Å–ø–æ–ª–Ω–µ–Ω ({cum_exec_qty_open2}).")
                                    else:
                                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä {open_order_id_2} –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Å—Ç–∞—Ç—É—Å {ord_data2.get('orderStatus')}).")

                            except Exception as e:
                                await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {e}")
                        elif remaining_qty > 0:
                             await app.bot.send_message(chat_id, f"‚ÑπÔ∏è –û—Å—Ç–∞—Ç–æ–∫ {remaining_qty} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}), –Ω–µ –¥–æ–±–∏–≤–∞–µ–º.")


                        opened_qty = round(cum_exec_qty_open + cum_exec_qty_open2, 8)

                        if opened_qty < min_qty:
                             await app.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {top_symbol} –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º ({min_qty}). –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {opened_qty}.")
                             continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Ç—É/–∏—Ç–µ—Ä–∞—Ü–∏–∏

                        await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {direction} {opened_qty} {top_symbol} –æ—Ç–∫—Ä—ã—Ç–∞.")

                        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ö–æ–¥
                        sniper_active[chat_id]["last_entry_symbol"] = top_symbol
                        sniper_active[chat_id]["last_entry_ts"] = next_ts

                        # --- –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞ ---
                        now = datetime.utcnow().timestamp()
                        funding_time_sec = next_ts / 1000
                        delay = funding_time_sec - now
                        if delay > 0:
                            await app.bot.send_message(chat_id, f"‚è≥ –ñ–¥—É –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞ ({delay:.0f} —Å–µ–∫)...")
                            await asyncio.sleep(delay)

                        await asyncio.sleep(15)  # –ñ–¥–µ–º –µ—â—ë 15 —Å–µ–∫ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

                        await app.bot.send_message(chat_id, f"‚è± –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {top_symbol}...")

                        # --- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ---
                        # ---- –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨ (–û—Ç—Å—Ç—É–ø—ã –≤—Å–µ–≥–æ –±–ª–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è) ----
                        close_side = "Buy" if direction == "SHORT" else "Sell"

                        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º (PostOnly, reduceOnly)
                        close_order_id = None
                        cum_exec_qty_close = 0.0
                        cum_exec_value_close = 0.0
                        cum_exec_fee_close = 0.0

                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –¥–ª—è —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
                            orderbook_close = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
                            best_bid_close = float(orderbook_close['result']['b'][0][0])
                            best_ask_close = float(orderbook_close['result']['a'][0][0])

                            # –°—Ç–∞–≤–∏–º —Ü–µ–Ω—É —á—É—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ –¥–ª—è PostOnly, —á—Ç–æ–±—ã –±—ã—Ç—å –º–µ–π–∫–µ—Ä–æ–º
                            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º SHORT (–¥–µ–ª–∞–µ–º BUY), —Å—Ç–∞–≤–∏–º –Ω–∞ best_bid
                            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º LONG (–¥–µ–ª–∞–µ–º SELL), —Å—Ç–∞–≤–∏–º –Ω–∞ best_ask
                            raw_close_price = best_bid_close if close_side == "Buy" else best_ask_close
                            # –û–∫—Ä—É–≥–ª—è–µ–º –ø–æ tick_size
                            close_price = round(raw_close_price / tick_size) * tick_size

                            close_order_resp = session.place_order(
                                category="linear",
                                symbol=top_symbol,
                                side=close_side,
                                order_type="Limit",
                                qty=str(opened_qty), # –í–µ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–π –æ–±—ä–µ–º
                                price=str(close_price),
                                time_in_force="PostOnly", # –¢–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä
                                reduce_only=True # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏–µ
                            )
                            close_order_id = close_order_resp["result"]["orderId"]
                            await app.bot.send_message(chat_id, f"‚è≥ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {close_order_id} –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (PostOnly) —Ä–∞–∑–º–µ—â–µ–Ω.")
                            await asyncio.sleep(5) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ

                        except Exception as e:
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (PostOnly) –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {e}")
                            # –ï—Å–ª–∏ PostOnly –Ω–µ –ø—Ä–æ—à–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω–∞ —É—à–ª–∞), –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ª–∏–º–∏—Ç –∏–ª–∏ —Å—Ä–∞–∑—É –º–∞—Ä–∫–µ—Ç

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –ª–∏–º–∏—Ç–∫–∏
                        if close_order_id:
                            try:
                                order_info_close = session.get_order_history(category="linear", orderId=close_order_id, limit=1)
                                order_list_close = order_info_close.get("result", {}).get("list", [])
                                if order_list_close:
                                    close_data = order_list_close[0]
                                    cum_exec_qty_close = float(close_data.get("cumExecQty", 0))
                                    cum_exec_value_close = float(close_data.get("cumExecValue", 0))
                                    cum_exec_fee_close = float(close_data.get("cumExecFee", 0))
                                    order_status_close = close_data.get("orderStatus")

                                    if order_status_close not in ["Filled", "Cancelled", "Rejected"]:
                                        try:
                                            session.cancel_order(category="linear", symbol=top_symbol, orderId=close_order_id)
                                            await app.bot.send_message(chat_id, f"‚Ü™Ô∏è –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id} –æ—Ç–º–µ–Ω–µ–Ω (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ {cum_exec_qty_close}).")
                                        except Exception as cancel_e:
                                            if "Order does not exist" not in str(cancel_e) and "already been filled" not in str(cancel_e):
                                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id}: {cancel_e}")
                                else:
                                     await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ä–¥–µ—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id}")

                            except Exception as e:
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ—Ç–º–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id}: {e}")


                        # –î–æ–±–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—Å—ë –∑–∞–∫—Ä—ã–ª–æ—Å—å –ª–∏–º–∏—Ç–∫–æ–π
                        remaining_close_qty = round(opened_qty - cum_exec_qty_close, 8)
                        close_order_id_2 = None
                        cum_exec_qty_close2 = 0.0
                        cum_exec_value_close2 = 0.0
                        cum_exec_fee_close2 = 0.0

                        if remaining_close_qty >= min_qty: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º
                            await app.bot.send_message(chat_id, f"üõí –ó–∞–∫—Ä—ã–≤–∞—é –æ—Å—Ç–∞—Ç–æ–∫ {remaining_close_qty} {top_symbol} –º–∞—Ä–∫–µ—Ç–æ–º...")
                            try:
                                close_order_resp2 = session.place_order(
                                    category="linear",
                                    symbol=top_symbol,
                                    side=close_side,
                                    order_type="Market",
                                    qty=str(remaining_close_qty),
                                    time_in_force="FillOrKill", # –ò–ª–∏ ImmediateOrCancel
                                    reduce_only=True
                                )
                                close_order_id_2 = close_order_resp2["result"]["orderId"]
                                await asyncio.sleep(2) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                                close_info2 = session.get_order_history(category="linear", orderId=close_order_id_2, limit=1)
                                close_list2 = close_info2.get("result", {}).get("list", [])
                                if close_list2:
                                    close_data2 = close_list2[0]
                                    if close_data2.get("orderStatus") == "Filled":
                                        cum_exec_qty_close2 = float(close_data2.get("cumExecQty", 0))
                                        cum_exec_value_close2 = float(close_data2.get("cumExecValue", 0))
                                        cum_exec_fee_close2 = float(close_data2.get("cumExecFee", 0))
                                        await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id_2} –∏—Å–ø–æ–ª–Ω–µ–Ω ({cum_exec_qty_close2}).")

                                    else:
                                         await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è {close_order_id_2} –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Å—Ç–∞—Ç—É—Å {close_data2.get('orderStatus')}).")
                            except Exception as e:
                                await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–µ—Ç-–∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
                        elif remaining_close_qty > 0:
                             await app.bot.send_message(chat_id, f"‚ÑπÔ∏è –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è {remaining_close_qty} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}).")

                        closed_qty = round(cum_exec_qty_close + cum_exec_qty_close2, 8)

                        if closed_qty < opened_qty * 0.99: # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –º–µ–Ω–µ–µ 99% –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ
                             await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {top_symbol} –∑–∞–∫—Ä—ã—Ç–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é! –û—Ç–∫—Ä—ã—Ç–æ: {opened_qty}, –ó–∞–∫—Ä—ã—Ç–æ: {closed_qty}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é!")
                        else:
                             await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {top_symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ ({closed_qty}).")


                        # --- –†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
                        total_fees = cum_exec_fee_open + cum_exec_fee_open2 + cum_exec_fee_close + cum_exec_fee_close2
                        # PNL –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ * –∫–æ–ª-–≤–æ) - (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ * –∫–æ–ª-–≤–æ)
                        # –∏–ª–∏ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ - –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
                        total_buy_value = 0.0
                        total_sell_value = 0.0
                        total_buy_qty = 0.0
                        total_sell_qty = 0.0

                        # –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ä–¥–µ—Ä–∞–º –æ—Ç–∫—Ä—ã—Ç–∏—è
                        if open_side == "Buy":
                            total_buy_value += cum_exec_value_open + cum_exec_value_open2
                            total_buy_qty += cum_exec_qty_open + cum_exec_qty_open2
                        else: # Sell
                            total_sell_value += cum_exec_value_open + cum_exec_value_open2
                            total_sell_qty += cum_exec_qty_open + cum_exec_qty_open2

                        # –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ä–¥–µ—Ä–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
                        if close_side == "Buy":
                            total_buy_value += cum_exec_value_close + cum_exec_value_close2
                            total_buy_qty += cum_exec_qty_close + cum_exec_qty_close2
                        else: # Sell
                            total_sell_value += cum_exec_value_close + cum_exec_value_close2
                            total_sell_qty += cum_exec_qty_close + cum_exec_qty_close2

                        # PNL –æ—Ç —Ü–µ–Ω—ã: –ü—Ä–æ–¥–∞–ª –¥–æ—Ä–æ–∂–µ —á–µ–º –∫—É–ø–∏–ª (–¥–ª—è –ª–æ–Ω–≥–∞) –∏–ª–∏ –∫—É–ø–∏–ª –¥–µ—à–µ–≤–ª–µ —á–µ–º –ø—Ä–æ–¥–∞–ª (–¥–ª—è —à–æ—Ä—Ç–∞)
                        price_pnl = total_sell_value - total_buy_value

                        # PNL –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ç.–∫. —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–µ–µ)
                        # (–û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT –Ω–∞ –º–æ–º–µ–Ω—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞) * funding_rate
                        # –ë–µ—Ä–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–∫ –æ—Ü–µ–Ω–∫—É –æ–±—ä–µ–º–∞
                        funding_pnl_approx = (cum_exec_value_open + cum_exec_value_open2) * rate * (-1 if direction == "SHORT" else 1) # –§–∞–Ω–¥–∏–Ω–≥ –ø–ª–∞—Ç–∏—Ç—Å—è –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è

                        net_profit = price_pnl + funding_pnl_approx - total_fees
                        roi_pct = (net_profit / marja) * 100 if marja else 0.0

                        await app.bot.send_message(
                            chat_id,
                            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏: {top_symbol} ({direction})\n"
                            f" –û—Ç–∫—Ä—ã—Ç–æ: {opened_qty:.6f} | –ó–∞–∫—Ä—ã—Ç–æ: {closed_qty:.6f}\n"
                            f" PNL (—Ü–µ–Ω–∞): {price_pnl:.4f} USDT\n"
                            f" PNL (—Ñ–∞–Ω–¥–∏–Ω–≥, –ø—Ä–∏–±–ª.): {funding_pnl_approx:.4f} USDT\n"
                            f" –ö–æ–º–∏—Å—Å–∏–∏: {total_fees:.4f} USDT\n"
                            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.4f} USDT\n"
                            f"üìà ROI: {roi_pct:.2f}% (–æ—Ç –º–∞—Ä–∂–∏ {marja:.2f} USDT)"
                        )
                        # ----------------------------------------------------------

                    # ==================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –°–î–ï–õ–ö–ò =====================
                    except Exception as trade_e:
                        await app.bot.send_message(
                            chat_id,
                            f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –ø–æ {top_symbol}:\n{str(trade_e)}\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é!"
                        )
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print(f"[Trade Error] Chat {chat_id}, Symbol {top_symbol}: {trade_e}")
                        import traceback
                        traceback.print_exc()


        except Exception as loop_e:
            print(f"[Sniper Loop Error] {loop_e}")
            import traceback
            traceback.print_exc()
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

        await asyncio.sleep(30) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

# ===================== –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ü–†–û–î–ï) =====================
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
# –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ.
# –û—Å—Ç–∞–≤–∏–ª –µ–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.
# async def test_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     chat_id = update.effective_chat.id
#     # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ test_trade) ...
#     pass


# ===================== MAIN =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø-–ø–∞—Ä—ã"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))
    # app.add_handler(CommandHandler("test_trade", test_trade)) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∞ –ú–∞—Ä–∂–∞"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚öñ –ü–ª–µ—á–æ"), set_real_plecho)],
        states={
            SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_plecho)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç)
    async def on_startup(passed_app): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        print("Starting background sniper loop...")
        asyncio.create_task(funding_sniper_loop(passed_app))
        print("Sniper loop task created.")

    app.post_init = on_startup
    print("Starting bot polling...")
    app.run_polling()
    print("Bot polling stopped.")

# --- END OF FILE bot (7).py ---
