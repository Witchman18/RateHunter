import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"], ["üì° –°–∏–≥–Ω–∞–ª—ã"], ["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"]]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0  # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction} ‚è± —á–µ—Ä–µ–∑ {time_left}\n"

        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏"""
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫:\n"
        "(–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ Bybit)"
    )
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["totalEquity"])
        
        if marja > usdt_balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∂—É
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {'active': False}
        
        sniper_active[chat_id]['real_marja'] = marja
        await update.message.reply_text(f"‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –º–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.50)")
        return SET_MARJA
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END

# ===================== –°–ò–ì–ù–ê–õ–´ =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="sniper_off")]
    ]
    await update.message.reply_text(
        "üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "sniper_on":
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['active'] = True
        await query.edit_message_text("üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['active'] = False
        await query.edit_message_text("üî¥ –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")

# ===================== –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê =====================

async def funding_sniper_loop(app):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"""
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            for chat_id, data in sniper_active.items():
                if not data.get('active', False):
                    continue

                marja = data.get('real_marja', 0)
                if marja <= 0:
                    continue

                leverage = 5
                position = marja * leverage

                for t in tickers:
                    symbol = t["symbol"]
                    rate = t.get("fundingRate")
                    next_time = t.get("nextFundingTime")

                    if not rate or not next_time:
                        continue

                    try:
                        rate = float(rate)
                        next_ts = int(next_time) / 1000
                        minutes_left = int((next_ts - now_ts) / 60)
                    except:
                        continue

                    if 0 <= minutes_left <= 1:
                        gross = position * abs(rate)
                        fees = position * 0.0006
                        spread = position * 0.0002
                        net = gross - fees - spread

                        if net > 0:
                            await app.bot.send_message(
                                chat_id,
                                f"üì° –°–ò–ì–ù–ê–õ\n{symbol} ‚Äî —Ñ–∞–Ω–¥–∏–Ω–≥ {rate*100:.4f}%\n"
                                f"–ü—Ä–∏–±—ã–ª—å: {net:.2f} USDT"
                            )
                            await asyncio.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ sniper_loop: {e}")
            await asyncio.sleep(10)
        await asyncio.sleep(30)

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
