import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

# –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø –ø–∞—Ä—ã:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"

            msg += (
                f"üéü {symbol}\n"
                f"{direction} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                f"üíπ –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {time_left}\n\n"
            )

        await update.message.reply_text(msg.strip())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id
        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["totalEquity"])

        if marja > usdt_balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return ConversationHandler.END

        if chat_id not in sniper_active:
            sniper_active[chat_id] = {"active": False}
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END
        
# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ü–õ–ï–ß–ê =====================

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plecho = float(update.message.text)
        chat_id = update.effective_chat.id

        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}

        sniper_active[chat_id]['real_plecho'] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x")
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)")
        return SET_PLECHO

# ===================== –°–ò–ì–ù–ê–õ–´ =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("üîî –í–∫–ª", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª", callback_data="sniper_off")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    if query.data == "sniper_on":
        sniper_active[chat_id] = sniper_active.get(chat_id, {})
        sniper_active[chat_id]["active"] = True
        await query.edit_message_text("üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        sniper_active[chat_id] = sniper_active.get(chat_id, {})
        sniper_active[chat_id]["active"] = False
        await query.edit_message_text("üî¥ –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")

# ===================== –°–ù–ê–ò–ü–ï–† =====================
# ===================== –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê =====================

async def funding_sniper_loop(app):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ funding rate –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∞–º–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –ø–∞—Ä–µ"""
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()

            # –ü–æ–ª—É—á–∞–µ–º funding-—Ä–µ–π—Ç—ã
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø 5 –ø–∞—Ä –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É
            funding_data = []
            for t in tickers:
                symbol = t["symbol"]
                rate = t.get("fundingRate")
                next_time = t.get("nextFundingTime")
                try:
                    rate = float(rate)
                    funding_data.append((symbol, rate, int(next_time)))
                except:
                    continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–µ funding rate –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
            funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
            global latest_top_pairs
            latest_top_pairs = funding_data[:5]

            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –ø–µ—Ä–≤—É—é ‚Äî —Å–∞–º—É—é –ø—Ä–∏–±—ã–ª—å–Ω—É—é –ø–∞—Ä—É
            if not latest_top_pairs:
                await asyncio.sleep(30)
                continue

            top_symbol, rate, next_ts = latest_top_pairs[0]
            minutes_left = int((next_ts / 1000 - now_ts) / 60)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ –≤—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É, —Ç–æ –º–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å
            if 0 <= minutes_left <= 1:
                direction = "LONG" if rate < 0 else "SHORT"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for chat_id, data in sniper_active.items():
                    if not data.get('active'):
                        continue

                    marja = data.get('real_marja')
                    plecho = data.get('real_plecho')
                    if not marja or not plecho:
                        continue

                    position_size = marja * plecho
                    gross = position_size * abs(rate)
                    fees = position_size * 0.0006
                    spread = position_size * 0.0002
                    net = gross - fees - spread

                    # üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Å–¥–µ–ª–∫–µ
                    await app.bot.send_message(
    chat_id,
    f"üì° –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {symbol}\n"
    f"{'üìà LONG' if direction == 'LONG' else 'üìâ SHORT'} | üìä {rate * 100:.4f}%\n"
    f"üíº {marja} USDT x{plecho}  |  üí∞ –î–æ—Ö–æ–¥: {net:.2f} USDT\n"
    f"‚è± –í—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
)

                    # üî• –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
                    try:
                        side = "Buy" if direction == "LONG" else "Sell"
                        session.place_order(
                            category="linear",
                            symbol=top_symbol,
                            side=side,
                            order_type="Market",
                            qty=round(position_size, 2),
                            time_in_force="FillOrKill"
                        )
                        await app.bot.send_message(
    chat_id,
    f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {symbol} ({direction})\n"
    f"üí∏ –ü—Ä–æ—Ñ–∏—Ç: {net:.2f} USDT  |  üìà ROI: {roi:.2f}%"
)

                    except Exception as e:
                        await app.bot.send_message(
                            chat_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ {top_symbol}:\n{str(e)}"
                        )

        except Exception as e:
            print(f"[Sniper Error] {e}")

        await asyncio.sleep(30)

# ===================== MAIN =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø-–ø–∞—Ä—ã"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∞ –ú–∞—Ä–∂–∞"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚öñ –ü–ª–µ—á–æ"), set_real_plecho)],
        states={
            SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_plecho)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç)
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    app.run_polling()
