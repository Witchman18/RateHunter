import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"], ["üì° –°–∏–≥–Ω–∞–ª—ã"], ["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"]]
latest_top_pairs = []
sniper_active = {}

# NEW: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –º–∞—Ä–∂–∏
SET_REAL_MARJA = 0  # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏
CALC_TEST_SUM, CALC_TEST_MARJA, CALC_PLECHO = range(1, 4)  # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction} ‚è± —á–µ—Ä–µ–∑ {time_left}\n"

        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

# NEW: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫)
async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫:\n"
        "(–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ Bybit)"
    )
    return SET_REAL_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id

        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["totalEquity"])
        if marja > usdt_balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
            return ConversationHandler.END

        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['real_marja'] = marja
        await update.message.reply_text(f"‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –º–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ.")
        return SET_REAL_MARJA

# NEW: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –¢–ï–°–¢–û–í–´–• —Ä–∞—Å—á–µ—Ç–æ–≤
async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßÆ –í–≤–µ–¥–∏—Ç–µ –¢–ï–°–¢–û–í–£–Æ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–≤ USDT):\n"
        "(–≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏)"
    )
    return CALC_TEST_SUM

async def set_test_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['test_sum'] = float(update.message.text)
        await update.message.reply_text(
            "üìà –í–≤–µ–¥–∏—Ç–µ –¢–ï–°–¢–û–í–£–Æ –º–∞—Ä–∂—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ROI (–≤ USDT):\n"
            "(–≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ä–µ–∞–ª—å–Ω–æ–π)"
        )
        return CALC_TEST_MARJA
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return CALC_TEST_SUM

async def set_test_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['test_marja'] = float(update.message.text)
        await update.message.reply_text("‚ÜîÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        return CALC_PLECHO
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Ä–∂–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return CALC_TEST_MARJA

async def set_calc_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        test_sum = context.user_data['test_sum']
        test_marja = context.user_data['test_marja']
        plecho = float(update.message.text)
        position = test_sum * plecho

        if not latest_top_pairs:
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ 'üìä –¢–æ–ø 5 funding-–ø–∞—Ä'")
            return ConversationHandler.END

        msg = (
            f"üìä <b>–¢–ï–°–¢–û–í–´–ô –†–ê–°–ß–Å–¢</b>\n"
            f"‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {test_sum} USDT\n"
            f"‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –º–∞—Ä–∂–∞: {test_marja} USDT\n"
            f"‚Ä¢ –ü–ª–µ—á–æ: {plecho}x\n\n"
        )
        
        for symbol, rate, _ in latest_top_pairs:
            gross = position * abs(rate)
            fees = position * 0.0006
            spread = position * 0.0002
            net = gross - fees - spread
            roi = (net / test_marja) * 100
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            warn = "‚ö†Ô∏è –ù–µ—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ" if net < 0 else ""
            
            msg += (
                f"<b>{symbol}</b> ‚Üí {direction}\n"
                f"  üìä –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"  üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT\n"
                f"  üìà ROI: {roi:.2f}% {warn}\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        real_marja = sniper_active.get(update.effective_chat.id, {}).get('real_marja')
        if real_marja:
            msg += f"‚ÑπÔ∏è <i>–í–∞—à–∞ –†–ï–ê–õ–¨–ù–ê–Ø –º–∞—Ä–∂–∞: {real_marja} USDT</i>"
        
        await update.message.reply_html(msg)
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ signal_menu, signal_callback, cancel, funding_sniper_loop –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # NEW: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    conv_calc = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), start_calc)],
        states={
            CALC_TEST_SUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_test_sum)],
            CALC_TEST_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_test_marja)],
            CALC_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_calc_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_calc)

    # NEW: –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏
    conv_real_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_real_marja)],
        states={
            SET_REAL_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_real_marja)

    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    app.run_polling()
