# --- START OF FILE bot (8).py ---
import os
import asyncio
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å timestamp
import aiohttp
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from mexc_funding import get_funding_rates_mexc

from dotenv import load_dotenv

load_dotenv()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET, recv_window=20000)
# === –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏ ===
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñÔ∏è –ü–ª–µ—á–æ"],
    ["üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–Ω–∞–π–ø–µ—Ä–æ–º"] # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
]
latest_top_pairs = []
sniper_active = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_MARJA, SET_PLECHO = range(2)
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–Ω–∞–π–ø–µ—Ä–∞
SET_MIN_TURNOVER_CONFIG, SET_MIN_PROFIT_CONFIG = range(10, 12)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
ENTRY_WINDOW_START_SECONDS = 60
ENTRY_WINDOW_END_SECONDS = 20
POST_FUNDING_WAIT_SECONDS = 1
MAKER_ORDER_WAIT_SECONDS_ENTRY = 7
MAKER_ORDER_WAIT_SECONDS_EXIT = 2
SNIPER_LOOP_INTERVAL_SECONDS = 5
DEFAULT_MAX_CONCURRENT_TRADES = 1
MAX_PAIRS_TO_CONSIDER_PER_CYCLE = 1 # –≠—Ç–æ MAX_PAIRS_FOR_DETAILED_TEST –∏–∑ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏

# "–£–º–Ω—ã–µ" –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–µ –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DEFAULT_MIN_TURNOVER_USDT = Decimal("7500000") # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
DEFAULT_MIN_EXPECTED_PNL_USDT = Decimal("-10.0")  # –í–†–ï–ú–ï–ù–ù–û: –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MIN_FUNDING_RATE_ABS_FILTER = Decimal("0.0001") # 0.01%
MAX_ALLOWED_SPREAD_PCT_FILTER = Decimal("2.0")  # –í–†–ï–ú–ï–ù–ù–û: 2%, –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ø—Ä–µ–¥
MAKER_FEE_RATE = Decimal("0.0002") # –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ (0.02% Bybit non-VIP Derivatives Maker)
TAKER_FEE_RATE = Decimal("0.00055")# –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ (0.055% Bybit non-VIP Derivatives Taker)
MIN_QTY_TO_MARKET_FILL_PCT_ENTRY = Decimal("0.20")
ORDERBOOK_FETCH_RETRY_DELAY = 0.2

# --- Helper –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ ---
def ensure_chat_settings(chat_id: int):
    if chat_id not in sniper_active:
        sniper_active[chat_id] = {
            'active': False,
            'real_marja': None,
            'real_plecho': None,
            'max_concurrent_trades': DEFAULT_MAX_CONCURRENT_TRADES,
            'ongoing_trades': {},
            'min_turnover_usdt': DEFAULT_MIN_TURNOVER_USDT,
            'min_expected_pnl_usdt': DEFAULT_MIN_EXPECTED_PNL_USDT,
            # --- –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø TP/SL –∏ –§–ê–ù–î–ò–ù–ì–ê ---
            'min_funding_rate_threshold': Decimal("0.001"), # –î–µ—Ñ–æ–ª—Ç 0.1%
            'tp_target_profit_ratio_of_funding': Decimal("0.75"), # –î–µ—Ñ–æ–ª—Ç 75% –æ—Ç –æ–∂–∏–¥. —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –∫–∞–∫ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            'sl_max_loss_ratio_to_tp_target': Decimal("0.6"), # –î–µ—Ñ–æ–ª—Ç SL = 60% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ TP
        }
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ
    sniper_active[chat_id].setdefault('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    sniper_active[chat_id].setdefault('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)
    sniper_active[chat_id].setdefault('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES)
    sniper_active[chat_id].setdefault('ongoing_trades', {})
    # --- –î–û–ë–ê–í–õ–Ø–ï–ú setdefault –î–õ–Ø –ù–û–í–´–• –ù–ê–°–¢–†–û–ï–ö ---
    sniper_active[chat_id].setdefault('min_funding_rate_threshold', Decimal("0.001"))
    sniper_active[chat_id].setdefault('tp_target_profit_ratio_of_funding', Decimal("0.75"))
    sniper_active[chat_id].setdefault('sl_max_loss_ratio_to_tp_target', Decimal("0.6"))
    sniper_active[chat_id].setdefault('active_exchanges', ['BYBIT', 'MEXC'])


# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def get_mexc_funding_data(min_turnover_filter: Decimal):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É —Å MEXC."""
    mexc_url = "https://contract.mexc.com/api/v1/contract/detail"
    funding_data = []
    try:
        async with aiohttp.ClientSession() as session_http:
            async with session_http.get(mexc_url) as response:
                response.raise_for_status() 
                data = await response.json()
                
                if not data or data.get("success") is not True or not data.get("data"):
                    print("[MEXC Data Error] Invalid response format from MEXC.")
                    return []
                
                tickers = data["data"]
                for t in tickers:
                    if not t.get("quoteCoin") == "USDT" or t.get("state") != "SHOW":
                        continue

                    symbol, rate_str, next_time_str, turnover_str = t.get("symbol"), str(t.get("fundingRate")), str(t.get("nextSettleTime")), str(t.get("volume24"))

                    if not all([symbol, rate_str, next_time_str, turnover_str]):
                        continue
                        
                    try:
                        # –í —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        rate_d = Decimal(rate_str)
                        next_time_int = int(next_time_str)
                        turnover_d = Decimal(turnover_str) 

                        if turnover_d < min_turnover_filter:
                            continue
                        if abs(rate_d) < MIN_FUNDING_RATE_ABS_FILTER:
                            continue
                            
                        funding_data.append({
                            "exchange": "MEXC",
                            "symbol": symbol.replace("_", ""),
                            "rate": rate_d,
                            "next_ts": next_time_int 
                        })
                    # === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
                    # –î–æ–±–∞–≤–∏–ª–∏ InvalidOperation, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —á–∏—Å–ª–æ
                    except (ValueError, TypeError, decimal.InvalidOperation) as e:
                        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞ –∫–∞–∫–æ–π –ø–∞—Ä–µ —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è –±–æ—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–∞–±–∏–≤–∞—Ç—å –ª–æ–≥–∏
                        # print(f"[MEXC Parsing Warning] Could not parse data for {symbol} (value: {rate_str}, {turnover_str}): {e}")
                        continue
    except aiohttp.ClientError as e:
        print(f"Error fetching MEXC data: {e}")
    except Exception as e:
        print(f"An unexpected error occurred in get_mexc_funding_data: {e}")
        
    return funding_data

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Ñ–∏–ª—å—Ç—Ä–∞–º–∏
async def show_top_funding_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    
    active_exchanges = sniper_active[chat_id].get('active_exchanges', [])
    
    bybit_text = "‚úÖ BYBIT" if "BYBIT" in active_exchanges else "‚¨úÔ∏è BYBIT"
    mexc_text = "‚úÖ MEXC" if "MEXC" in active_exchanges else "‚¨úÔ∏è MEXC"
    
    keyboard = [
        [
            InlineKeyboardButton(bybit_text, callback_data="toggle_exchange_BYBIT"),
            InlineKeyboardButton(mexc_text, callback_data="toggle_exchange_MEXC")
        ],
        [
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_exchanges"),
            InlineKeyboardButton("‚¨úÔ∏è –°–Ω—è—Ç—å –≤—Å–µ", callback_data="deselect_all_exchanges")
        ],
        [
            InlineKeyboardButton("üöÄ –ü–æ–∫–∞–∑–∞—Ç—å –¢–æ–ø-5 –ü–∞—Ä", callback_data="fetch_top_pairs_filtered")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å'."
    
    if query:
        try:
            await query.edit_message_text(text=menu_text, reply_markup=reply_markup)
        except Exception as e:
            if "Message is not modified" not in str(e):
                print(f"Error editing message in show_top_funding_menu: {e}")
    else:
        await update.message.reply_text(text=menu_text, reply_markup=reply_markup)

# ==============================================================================
# === –≠–¢–û –ü–û–õ–ù–´–ô –ò –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –ö–û–î –§–£–ù–ö–¶–ò–ò. –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –í–ï–†–°–ò–Æ –¶–ï–õ–ò–ö–û–ú ===
# ==============================================================================
async def fetch_and_display_top_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    
    active_exchanges = sniper_active[chat_id].get('active_exchanges', [])
    current_min_turnover_filter = sniper_active[chat_id].get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    
    if not active_exchanges:
        await query.answer(text="‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±–∏—Ä–∂—É!", show_alert=True)
        return

    try:
        await query.edit_message_text(f"üîÑ –ò—â—É —Ç–æ–ø-5 –ø–∞—Ä –Ω–∞ {', '.join(active_exchanges)}...")

        # === –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ú—ã –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –∏—Ö "–∏–º–µ–Ω–∞" ===
        tasks = []
        task_map = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –±–∏—Ä–∂–µ–π

        if 'BYBIT' in active_exchanges:
            bybit_task = asyncio.create_task(session.get_tickers(category="linear"))
            tasks.append(bybit_task)
            task_map[bybit_task] = 'BYBIT'

        if 'MEXC' in active_exchanges:
            mexc_task = asyncio.create_task(get_mexc_funding_data(current_min_turnover_filter))
            tasks.append(mexc_task)
            task_map[mexc_task] = 'MEXC'
        
        # === –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º `asyncio.wait` –≤–º–µ—Å—Ç–æ `gather` ===
        # –≠—Ç–æ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
        done, pending = await asyncio.wait(tasks)
        
        all_funding_data = []
        
        for task in done:
            exchange_name = task_map[task]
            try:
                res = task.result()
            except Exception as e:
                print(f"[Data Fetch Error for {exchange_name}] Task failed: {e}")
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Bybit
            if exchange_name == 'BYBIT':
                if res.get("result") and res.get("result", {}).get("list"):
                    for t in res["result"]["list"]:
                        symbol, rate_str, next_time_str, turnover_str = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("turnover24h")
                        if not all([symbol, rate_str, next_time_str, turnover_str]): continue
                        try:
                            rate_d, next_time_int, turnover_d = Decimal(rate_str), int(next_time_str), Decimal(turnover_str)
                            if turnover_d < current_min_turnover_filter: continue
                            if abs(rate_d) < MIN_FUNDING_RATE_ABS_FILTER: continue
                            all_funding_data.append({"exchange": "BYBIT", "symbol": symbol, "rate": rate_d, "next_ts": next_time_int})
                        except (ValueError, TypeError, decimal.InvalidOperation): continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ MEXC
            elif exchange_name == 'MEXC':
                if isinstance(res, list):
                    all_funding_data.extend(res)

        all_funding_data.sort(key=lambda x: abs(x['rate']), reverse=True)
        
        top_pairs = all_funding_data[:5]

        if not top_pairs:
            result_msg = f"üìä –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö."
        else:
            result_msg = f"üìä –¢–æ–ø-5 –ø–∞—Ä ({', '.join(active_exchanges)}):\n\n"
            now_ts_dt = datetime.utcnow().timestamp()
            for item in top_pairs:
                exchange, symbol, rate, ts_ms = item['exchange'], item['symbol'], item['rate'], item['next_ts']
                try:
                    delta_sec = int(ts_ms / 1000 - now_ts_dt)
                    if delta_sec < 0: delta_sec = 0
                    h, rem = divmod(delta_sec, 3600); m, s = divmod(rem, 60)
                    time_left = f"{h:01d}—á {m:02d}–º {s:02d}—Å"
                    direction = "üìà LONG (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç)" if rate < 0 else "üìâ SHORT (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç)"
                    result_msg += (f"üè¶ *{exchange}* | üéüÔ∏è *{symbol}*\n{direction}\n"
                                   f"üíπ –§–∞–Ω–¥–∏–Ω–≥: `{rate * 100:.4f}%`\n‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: `{time_left}`\n\n")
                except Exception:
                     result_msg += f"üè¶ *{exchange}* | üéüÔ∏è *{symbol}* - _–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è_\n\n"
        
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –±–∏—Ä–∂", callback_data="back_to_funding_menu")
        ]])
        
        await query.edit_message_text(
            text=result_msg.strip(), 
            reply_markup=reply_markup,
            parse_mode='Markdown', 
            disable_web_page_preview=True
        )

    except Exception as e:
        print("!!! AN ERROR OCCURRED IN fetch_and_display_top_pairs !!!")
        import traceback
        traceback.print_exc()
        
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
        try:
            await query.edit_message_text(text=error_message)
        except Exception:
            await context.bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç RateHunter. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –º—ã –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    original_message_id = context.user_data.pop('original_message_id', None)
    
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    if original_message_id:
        try:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞.
            # –ú—ã —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫ –≤–∏–¥—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞.
            # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
            # –ù–æ –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é.
            await context.bot.delete_message(chat_id=chat_id, message_id=original_message_id)
        except Exception as e:
            print(f"Error deleting original message on cancel: {e}")
    
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ–∫–∞–∂–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞
    # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ cancel –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∞—á–∞—Ç—ã—Ö –∏–∑ –º–µ–Ω—é —Å–Ω–∞–π–ø–µ—Ä–∞
    # –ï—Å–ª–∏ cancel –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ—Ç–∫—É–¥–∞-—Ç–æ –µ—â–µ, —ç—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å
    # –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å sniper_control_menu —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±—ã–ª–∏ –≤ –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ user_data –∫–ª—é—á–∏.
    # await send_final_config_message(chat_id, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    # –õ—É—á—à–µ, —á—Ç–æ–±—ã cancel –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–ª, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–∑—ã–≤–∞–ª –º–µ–Ω—é —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    return ConversationHandler.END

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–Ω—é "–¢–æ–ø-–ø–∞—Ä"
async def top_funding_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ
    
    chat_id = query.message.chat_id
    data = query.data
    ensure_chat_settings(chat_id)
    
    if data == "fetch_top_pairs_filtered":
        await fetch_and_display_top_pairs(update, context)
        return
        
    if data == "back_to_funding_menu":
        await show_top_funding_menu(update, context)
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    active_exchanges = sniper_active[chat_id].get('active_exchanges', [])
    
    if data.startswith("toggle_exchange_"):
        exchange = data.split("_")[-1]
        if exchange in active_exchanges:
            active_exchanges.remove(exchange)
        else:
            active_exchanges.append(exchange)
    elif data == "select_all_exchanges":
        active_exchanges = ['BYBIT', 'MEXC']
    elif data == "deselect_all_exchanges":
        active_exchanges = []
        
    sniper_active[chat_id]['active_exchanges'] = active_exchanges
    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é
    await show_top_funding_menu(update, context)


async def send_final_config_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, message_to_edit: Update = None):
    ensure_chat_settings(chat_id)
    settings = sniper_active[chat_id]
    
    marja = settings.get('real_marja')
    plecho = settings.get('real_plecho')
    max_trades = settings.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES)
    is_active = settings.get('active', False)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    min_turnover = settings.get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    min_pnl = settings.get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
    min_fr_thresh = settings.get('min_funding_rate_threshold', Decimal("0.001"))
    tp_ratio_funding = settings.get('tp_target_profit_ratio_of_funding', Decimal("0.75"))
    sl_ratio_tp = settings.get('sl_max_loss_ratio_to_tp_target', Decimal("0.6"))

    marja_display = marja if marja is not None else '–ù–µ —É—Å—Ç.'
    plecho_display = plecho if plecho is not None else '–ù–µ —É—Å—Ç.'

    summary_parts = [
        f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RateHunter:**",
        f"üí∞ –ú–∞—Ä–∂–∞ (1 —Å–¥–µ–ª–∫–∞): `{marja_display}` USDT",
        f"‚öñÔ∏è –ü–ª–µ—á–æ: `{plecho_display}`x",
        f"üî¢ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫: `{max_trades}`",
        f"üíß –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç: `{min_turnover:,.0f}` USDT",
        f"üìä –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: `{min_fr_thresh*100:.1f}%`",
        f"üéØ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç (–ø—Ä–µ–¥–≤. –æ—Ü–µ–Ω–∫–∞): `{min_pnl}` USDT",
        f"üìà TP (—Ü–µ–ª—å –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞): `{tp_ratio_funding*100:.0f}%`",
        f"üìâ SL (—Ä–∏—Å–∫ –æ—Ç TP): `{sl_ratio_tp*100:.0f}%`",
        f"üö¶ –°—Ç–∞—Ç—É—Å —Å–Ω–∞–π–ø–µ—Ä–∞: *{status_text}*"
    ]
    
    if marja is None or plecho is None:
        summary_parts.append("\n‚ÄºÔ∏è *–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–Ω–∞–π–ø–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä–∂—É –∏ –ø–ª–µ—á–æ!*")
    
    summary_text = "\n\n".join(summary_parts) # –ò–°–ü–†–ê–í–õ–ï–ù –û–¢–°–¢–£–ü

    buttons = []
    status_button_text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä" if is_active else "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä"
    buttons.append([InlineKeyboardButton(f"{'üî¥' if is_active else 'üü¢'} {status_button_text}", callback_data="toggle_sniper")])
    
    trade_limit_buttons = []
    for i in range(1, 6):
        text = f"[{i}]" if i == max_trades else f"{i}"
        trade_limit_buttons.append(InlineKeyboardButton(text, callback_data=f"set_max_trades_{i}"))
    buttons.append([InlineKeyboardButton("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫:", callback_data="noop")] + trade_limit_buttons)

    buttons.append([InlineKeyboardButton(f"üíß –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç: {min_turnover:,.0f} USDT", callback_data="set_min_turnover_config")])
    buttons.append([InlineKeyboardButton(f"üéØ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç: {min_pnl} USDT", callback_data="set_min_profit_config")])
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–´ –û–¢–°–¢–£–ü–´ –î–õ–Ø –ù–û–í–´–• –ö–ù–û–ü–û–ö ---
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ú–∏–Ω. —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    fr_buttons_row = [InlineKeyboardButton("–ú–∏–Ω.–§–∞–Ω–¥%:", callback_data="noop")]
    fr_options = {"0.1": "0.001", "0.3": "0.003", "0.5": "0.005", "1.0": "0.01"} 
    for text, val_str in fr_options.items():
        val_decimal = Decimal(val_str)
        button_text = f"[{text}%]" if min_fr_thresh == val_decimal else f"{text}%"
        fr_buttons_row.append(InlineKeyboardButton(button_text, callback_data=f"set_min_fr_{val_str}"))
    buttons.append(fr_buttons_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è TP (–¥–æ–ª—è –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞)
    tp_buttons_row = [InlineKeyboardButton("TP% –æ—Ç –§:", callback_data="noop")]
    tp_options = {"50": "0.50", "65": "0.65", "75": "0.75", "90": "0.90"}
    for text, val_str in tp_options.items():
        val_decimal = Decimal(val_str)
        button_text = f"[{text}%]" if tp_ratio_funding == val_decimal else f"{text}%"
        tp_buttons_row.append(InlineKeyboardButton(button_text, callback_data=f"set_tp_rf_{val_str}"))
    buttons.append(tp_buttons_row)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è SL (–¥–æ–ª—è –æ—Ç TP)
    sl_buttons_row = [InlineKeyboardButton("SL% –æ—Ç TP:", callback_data="noop")]
    sl_options = {"40": "0.40", "50": "0.50", "60": "0.60", "75": "0.75"}
    for text, val_str in sl_options.items():
        val_decimal = Decimal(val_str)
        button_text = f"[{text}%]" if sl_ratio_tp == val_decimal else f"{text}%"
        sl_buttons_row.append(InlineKeyboardButton(button_text, callback_data=f"set_sl_rtp_{val_str}"))
    buttons.append(sl_buttons_row)
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–°–¢–£–ü–û–í –î–õ–Ø –ù–û–í–´–• –ö–ù–û–ü–û–ö ---
    
    buttons.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")])
    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        if message_to_edit and message_to_edit.callback_query and message_to_edit.callback_query.message:
            await message_to_edit.callback_query.edit_message_text(text=summary_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=chat_id, text=summary_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        print(f"Error sending/editing final config message to {chat_id}: {e}")
        if message_to_edit: # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
             await context.bot.send_message(chat_id=chat_id, text=summary_text + "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é)", reply_markup=reply_markup, parse_mode='Markdown')

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò/–ü–õ–ï–ß–ê =====================
async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ –¥–ª—è –û–î–ù–û–ô —Å–¥–µ–ª–∫–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; ensure_chat_settings(chat_id)
    try:
        marja = Decimal(update.message.text.strip().replace(",", "."))
        if marja <= 0: await update.message.reply_text("‚ùå –ú–∞—Ä–∂–∞ > 0."); return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞: {marja} USDT")
        await send_final_config_message(chat_id, context) 
    except (ValueError, TypeError): await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ (100 –∏–ª–∏ 55.5)."); return SET_MARJA # –ü—Ä–æ—Å–∏–º —Å–Ω–æ–≤–∞
    except Exception as e: await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}"); return ConversationHandler.END
    return ConversationHandler.END

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 10):")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; ensure_chat_settings(chat_id)
    try:
        plecho = Decimal(update.message.text.strip().replace(",", "."))
        if not (0 < plecho <= 100): await update.message.reply_text("‚ùå –ü–ª–µ—á–æ > 0 –∏ <= 100."); return ConversationHandler.END
        sniper_active[chat_id]["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ: {plecho}x")
        await send_final_config_message(chat_id, context)
    except (ValueError, TypeError): await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ (10)."); return SET_PLECHO
    except Exception as e: await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}"); return ConversationHandler.END
    return ConversationHandler.END

# ===================== –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ù–ê–ô–ü–ï–†–û–ú =====================
async def sniper_control_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    # –ï—Å–ª–∏ update.callback_query —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç –º—ã –ø—Ä–∏—à–ª–∏ –∏–∑ inline –∫–Ω–æ–ø–∫–∏ –∏ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    # –ò–Ω–∞—á–µ, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ ReplyKeyboard, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_final_config_message(chat_id, context, message_to_edit=update if update.callback_query else None)
async def sniper_control_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–≤–∏—Å–µ–ª–∞"
    chat_id = query.message.chat_id
    data = query.data
    ensure_chat_settings(chat_id)
    chat_settings = sniper_active[chat_id]

    action_taken = False # –§–ª–∞–≥, —á—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –º–µ–Ω—é –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å

    if data == "toggle_sniper":
        if chat_settings.get('real_marja') is None or chat_settings.get('real_plecho') is None:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º—É—Å–æ—Ä–∏–≤–∞—Ç—å
            await context.bot.answer_callback_query(query.id, text="‚ÄºÔ∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Ä–∂–∞ –∏/–∏–ª–∏ –ø–ª–µ—á–æ!", show_alert=True)
        else:
            new_status = not chat_settings.get('active', False)
            chat_settings['active'] = new_status
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ –º–µ–Ω—é –æ–±–Ω–æ–≤–∏—Ç—å.
            # –î–ª—è answer_callback_query —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –º–µ–Ω—é.
            await context.bot.answer_callback_query(query.id, text="üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!" if new_status else "üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            action_taken = True # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –º–µ–Ω—é –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    
    elif data.startswith("set_max_trades_"):
        try:
            new_max_trades = int(data.split("_")[-1])
            current_max_trades = chat_settings.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES)
            if 1 <= new_max_trades <= 5:
                if current_max_trades != new_max_trades:
                    chat_settings['max_concurrent_trades'] = new_max_trades
                    action_taken = True
                    await context.bot.answer_callback_query(query.id, text=f"–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {new_max_trades}")
                else:
                    # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await context.bot.answer_callback_query(query.id, text="–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.")
            else: 
                 # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                 await context.bot.answer_callback_query(query.id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞.", show_alert=True)
        except (ValueError, IndexError): 
             await context.bot.answer_callback_query(query.id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞.", show_alert=True)

    elif data.startswith("set_min_fr_"): 
        try:
            rate_val_str = data.split("_")[-1] 
            new_val = Decimal(rate_val_str)
            current_val = chat_settings.get('min_funding_rate_threshold', Decimal("0.001"))
            if current_val != new_val:
                chat_settings['min_funding_rate_threshold'] = new_val
                action_taken = True
                await context.bot.answer_callback_query(query.id, text=f"–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {new_val*100:.1f}%")
            else:
                await context.bot.answer_callback_query(query.id, text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        except Exception as e:
            print(f"Error setting min_funding_rate_threshold: {e}")
            await context.bot.answer_callback_query(query.id, text="–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)

    elif data.startswith("set_tp_rf_"): 
        try:
            val_str = data.split("_")[-1] 
            new_val = Decimal(val_str)
            current_val = chat_settings.get('tp_target_profit_ratio_of_funding', Decimal("0.75"))
            if current_val != new_val:
                chat_settings['tp_target_profit_ratio_of_funding'] = new_val
                action_taken = True
                await context.bot.answer_callback_query(query.id, text=f"TP (–¥–æ–ª—è –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞): {new_val*100:.0f}%")
            else:
                await context.bot.answer_callback_query(query.id, text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        except Exception as e:
            print(f"Error setting tp_target_profit_ratio_of_funding: {e}")
            await context.bot.answer_callback_query(query.id, text="–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)

    elif data.startswith("set_sl_rtp_"): 
        try:
            val_str = data.split("_")[-1]
            new_val = Decimal(val_str)
            current_val = chat_settings.get('sl_max_loss_ratio_to_tp_target', Decimal("0.6"))
            if current_val != new_val:
                chat_settings['sl_max_loss_ratio_to_tp_target'] = new_val
                action_taken = True
                await context.bot.answer_callback_query(query.id, text=f"SL (–¥–æ–ª—è –æ—Ç TP): {new_val*100:.0f}%")
            else:
                await context.bot.answer_callback_query(query.id, text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        except Exception as e:
            print(f"Error setting sl_max_loss_ratio_to_tp_target: {e}")
            await context.bot.answer_callback_query(query.id, text="–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)
            
    elif data == "show_top_pairs_inline":
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ)
        await show_top_funding(update, context) 
        # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞, –º—ã –ù–ï —Ö–æ—Ç–∏–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ.
        return # –í–∞–∂–Ω–æ! –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å send_final_config_message –Ω–∏–∂–µ
    
    elif data == "noop":
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –Ω–∞ callback —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return # –í–∞–∂–Ω–æ! –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å send_final_config_message
    
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ action_taken is True, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    if action_taken:
        await send_final_config_message(chat_id, context, message_to_edit=update)
    # –ï—Å–ª–∏ action_taken is False (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ noop),
    # —Ç–æ –º–µ–Ω—é –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "Message is not modified".

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–Ω. –û–±–æ—Ä–æ—Ç–∞ ---
async def ask_min_turnover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É!
    chat_id = query.message.chat_id
    ensure_chat_settings(chat_id)
    current_val = sniper_active[chat_id].get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    try:
        await query.delete_message()
    except Exception as e:
        print(f"Error deleting old menu message in ask_min_turnover: {e}")
        # –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.
        # –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –º—ã –Ω–µ –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    sent_message = await context.bot.send_message(
        chat_id, 
        f"üíß –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Å—É—Ç–æ—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç –≤ USDT (—Ç–µ–∫—É—â–µ–µ: {current_val:,.0f}).\n–ü—Ä–∏–º–µ—Ä: 5000000\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    context.user_data['prompt_message_id'] = sent_message.message_id 
    return SET_MIN_TURNOVER_CONFIG

async def save_min_turnover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    prompt_message_id = context.user_data.pop('prompt_message_id', None)
    user_input_message_id = update.message.message_id
    
    should_send_new_menu = True # –§–ª–∞–≥, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—â–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞)

    try:
        value_str = update.message.text.strip().replace(",", "")
        value = Decimal(value_str)
        if value < 0: 
            await update.message.reply_text("‚ùå –û–±–æ—Ä–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
            should_send_new_menu = False # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤–æ–º –º–µ–Ω—é
        else:
            sniper_active[chat_id]['min_turnover_usdt'] = value
            await update.message.reply_text(f"‚úÖ –ú–∏–Ω. –æ–±–æ—Ä–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value:,.0f} USDT")
            
    except (ValueError, TypeError): 
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
        should_send_new_menu = False
    except Exception as e: 
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.")
        should_send_new_menu = False
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º)
    try: 
        await context.bot.delete_message(chat_id=chat_id, message_id=user_input_message_id)
    except Exception as e: print(f"Error deleting user input message: {e}")
    
    if prompt_message_id:
        try: 
            await context.bot.delete_message(chat_id=chat_id, message_id=prompt_message_id)
        except Exception as e: print(f"Error deleting prompt message: {e}")

    if should_send_new_menu:
        await send_final_config_message(chat_id, context) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        
    return ConversationHandler.END
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–Ω. –ü—Ä–æ—Ñ–∏—Ç–∞ ---
async def ask_min_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É!
    chat_id = query.message.chat_id
    ensure_chat_settings(chat_id)
    current_val = sniper_active[chat_id].get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)
    
    try:
        await query.delete_message()
    except Exception as e:
        print(f"Error deleting old menu message in ask_min_profit: {e}")
        
    sent_message = await context.bot.send_message(
        chat_id, 
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ USDT (—Ç–µ–∫—É—â–µ–µ: {current_val}).\n–ü—Ä–∏–º–µ—Ä: 0.05\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    context.user_data['prompt_message_id'] = sent_message.message_id
    return SET_MIN_PROFIT_CONFIG

async def save_min_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_settings(chat_id)
    prompt_message_id = context.user_data.pop('prompt_message_id', None)
    user_input_message_id = update.message.message_id
    
    should_send_new_menu = True

    try:
        value_str = update.message.text.strip().replace(",", ".")
        value = Decimal(value_str)
        sniper_active[chat_id]['min_expected_pnl_usdt'] = value
        await update.message.reply_text(f"‚úÖ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} USDT")
            
    except (ValueError, TypeError): 
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05). –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.");
        should_send_new_menu = False
    except Exception as e: 
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.")
        should_send_new_menu = False
    
    try: 
        await context.bot.delete_message(chat_id=chat_id, message_id=user_input_message_id)
    except Exception as e: print(f"Error deleting user input message for profit: {e}")
    
    if prompt_message_id:
        try: 
            await context.bot.delete_message(chat_id=chat_id, message_id=prompt_message_id)
        except Exception as e: print(f"Error deleting prompt message for profit: {e}")

    if should_send_new_menu:
        await send_final_config_message(chat_id, context) 
        
    return ConversationHandler.END


# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¢–†–ï–ô–î–ò–ù–ì) =====================
def get_position_direction(rate: Decimal) -> str:
    if rate is None: return "NONE"
    if rate < Decimal("0"): return "Buy"
    elif rate > Decimal("0"): return "Sell"
    else: return "NONE"

def quantize_qty(raw_qty: Decimal, qty_step: Decimal) -> Decimal:
    if qty_step <= Decimal("0"): return raw_qty.quantize(Decimal('1e-8'), rounding=ROUND_DOWN)
    return (raw_qty // qty_step) * qty_step

def quantize_price(raw_price: Decimal, tick_size: Decimal) -> Decimal:
    if tick_size <= Decimal("0"): return raw_price.quantize(Decimal('1e-8'), rounding=ROUND_DOWN)
    return (raw_price / tick_size).quantize(Decimal("1"), rounding=ROUND_HALF_UP) * tick_size

async def get_orderbook_snapshot_and_spread(session, symbol, category="linear", retries=3):
    for attempt in range(retries):
        try:
            response = session.get_orderbook(category=category, symbol=symbol, limit=1)
            if response and response.get("retCode") == 0 and response.get("result"):
                ob = response["result"]
                if ob.get('b') and ob.get('a') and ob['b'] and ob['a'] and ob['b'][0] and ob['a'][0]: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
                    bid_str, ask_str = ob['b'][0][0], ob['a'][0][0]
                    if not bid_str or not ask_str: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                        print(f"[Orderbook] Empty bid/ask string for {symbol}"); await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY); continue
                    bid, ask = Decimal(bid_str), Decimal(ask_str)
                    if bid <= 0 or ask <= 0 or ask < bid: print(f"[Orderbook] Invalid bid/ask value for {symbol}: {bid}/{ask}"); await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY); continue
                    spread_abs = ask - bid; mid = (ask + bid) / 2
                    return {"best_bid": bid, "best_ask": ask, "mid_price": mid, 
                            "spread_abs": spread_abs, "spread_rel_pct": (spread_abs / mid) * 100 if mid > 0 else Decimal("0")}
            # print(f"[Orderbook] Attempt {attempt+1} failed for {symbol}: {response.get('retMsg')}")
        except Exception as e: print(f"[Orderbook] Attempt {attempt+1} for {symbol}: {e}")
        if attempt < retries - 1: await asyncio.sleep(ORDERBOOK_FETCH_RETRY_DELAY)
    return None

async def calculate_pre_trade_pnl_estimate(
    symbol: str, funding_rate: Decimal, position_size_usdt: Decimal, target_qty: Decimal,
    best_bid: Decimal, best_ask: Decimal, open_side: str 
):
    if not all([position_size_usdt > 0, target_qty > 0, best_bid > 0, best_ask > 0, funding_rate is not None]): 
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ PnL (–≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)."
    
    actual_funding_gain = Decimal("0")
    if open_side == "Buy": 
        actual_funding_gain = position_size_usdt * abs(funding_rate)
    elif open_side == "Sell": 
        actual_funding_gain = position_size_usdt * funding_rate
    
    pessimistic_entry_price = best_ask if open_side == "Buy" else best_bid
    pessimistic_exit_price = best_bid if open_side == "Buy" else best_ask
    
    price_pnl_component = Decimal("0")
    if open_side == "Buy":
        price_pnl_component = (pessimistic_exit_price - pessimistic_entry_price) * target_qty
    elif open_side == "Sell":
        price_pnl_component = (pessimistic_entry_price - pessimistic_exit_price) * target_qty

    fees_entry_maker = pessimistic_entry_price * target_qty * MAKER_FEE_RATE 
    fees_exit_maker = pessimistic_exit_price * target_qty * MAKER_FEE_RATE
    total_maker_maker_fees = fees_entry_maker + fees_exit_maker
         
    net_pnl_estimate_mm = actual_funding_gain + price_pnl_component - total_maker_maker_fees
    
    pnl_calc_details_msg = (
        f"  –°–∏–º–≤–æ–ª: *{symbol}*\n"
        f"  –ù–∞–ø—Ä.: {open_side}, –û–±—ä–µ–º: {target_qty}\n"
        f"  –°—Ç–∞–≤–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (API): {funding_rate*100:.4f}%\n"
        f"  Bid/Ask –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞: {best_bid}/{best_ask}\n"
        f"  –†–∞—Å—á. –ø–µ—Å—Å–∏–º. –≤—Ö–æ–¥: {pessimistic_entry_price}\n"
        f"  –†–∞—Å—á. –ø–µ—Å—Å–∏–º. –≤—ã—Ö–æ–¥: {pessimistic_exit_price}\n"
        f"  –§–∞–Ω–¥–∏–Ω–≥ (–æ–∂–∏–¥. –¥–æ—Ö–æ–¥): `{actual_funding_gain:+.4f}` USDT\n"
        f"  –¶–µ–Ω–∞ (–æ–∂–∏–¥. PnL –æ—Ç —Å–ø—Ä–µ–¥–∞): `{price_pnl_component:+.4f}` USDT\n"
        f"  –ö–æ–º–∏—Å—Å–∏–∏ (Maker/Maker): `{-total_maker_maker_fees:.4f}` USDT\n"
        f"  –ò–¢–û–ì–û (–æ—Ü–µ–Ω–∫–∞ —Å M/M –∫–æ–º.): `{net_pnl_estimate_mm:+.4f}` USDT"
    )
    return net_pnl_estimate_mm, pnl_calc_details_msg

async def get_order_status_robust(session, order_id, symbol, category="linear", max_retries=3, delay=0.5):
    for _ in range(max_retries):
        try:
            r = session.get_order_history(category=category, orderId=order_id, limit=1)
            if r and r.get("retCode") == 0 and r.get("result", {}).get("list"):
                od = r["result"]["list"][0]
                if od.get("orderId") == order_id: return od
        except Exception as e: print(f"[Order Status] Error for {order_id}: {e}")
        if _ < max_retries - 1: await asyncio.sleep(delay)
    return None

async def place_limit_order_with_retry(
    session, app, chat_id, symbol, side, qty, price, time_in_force="PostOnly", 
    reduce_only=False, max_wait_seconds=7, check_interval_seconds=0.5 ):
    order_id = None
    try:
        p = {"category": "linear", "symbol": symbol, "side": side, "orderType": "Limit", "qty": str(qty), "price": str(price), "timeInForce": time_in_force}
        if reduce_only: p["reduceOnly"] = True
        r = session.place_order(**p)
        if not (r and r.get("retCode") == 0 and r.get("result", {}).get("orderId")):
            err = f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Maker ({symbol}): {r.get('retMsg', 'Unknown') if r else 'No resp'}"
            await app.bot.send_message(chat_id, f"‚ùå {err}"); return {'status': 'ErrorPlacing', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'message': err, 'order_id': None}
        
        order_id = r["result"]["orderId"]
        act = '–í—ã—Ö–æ–¥' if reduce_only else '–í—Ö–æ–¥'
        await app.bot.send_message(chat_id, f"‚è≥ {act} Maker @{price} (ID: ...{order_id[-6:]}) –¥–ª—è {symbol}")
        
        waited = Decimal("0")
        while waited < Decimal(str(max_wait_seconds)): # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(float(check_interval_seconds)); waited += Decimal(str(check_interval_seconds))
            oi = await get_order_status_robust(session, order_id, symbol)
            if oi:
                s, eq_s, ap_s, fee_s = oi.get("orderStatus"), oi.get("cumExecQty", "0"), oi.get("avgPrice", "0"), oi.get("cumExecFee", "0")
                eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
                ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

                if s == "Filled": await app.bot.send_message(chat_id, f"‚úÖ Maker ...{order_id[-6:]} ({symbol}) –ü–û–õ–ù–û–°–¢–¨–Æ –∏—Å–ø–æ–ª–Ω–µ–Ω: {eq_d} @ {ap_d}"); return {'status': 'Filled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Filled'}
                if s == "PartiallyFilled": print(f"Maker ...{order_id[-6:]} –ß–ê–°–¢–ò–ß–ù–û: {eq_d}. –ñ–¥–µ–º."); continue
                if s in ["Cancelled", "Rejected", "Deactivated", "Expired", "New"]: 
                    status_override = "CancelledPostOnly" if s == "New" and time_in_force == "PostOnly" else s
                    msg = f"‚ö†Ô∏è Maker ...{order_id[-6:]} —Å—Ç–∞—Ç—É—Å: {status_override}. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"
                    await app.bot.send_message(chat_id, msg); return {'status': status_override, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': msg}
        
        final_oi = await get_order_status_robust(session, order_id, symbol) # Timeout
        if final_oi:
            s, eq_s, ap_s, fee_s = final_oi.get("orderStatus"), final_oi.get("cumExecQty", "0"), final_oi.get("avgPrice", "0"), final_oi.get("cumExecFee", "0")
            eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
            ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(final_oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

            if s not in ["Filled", "Cancelled", "Rejected", "Deactivated", "Expired"]:
                try: session.cancel_order(category="linear", symbol=symbol, orderId=order_id); await app.bot.send_message(chat_id, f"‚è≥ Maker ...{order_id[-6:]} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"); return {'status': 'CancelledByTimeout', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Cancelled by timeout'}
                except Exception as ce: await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã Maker ...{order_id[-6:]}: {ce}"); return {'status': 'ErrorCancelling', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': str(ce)}
            return {'status': s, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': f'Final status: {s}'}
        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å Maker ...{order_id[-6:]}"); return {'status': 'ErrorNoStatusAfterTimeout', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': 'Could not get final status'}
    except Exception as e:
        err_txt = f"–ö–†–ò–¢.–û–®–ò–ë–ö–ê place_limit_order ({symbol}): {e}"; print(err_txt); import traceback; traceback.print_exc(); await app.bot.send_message(chat_id, f"‚ùå {err_txt}")
        if order_id:
            oi_exc = await get_order_status_robust(session, order_id, symbol)
            if oi_exc: eq_d=Decimal(oi_exc.get("cumExecQty","0")); ap_d=Decimal(oi_exc.get("avgPrice","0")); fee_d=Decimal(oi_exc.get("cumExecFee","0")); return {'status':'ExceptionAfterPlace','executed_qty':eq_d,'avg_price':ap_d,'fee':fee_d,'order_id':order_id, 'message': str(e)}
        return {'status':'Exception','executed_qty':Decimal("0"),'avg_price':Decimal("0"),'fee':Decimal("0"),'order_id':order_id, 'message': str(e)}

async def place_market_order_robust( session, app, chat_id, symbol, side, qty, time_in_force="ImmediateOrCancel", reduce_only=False):
    order_id = None
    try:
        p = {"category": "linear", "symbol": symbol, "side": side, "orderType": "Market", "qty": str(qty), "timeInForce": time_in_force}
        if reduce_only: p["reduceOnly"] = True
        r = session.place_order(**p)
        if not (r and r.get("retCode") == 0 and r.get("result", {}).get("orderId")):
            ret_msg = r.get('retMsg', 'Unknown') if r else 'No resp'
            err_msg = f"‚ùå –û—à–∏–±–∫–∞ –ú–∞—Ä–∫–µ—Ç ({symbol}): {ret_msg}"
            if r and (r.get('retCode') == 110007 or "not enough" in ret_msg.lower() or "insufficient" in ret_msg.lower()): err_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –ú–∞—Ä–∫–µ—Ç ({symbol}): {ret_msg}"
            print(err_msg); await app.bot.send_message(chat_id, err_msg); return {'status': 'ErrorPlacingMarket', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': None, 'message': err_msg}

        order_id = r["result"]["orderId"]
        act = '–≤—ã—Ö–æ–¥' if reduce_only else '–≤—Ö–æ–¥'
        await app.bot.send_message(chat_id, f"üõí –ú–∞—Ä–∫–µ—Ç ({act}) {symbol} ID: ...{order_id[-6:]}. –ü—Ä–æ–≤–µ—Ä—è—é...")
        await asyncio.sleep(1.5) # –î–∞–µ–º –±–∏—Ä–∂–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä IOC
        oi = await get_order_status_robust(session, order_id, symbol)
        if oi:
            s, eq_s, ap_s, fee_s = oi.get("orderStatus"), oi.get("cumExecQty", "0"), oi.get("avgPrice", "0"), oi.get("cumExecFee", "0")
            eq_d, fee_d = Decimal(eq_s), Decimal(fee_s)
            ap_d = Decimal(ap_s) if ap_s and Decimal(ap_s) > 0 else (Decimal(oi.get("cumExecValue", "0")) / eq_d if eq_d > 0 else Decimal("0"))

            if s == "Filled": await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}) –ò–°–ü–û–õ–ù–ï–ù: {eq_d} @ {ap_d}"); return {'status': 'Filled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Market Filled'}
            if s == "PartiallyFilled" and time_in_force == "ImmediateOrCancel": await app.bot.send_message(chat_id, f"‚úÖ –ú–∞—Ä–∫–µ—Ç IOC ...{order_id[-6:]} –ß–ê–°–¢–ò–ß–ù–û: {eq_d} @ {ap_d}"); return {'status': 'PartiallyFilled', 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': 'Market IOC PartiallyFilled'}
            if eq_d == Decimal("0") and s in ["Cancelled", "Rejected", "Deactivated", "Expired"]: msg = f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç IOC ...{order_id[-6:]} ({symbol}) –ù–ï –ò–°–ü–û–õ–ù–ò–õ –ù–ò–ß–ï–ì–û (—Å—Ç–∞—Ç—É—Å: {s})."; await app.bot.send_message(chat_id, msg); return {'status': s, 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': msg}
            msg = f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}): {s}. –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {eq_d}"; await app.bot.send_message(chat_id, msg); return {'status': s, 'executed_qty': eq_d, 'avg_price': ap_d, 'fee': fee_d, 'order_id': order_id, 'message': msg}
        
        msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ú–∞—Ä–∫–µ—Ç ...{order_id[-6:]} ({symbol}). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω."; await app.bot.send_message(chat_id, msg); return {'status': 'ErrorNoStatusMarket', 'executed_qty': Decimal("0"), 'avg_price': Decimal("0"), 'fee': Decimal("0"), 'order_id': order_id, 'message': msg}
    except Exception as e:
        err_txt = f"–ö–†–ò–¢.–û–®–ò–ë–ö–ê place_market_order ({symbol}): {e}"; print(err_txt); import traceback; traceback.print_exc(); await app.bot.send_message(chat_id, f"‚ùå {err_txt}")
        return {'status':'ExceptionMarket','executed_qty':Decimal("0"),'avg_price':Decimal("0"),'fee':Decimal("0"),'order_id':order_id, 'message': str(e)}

async def get_current_position_info(session, symbol, category="linear"):
    try:
        r = session.get_positions(category=category, symbol=symbol)
        if r and r.get("retCode") == 0:
            pl = r.get("result", {}).get("list", [])
            if pl: # –î–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ä–µ–∂–∏–º–µ One-Way –±—É–¥–µ—Ç –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–≤–µ –¥–ª—è Hedge Mode
                for pd in pl:
                    if pd.get("symbol") == symbol and Decimal(pd.get("size", "0")) > Decimal("0"):
                        return {"size": Decimal(pd.get("size", "0")), "side": pd.get("side"), 
                                "avg_price": Decimal(pd.get("avgPrice", "0")), "liq_price": Decimal(pd.get("liqPrice", "0")), 
                                "unrealised_pnl": Decimal(pd.get("unrealisedPnl", "0"))}
        return None # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
    except Exception as e: print(f"–û—à–∏–±–∫–∞ get_current_position_info ({symbol}): {e}"); return None

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================
# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================
async def funding_sniper_loop(app: ApplicationBuilder): # app is Application
    print(" Sniper loop started ".center(50, "="))
    while True: # –í–Ω–µ—à–Ω–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–Ω–∞–π–ø–µ—Ä–∞
        await asyncio.sleep(SNIPER_LOOP_INTERVAL_SECONDS) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ —Å–Ω–∞–π–ø–µ—Ä–∞
        try: # –í–Ω–µ—à–Ω–∏–π try –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            current_time_epoch = time.time()
            tickers_response = session.get_tickers(category="linear")
            all_tickers = tickers_response.get("result", {}).get("list", [])
            if not all_tickers: 
                print("[SniperLoop] No tickers received. Skipping iteration.")
                continue

            globally_candidate_pairs = []
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            for t in all_tickers:
                symbol, rate_s, next_ts_s, turnover_s = t.get("symbol"), t.get("fundingRate"), t.get("nextFundingTime"), t.get("turnover24h")
                if not all([symbol, rate_s, next_ts_s, turnover_s]): continue
                try:
                    rate_d, next_ts_e, turnover_d = Decimal(rate_s), int(next_ts_s) / 1000, Decimal(turnover_s)
                    # –ì—Ä—É–±—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å)
                    if turnover_d < DEFAULT_MIN_TURNOVER_USDT / 2 : continue 
                    # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                    if abs(rate_d) < MIN_FUNDING_RATE_ABS_FILTER: continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –ù–ê –ú–û–ú–ï–ù–¢ –ü–ï–†–í–ò–ß–ù–û–ì–û –û–¢–ë–û–†–ê
                    seconds_left_initial = next_ts_e - current_time_epoch 
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
                    if not (ENTRY_WINDOW_END_SECONDS <= seconds_left_initial <= ENTRY_WINDOW_START_SECONDS): continue
                    
                    is_new_candidate = not any(cp_exist["symbol"] == symbol for cp_exist in globally_candidate_pairs)
                    if is_new_candidate:
                         globally_candidate_pairs.append({
                             "symbol": symbol, 
                             "rate": rate_d, 
                             "next_ts": next_ts_e, # –í—Ä–µ–º—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —ç–ø–æ—Ö–∏
                             "seconds_left": seconds_left_initial, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–æ–≤/—Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                             "turnover": turnover_d
                         })
                except (ValueError, TypeError) as e_parse:
                    print(f"[SniperLoop] Error parsing ticker data for {symbol}: {e_parse}")
                    continue
            
            if not globally_candidate_pairs:
                # print("[SniperLoop] No globally candidate pairs after initial filter.")
                continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ), –ø–æ—Ç–æ–º –ø–æ –º–æ–¥—É–ª—é —Å—Ç–∞–≤–∫–∏ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
            globally_candidate_pairs.sort(key=lambda x: (x["seconds_left"], -abs(x["rate"])))
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Ö –ò–ó–ù–ê–ß–ê–õ–¨–ù–´–ú –∏ –ê–ö–¢–£–ê–õ–¨–ù–´–ú –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
            print(f"[SniperLoop] Top {len(globally_candidate_pairs)} candidates after initial filter. Checking up to {MAX_PAIRS_TO_CONSIDER_PER_CYCLE}.")
            if globally_candidate_pairs:
                log_time_now_for_candidates = time.time()
                for i, p_info_debug in enumerate(globally_candidate_pairs[:MAX_PAIRS_TO_CONSIDER_PER_CYCLE]):
                     log_actual_sl = p_info_debug["next_ts"] - log_time_now_for_candidates
                     print(f"  Candidate {i+1} (pre-check): {p_info_debug['symbol']}, "
                           f"InitialTimeLeft: {p_info_debug['seconds_left']:.0f}s, "
                           f"CurrentTimeLeft: {log_actual_sl:.0f}s, "
                           f"Rate: {p_info_debug['rate']*100:.4f}%")

            # –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º (–Ω–µ –±–æ–ª–µ–µ MAX_PAIRS_TO_CONSIDER_PER_CYCLE —à—Ç—É–∫)
            for pair_info in globally_candidate_pairs[:MAX_PAIRS_TO_CONSIDER_PER_CYCLE]: 
                s_sym = pair_info["symbol"]
                s_rate = pair_info["rate"]
                s_ts = pair_info["next_ts"] # –í—Ä–µ–º—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –≤ —ç–ø–æ—Ö–µ (—Å–µ–∫—É–Ω–¥—ã)
                s_turnover_pair = pair_info["turnover"] # –û–±–æ—Ä–æ—Ç —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã

                # --- –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–ö–¢–£–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø –î–û –§–ê–ù–î–ò–ù–ì–ê –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ö–û–ô ---
                current_time_for_processing = time.time() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –°–ï–ô–ß–ê–°
                actual_seconds_left = s_ts - current_time_for_processing # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –°–ï–ô–ß–ê–° —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ê–ö–¢–£–ê–õ–¨–ù–û–ï –≤—Ä–µ–º—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –æ–∫–Ω–µ –≤—Ö–æ–¥–∞
                if not (ENTRY_WINDOW_END_SECONDS <= actual_seconds_left <= ENTRY_WINDOW_START_SECONDS):
                    print(f"[SniperLoop][{s_sym}] Skipped (before chat loop). Actual time left ({actual_seconds_left:.0f}s) "
                          f"is outside entry window ({ENTRY_WINDOW_END_SECONDS}s - {ENTRY_WINDOW_START_SECONDS}s).")
                    continue # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ (–∏–ª–∏ –µ—â–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–∞—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                # --- –ö–û–ù–ï–¶ –ö–õ–Æ–ß–ï–í–û–ô –ü–†–û–í–ï–†–ö–ò ---

                s_open_side = get_position_direction(s_rate) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (Buy/Sell)
                if s_open_side == "NONE": 
                    print(f"[SniperLoop][{s_sym}] Skipped. Open side is NONE (funding rate is zero or None).")
                    continue 

                # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–∞ –ø–∞—Ä–∞ –¥–ª—è –Ω–∏—Ö
                for chat_id, chat_config in list(sniper_active.items()): 
                    ensure_chat_settings(chat_id) # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                    if not chat_config.get('active'): continue # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        # ... (–¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞: active, ongoing_trades, etc.) ...
    
    # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –î–ê–ù–ù–û–ì–û –ß–ê–¢–ê ---
                    current_chat_min_fr_threshold = chat_config.get('min_funding_rate_threshold', MIN_FUNDING_RATE_ABS_FILTER) # MIN_FUNDING_RATE_ABS_FILTER - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–µ—Ç
                    if abs(s_rate) < current_chat_min_fr_threshold:
                        # print(f"[{s_sym}][{chat_id}] Skipped. Pair funding rate {abs(s_rate)*100:.4f}% < chat threshold {current_chat_min_fr_threshold*100:.1f}%.")
                      continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–∞—Ä—É –î–õ–Ø –≠–¢–û–ì–û –ß–ê–¢–ê
                        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò ---

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∂–∏ –∏ –ø–ª–µ—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (—ç—Ç–æ—Ç –∫–æ–¥ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
                    s_marja = chat_config.get('real_marja')
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...
                    if len(chat_config.get('ongoing_trades', {})) >= chat_config.get('max_concurrent_trades', DEFAULT_MAX_CONCURRENT_TRADES):
                        # print(f"[SniperLoop][{s_sym}][{chat_id}] Skipped. Max concurrent trades reached for this chat.")
                        continue
                    # –ï—Å–ª–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if s_sym in chat_config.get('ongoing_trades', {}):
                        # print(f"[SniperLoop][{s_sym}][{chat_id}] Skipped. Trade for this symbol already ongoing in this chat.")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∂–∏ –∏ –ø–ª–µ—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    s_marja = chat_config.get('real_marja')
                    s_plecho = chat_config.get('real_plecho')
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    chat_min_turnover = chat_config.get('min_turnover_usdt', DEFAULT_MIN_TURNOVER_USDT)
                    chat_min_pnl_user = chat_config.get('min_expected_pnl_usdt', DEFAULT_MIN_EXPECTED_PNL_USDT)

                    if not s_marja or not s_plecho: continue # –ï—Å–ª–∏ –º–∞—Ä–∂–∞ –∏–ª–∏ –ø–ª–µ—á–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä–æ—Ç –ø–∞—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
                    if s_turnover_pair < chat_min_turnover: 
                        # print(f"[{s_sym}][{chat_id}] Skipped. Pair turnover ({s_turnover_pair:,.0f}) < chat min turnover ({chat_min_turnover:,.0f}).")
                        continue 
                    
                    log_prefix_tg = f"üîç {s_sym} ({chat_id}):" 
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞
                    orderbook_data = await get_orderbook_snapshot_and_spread(session, s_sym)
                    if not orderbook_data: 
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.") 
                        print(f"[{s_sym}][{chat_id}] No orderbook data. Skipping.")
                        continue
                    
                    s_bid, s_ask, s_mid, s_spread_pct = orderbook_data['best_bid'], orderbook_data['best_ask'], orderbook_data['mid_price'], orderbook_data['spread_rel_pct']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∫–∞–Ω–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞)
                    # spread_debug_msg = (
                    #     f"{log_prefix_tg} –°—Ç–∞–∫–∞–Ω:\n"
                    #     f"  Best Bid: {s_bid}\n"
                    #     f"  Best Ask: {s_ask}\n"
                    #     f"  Mid Price: {s_mid}\n"
                    #     f"  –°–ø—Ä–µ–¥ Abs: {s_ask - s_bid}\n"
                    #     f"  –°–ø—Ä–µ–¥ %: {s_spread_pct:.4f}%\n"
                    #     f"  –õ–∏–º–∏—Ç —Å–ø—Ä–µ–¥–∞ % (–≤—Ä–µ–º–µ–Ω–Ω–æ): {MAX_ALLOWED_SPREAD_PCT_FILTER}%"
                    # )
                    # await app.bot.send_message(chat_id, spread_debug_msg)
                    # print(f"[{s_sym}][{chat_id}] OB Data: Bid={s_bid}, Ask={s_ask}, SpreadPct={s_spread_pct:.4f}%, SpreadLimit(temp)={MAX_ALLOWED_SPREAD_PCT_FILTER}%")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥
                    if s_spread_pct > MAX_ALLOWED_SPREAD_PCT_FILTER: 
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –§–ò–õ–¨–¢–†: –°–ø—Ä–µ–¥ ({s_spread_pct:.3f}%) > –ª–∏–º–∏—Ç–∞ ({MAX_ALLOWED_SPREAD_PCT_FILTER}%). –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Skipped due to spread ({s_spread_pct:.3f}%) > LIMIT {MAX_ALLOWED_SPREAD_PCT_FILTER}%")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ (—à–∞–≥ –ª–æ—Ç–∞, —Ç–∏–∫–∞ –∏ —Ç.–¥.)
                    try: 
                        instr_info_resp = session.get_instruments_info(category="linear", symbol=s_sym)
                        instr_info = instr_info_resp["result"]["list"][0]
                    except Exception as e_instr: 
                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {e_instr}. –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Error getting instrument info: {e_instr}. Skipping.")
                        continue
                        
                                            # ... (–∫–æ–¥ try...except –¥–ª—è get_instruments_info —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–ª–∏ –±—ã–ª continue)
                        
                    lot_f, price_f = instr_info["lotSizeFilter"], instr_info["priceFilter"]
                    s_min_q_instr, s_q_step, s_tick_size = Decimal(lot_f["minOrderQty"]), Decimal(lot_f["qtyStep"]), Decimal(price_f["tickSize"])
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    s_pos_size_usdt = s_marja * s_plecho # s_marja –∏ s_plecho –±–µ—Ä—É—Ç—Å—è –∏–∑ chat_config
                    if s_mid <= 0: # s_mid –∏–∑ orderbook_data, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ
                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ–≤–µ—Ä–Ω–∞—è mid_price ({s_mid}). –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Invalid mid_price ({s_mid}). Skipping.")
                        continue
                    s_target_q = quantize_qty(s_pos_size_usdt / s_mid, s_q_step)

                    if s_target_q < s_min_q_instr: 
                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –†–∞—Å—á. –æ–±—ä–µ–º {s_target_q} < –º–∏–Ω. ({s_min_q_instr}). –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Calculated qty {s_target_q} < min instrument qty {s_min_q_instr}. Skipping.")
                        continue
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π PnL –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π
                    print(f"[{s_sym}][{chat_id}] Pre-PNL Calc: Rate={s_rate*100:.4f}%, PosSize={s_pos_size_usdt}, TargetQty={s_target_q}, Bid={s_bid}, Ask={s_ask}, Side={s_open_side}, ActualTimeLeft={actual_seconds_left:.0f}s")
                    est_pnl, pnl_calc_details_msg = await calculate_pre_trade_pnl_estimate(
                        s_sym, s_rate, s_pos_size_usdt, s_target_q, 
                        s_bid, s_ask, s_open_side # s_bid –∏ s_ask –∏–∑ orderbook_data
                    )
                    print(f"[{s_sym}][{chat_id}] Post-PNL Calc: EstPNL={est_pnl}, Details='{pnl_calc_details_msg if est_pnl is not None else 'Error in PNL calc'}'")

                    if est_pnl is None: 
                        error_msg_pnl = pnl_calc_details_msg if pnl_calc_details_msg else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ PnL."
                        await app.bot.send_message(chat_id, f"{log_prefix_tg} –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ PnL: {error_msg_pnl}. –ü—Ä–æ–ø—É—Å–∫.")
                        print(f"[{s_sym}][{chat_id}] Skipped due to PnL calculation error: {error_msg_pnl}")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π PnL –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ—Ä–æ–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # chat_min_pnl_user –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ chat_config
                    if est_pnl < chat_min_pnl_user: 
                        await app.bot.send_message(
                            chat_id, 
                            f"{log_prefix_tg} –û–∂–∏–¥. PnL ({est_pnl:.4f}) < –ø–æ—Ä–æ–≥–∞ ({chat_min_pnl_user}). –ü—Ä–æ–ø—É—Å–∫.\n"
                            f"–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏:\n{pnl_calc_details_msg}", 
                            parse_mode='Markdown'
                        )
                        print(f"[{s_sym}][{chat_id}] Skipped due to EstPNL ({est_pnl:.4f}) < MinPNL_User ({chat_min_pnl_user})")
                        continue
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–¥–µ–ª–∫–∏
                    await app.bot.send_message(
                        chat_id, 
                        f"‚úÖ {s_sym} ({chat_id}): –ü—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥. PnL: {est_pnl:.4f} USDT. –ù–∞—á–∏–Ω–∞—é –°–î–ï–õ–ö–£.\n"
                        f"–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏:\n{pnl_calc_details_msg}", 
                        parse_mode='Markdown'
                    )
                    
                    print(f"\n>>> Processing {s_sym} for chat {chat_id} (Rate: {s_rate*100:.4f}%, Actual Left: {actual_seconds_left:.0f}s) <<<")
                    
                    # --- –ù–û–í–´–ô –ë–õ–û–ö: –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö TP/SL –≤ USDT –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ ---
                    # s_marja, s_plecho, s_rate —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–∞—Ä—ã
                    position_size_usdt_for_tpsl_calc = s_marja * s_plecho 
                    expected_funding_usdt = position_size_usdt_for_tpsl_calc * abs(s_rate) # s_rate —É–∂–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ

                    tp_ratio = chat_config.get('tp_target_profit_ratio_of_funding', Decimal('0.75'))
                    tp_target_net_profit_usdt = expected_funding_usdt * tp_ratio

                    sl_ratio_of_tp = chat_config.get('sl_max_loss_ratio_to_tp_target', Decimal('0.6'))
                    sl_max_net_loss_usdt = tp_target_net_profit_usdt * sl_ratio_of_tp

                    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è SL, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª –±–æ–ª—å—à–µ ~95% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                    if sl_max_net_loss_usdt > expected_funding_usdt * Decimal('0.95'):
                        sl_max_net_loss_usdt = expected_funding_usdt * Decimal('0.95')
                        print(f"[{s_sym}][{chat_id}] SL_max_net_loss_usdt corrected to 95% of expected funding: {sl_max_net_loss_usdt:.4f} USDT")

                    print(f"[{s_sym}][{chat_id}] Calculated for TP/SL: ExpectedFunding={expected_funding_usdt:.4f}, TP_TargetNetProfit={tp_target_net_profit_usdt:.4f}, SL_MaxNetLoss={sl_max_net_loss_usdt:.4f}")
                    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
                    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏

# --- –ù–ê–ß–ê–õ–û –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò (–≤—Ö–æ–¥, –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞, –≤—ã—Ö–æ–¥, –æ—Ç—á–µ—Ç) ---
                    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
                    trade_data = {
                        "symbol": s_sym, "open_side": s_open_side, "marja": s_marja, "plecho": s_plecho,
                        "funding_rate": s_rate, "next_funding_ts": s_ts, # s_ts - –≤—Ä–µ–º—è —ç–ø–æ—Ö–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                        "opened_qty": Decimal("0"), "closed_qty": Decimal("0"),
                        "total_open_value": Decimal("0"), "total_close_value": Decimal("0"),
                        "total_open_fee": Decimal("0"), "total_close_fee": Decimal("0"),
                        "actual_funding_fee": Decimal("0"), "target_qty": s_target_q,
                        "min_qty_instr": s_min_q_instr, "qty_step_instr": s_q_step, "tick_size_instr": s_tick_size,
                        "best_bid_at_entry": s_bid, "best_ask_at_entry": s_ask,
                        "price_decimals": len(price_f.get('tickSize', '0.1').split('.')[1]) if '.' in price_f.get('tickSize', '0.1') else 0
                    }
                    chat_config.setdefault('ongoing_trades', {})[s_sym] = trade_data # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    
                                            # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ await app.bot.send_message —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏) ...
                        
                                            # --- –ù–ê–ß–ê–õ–û –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò (–≤—Ö–æ–¥, –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞, –≤—ã—Ö–æ–¥, –æ—Ç—á–µ—Ç) ---
                    try: # try –¥–ª—è –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                        await app.bot.send_message(chat_id, f"üéØ –í—Ö–æ–∂—É –≤ —Å–¥–µ–ª–∫—É: *{s_sym}* ({'üìà LONG' if s_open_side == 'Buy' else 'üìâ SHORT'}), –§: `{s_rate*100:.4f}%`, –û—Å—Ç–∞–ª–æ—Å—å: `{actual_seconds_left:.0f}—Å`", parse_mode='Markdown')
                        
                        try: 
                            session.set_leverage(category="linear", symbol=s_sym, buyLeverage=str(s_plecho), sellLeverage=str(s_plecho))
                        except Exception as e_lev:
                            if "110043" not in str(e_lev): # 110043: Leverage not modified
                                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç. –ø–ª–µ—á–æ {s_sym}: {e_lev}")
                        
                        op_qty, op_val, op_fee = Decimal("0"), Decimal("0"), Decimal("0")
                        maker_entry_p = quantize_price(s_bid if s_open_side == "Buy" else s_ask, s_tick_size)
                        
                        limit_res = await place_limit_order_with_retry(session, app, chat_id, s_sym, s_open_side, s_target_q, maker_entry_p, max_wait_seconds=MAKER_ORDER_WAIT_SECONDS_ENTRY)
                        if limit_res and limit_res['executed_qty'] > 0: 
                            op_qty += limit_res['executed_qty']
                            op_val += limit_res['executed_qty'] * limit_res['avg_price']
                            op_fee += limit_res['fee']
                        
                        rem_q_open = quantize_qty(s_target_q - op_qty, s_q_step)
                        if rem_q_open >= s_min_q_instr: 
                            proceed_market = not (op_qty >= s_min_q_instr and (rem_q_open / s_target_q) < MIN_QTY_TO_MARKET_FILL_PCT_ENTRY)
                            if proceed_market:
                                await app.bot.send_message(chat_id, f"üõí {s_sym}: –î–æ–±–∏–≤–∞—é —Ä—ã–Ω–∫–æ–º: {rem_q_open}")
                                market_res = await place_market_order_robust(session, app, chat_id, s_sym, s_open_side, rem_q_open)
                                if market_res and market_res['executed_qty'] > 0: 
                                    op_qty += market_res['executed_qty']
                                    op_val += market_res['executed_qty'] * market_res['avg_price']
                                    op_fee += market_res['fee']
                            else: 
                                await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: Maker –∏—Å–ø–æ–ª–Ω–∏–ª {op_qty}. –û—Å—Ç–∞—Ç–æ–∫ {rem_q_open} –º–∞–ª, –Ω–µ –¥–æ–±–∏–≤–∞—é.")
                        
                        await asyncio.sleep(0.5) 
                        actual_pos = await get_current_position_info(session, s_sym)
                        final_op_q, final_avg_op_p = Decimal("0"), Decimal("0")

                        if actual_pos and actual_pos['side'] == s_open_side:
                            final_op_q, final_avg_op_p = actual_pos['size'], actual_pos['avg_price']
                            if abs(final_op_q - op_qty) > s_q_step / 2: 
                                await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: –°–∏–Ω—Ö—Ä. –æ–±—ä–µ–º–∞. –ë–æ—Ç: {op_qty}, –ë–∏—Ä–∂–∞: {final_op_q}.")
                            if op_fee == Decimal("0") and final_op_q > 0: 
                                op_fee = Decimal("-1") # –§–ª–∞–≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –±—ã–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è
                        elif op_qty > 0 and not actual_pos: 
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ë–æ—Ç –¥—É–º–∞–ª –æ—Ç–∫—Ä—ã–ª {op_qty}, –Ω–∞ –±–∏—Ä–∂–µ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°—á–∏—Ç–∞–µ–º 0.")
                            final_op_q = Decimal("0")
                        elif actual_pos and actual_pos['side'] != s_open_side and actual_pos['size'] > 0: 
                            raise ValueError(f"–ö–†–ò–¢! {s_sym}: –ù–∞ –±–∏—Ä–∂–µ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è {actual_pos['side']} {actual_pos['size']}. –†—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
                        else: 
                            final_op_q = op_qty 

                        trade_data["opened_qty"] = final_op_q
                        trade_data["total_open_value"] = final_op_q * final_avg_op_p if final_avg_op_p > 0 else op_val
                        trade_data["total_open_fee"] = op_fee

                        if final_op_q < s_min_q_instr: 
                            msg_err_qty = f"‚ùå {s_sym}: –§–∏–Ω–∞–ª. –æ—Ç–∫—Ä. –æ–±—ä–µ–º ({final_op_q}) < –º–∏–Ω. ({s_min_q_instr}). –û—Ç–º–µ–Ω–∞."
                            if final_op_q > Decimal("0"): 
                                msg_err_qty += " –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫..." # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –∑–¥–µ—Å—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å
                            raise ValueError(msg_err_qty)
                        
                        avg_op_p_disp = final_avg_op_p if final_avg_op_p > 0 else ((op_val / op_qty) if op_qty > 0 else Decimal("0"))
                        num_decimals_price = trade_data['price_decimals']
                        await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{s_sym}* ({'LONG' if s_open_side == 'Buy' else 'SHORT'}) –æ—Ç–∫—Ä./–ø–æ–¥—Ç–≤.\n–û–±—ä–µ–º: `{final_op_q}`\n–°—Ä.—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{avg_op_p_disp:.{num_decimals_price}f}`\n–ö–æ–º. –æ—Ç–∫—Ä.: `{op_fee:.4f}` USDT", parse_mode='Markdown')
                        
                        # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –£–°–¢–ê–ù–û–í–ö–ò TP/SL –ù–ê –ë–ò–†–ñ–ï ---
                        if final_op_q > Decimal("0"): # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP/SL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
                            tp_target_net_profit_usdt = trade_data.get('tp_target_net_profit_usdt', Decimal("0"))
                            sl_max_net_loss_usdt = trade_data.get('sl_max_net_loss_usdt', Decimal("0"))
                            expected_funding_usdt_on_trade_open = trade_data.get('expected_funding_usdt_on_trade_open', Decimal("0"))

                            _position_size_usdt = trade_data.get('marja', Decimal("0")) * trade_data.get('plecho', Decimal("0"))
                            expected_total_fees_usdt = _position_size_usdt * (TAKER_FEE_RATE + TAKER_FEE_RATE) 

                            price_pnl_needed_for_tp = tp_target_net_profit_usdt - expected_funding_usdt_on_trade_open + expected_total_fees_usdt
                            price_pnl_triggering_sl = -sl_max_net_loss_usdt - expected_funding_usdt_on_trade_open - expected_total_fees_usdt

                            price_change_for_tp_per_unit = price_pnl_needed_for_tp / final_op_q
                            price_change_for_sl_per_unit = price_pnl_triggering_sl / final_op_q 

                            take_profit_price_raw = Decimal("0")
                            stop_loss_price_raw = Decimal("0")

                            if s_open_side == "Buy":
                                take_profit_price_raw = final_avg_op_p + price_change_for_tp_per_unit
                                stop_loss_price_raw = final_avg_op_p + price_change_for_sl_per_unit 
                            elif s_open_side == "Sell":
                                take_profit_price_raw = final_avg_op_p - price_change_for_tp_per_unit
                                stop_loss_price_raw = final_avg_op_p - price_change_for_sl_per_unit
                            
                            s_tick_size = trade_data['tick_size_instr']
                            take_profit_price = quantize_price(take_profit_price_raw, s_tick_size)
                            stop_loss_price = quantize_price(stop_loss_price_raw, s_tick_size)

                            print(f"[{s_sym}][{chat_id}] Calculated TP price: {take_profit_price}, SL price: {stop_loss_price}")
                            await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: –†–∞—Å—á–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –±–∏—Ä–∂–∏:\nTP: `{take_profit_price}`\nSL: `{stop_loss_price}`")

                            can_place_tp = False
                            if s_open_side == "Buy" and take_profit_price > final_avg_op_p: can_place_tp = True
                            elif s_open_side == "Sell" and take_profit_price < final_avg_op_p and take_profit_price > 0: can_place_tp = True
                            
                            can_place_sl = False
                            if s_open_side == "Buy" and stop_loss_price < final_avg_op_p and stop_loss_price > 0: can_place_sl = True
                            elif s_open_side == "Sell" and stop_loss_price > final_avg_op_p: can_place_sl = True

                            if can_place_tp and can_place_sl and \
                               ((s_open_side == "Buy" and take_profit_price <= stop_loss_price) or \
                                (s_open_side == "Sell" and take_profit_price >= stop_loss_price)):
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TP/SL —Ü–µ–Ω: TP {take_profit_price}, SL {stop_loss_price}. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                                print(f"[{s_sym}][{chat_id}] Logical error in TP/SL prices. TP: {take_profit_price}, SL: {stop_loss_price}. Cancelling TP/SL setup.")
                                can_place_tp = False
                                can_place_sl = False
                            
                            if can_place_tp or can_place_sl:
                                params_trading_stop = {
                                    "category": "linear", "symbol": s_sym, "tpslMode": "Full",
                                    "tpTriggerBy": "LastPrice", "slTriggerBy": "LastPrice",
                                    "positionIdx" : 0 
                                }
                                if can_place_tp:
                                    params_trading_stop["takeProfit"] = str(take_profit_price)
                                    params_trading_stop["tpOrderType"] = "Market" 
                                if can_place_sl:
                                    params_trading_stop["stopLoss"] = str(stop_loss_price)
                                    params_trading_stop["slOrderType"] = "Market"

                                try:
                                    print(f"[{s_sym}][{chat_id}] Attempting to set trading stop: {params_trading_stop}")
                                    response_tpsl = session.set_trading_stop(**params_trading_stop)
                                    print(f"[{s_sym}][{chat_id}] Set_trading_stop response: {response_tpsl}")
                                    if response_tpsl and response_tpsl.get("retCode") == 0:
                                        await app.bot.send_message(chat_id, f"‚úÖ {s_sym}: TP/SL –æ—Ä–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ.")
                                        if can_place_tp: trade_data['tp_order_price_set_on_exchange'] = take_profit_price
                                        if can_place_sl: trade_data['sl_order_price_set_on_exchange'] = stop_loss_price
                                    else: 
                                        err_msg_tpsl = response_tpsl.get('retMsg', 'Unknown error') if response_tpsl else "No response"
                                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP/SL –Ω–∞ –±–∏—Ä–∂–µ: {err_msg_tpsl}")
                                        print(f"[{s_sym}][{chat_id}] Failed to set TP/SL on exchange: {err_msg_tpsl}")
                                except Exception as e_tpsl: 
                                    await app.bot.send_message(chat_id, f"‚ùå {s_sym}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL –Ω–∞ –±–∏—Ä–∂–µ: {e_tpsl}")
                                    print(f"[{s_sym}][{chat_id}] Exception while setting TP/SL on exchange: {e_tpsl}")
                            else: 
                                await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP/SL.")
                        else: # –≠—Ç–æ—Ç else –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ if final_op_q > Decimal("0"):
                            print(f"[{s_sym}][{chat_id}] Position quantity is zero (final_op_q = {final_op_q}). Skipping TP/SL setup.")
                        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –£–°–¢–ê–ù–û–í–ö–ò TP/SL –ù–ê –ë–ò–†–ñ–ï ---
                        
                
                        current_wait_time = time.time()
                        wait_dur = max(0, s_ts - current_wait_time) + POST_FUNDING_WAIT_SECONDS 
                        await app.bot.send_message(chat_id, f"‚è≥ {s_sym} –û–∂–∏–¥–∞—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (~{wait_dur:.0f} —Å–µ–∫)..."); await asyncio.sleep(wait_dur)

                        start_log_ts_ms, end_log_ts_ms = int((s_ts - 180)*1000), int((time.time()+5)*1000) 
                        log_resp = session.get_transaction_log(category="linear",symbol=s_sym,type="SETTLEMENT",startTime=start_log_ts_ms,endTime=end_log_ts_ms,limit=20)
                        log_list, fund_log_val = log_resp.get("result",{}).get("list",[]), Decimal("0")
                        if log_list:
                            for entry in log_list: 
                                if abs(int(entry.get("transactionTime","0"))/1000 - s_ts) < 120: 
                                    fund_log_val += Decimal(entry.get("change","0"))
                        trade_data["actual_funding_fee"] = fund_log_val
                        await app.bot.send_message(chat_id, f"üí∞ {s_sym} –§–∞–Ω–¥–∏–Ω–≥ (–∏–∑ –ª–æ–≥–∞): `{fund_log_val:.4f}` USDT", parse_mode='Markdown')
                        if fund_log_val == Decimal("0") and log_list : await app.bot.send_message(chat_id, f"‚ÑπÔ∏è {s_sym}: SETTLEMENT –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—É–º–º–∞ 0 –∏–ª–∏ –Ω–µ –≤ –æ–∫–Ω–µ.")
                        elif not log_list: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (SETTLEMENT) –ø—É—Å—Ç.")

                        q_to_close = trade_data['opened_qty']
                        if q_to_close < s_min_q_instr: raise ValueError(f"‚ö†Ô∏è {s_sym}: –û–±—ä–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è ({q_to_close}) < –º–∏–Ω. ({s_min_q_instr}). –ó–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
                        
                        close_side = "Buy" if s_open_side == "Sell" else "Sell"
                        cl_qty, cl_val, cl_fee = Decimal("0"), Decimal("0"), Decimal("0")
                        await app.bot.send_message(chat_id, f"üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ {s_sym}: {s_open_side} {q_to_close}")

                        ob_exit = await get_orderbook_snapshot_and_spread(session, s_sym) 
                        maker_close_p = Decimal("0")
                        if ob_exit: maker_close_p = quantize_price(ob_exit['best_ask'] if close_side == "Sell" else ob_exit['best_bid'], s_tick_size) 
                        
                        if maker_close_p > 0: 
                            limit_cl_res = await place_limit_order_with_retry(session,app,chat_id,s_sym,close_side,q_to_close,maker_close_p,reduce_only=True,max_wait_seconds=MAKER_ORDER_WAIT_SECONDS_EXIT)
                            if limit_cl_res and limit_cl_res['executed_qty'] > 0: 
                                cl_qty+=limit_cl_res['executed_qty']; cl_val+=limit_cl_res['executed_qty']*limit_cl_res['avg_price']; cl_fee+=limit_cl_res['fee']
                        
                        rem_q_close = quantize_qty(q_to_close - cl_qty, s_q_step)
                        if rem_q_close >= s_q_step: 
                            await app.bot.send_message(chat_id, f"üõí {s_sym}: –ó–∞–∫—Ä—ã–≤–∞—é —Ä—ã–Ω–∫–æ–º –æ—Å—Ç–∞—Ç–æ–∫: {rem_q_close}")
                            market_cl_res = await place_market_order_robust(session,app,chat_id,s_sym,close_side,rem_q_close,reduce_only=True)
                            if market_cl_res and market_cl_res['executed_qty'] > 0: 
                                cl_qty+=market_cl_res['executed_qty']; cl_val+=market_cl_res['executed_qty']*market_cl_res['avg_price']; cl_fee+=market_cl_res['fee']
                        
                        trade_data["closed_qty"], trade_data["total_close_value"], trade_data["total_close_fee"] = cl_qty, cl_val, cl_fee
                        await asyncio.sleep(1.5) 
                        final_pos_cl = await get_current_position_info(session, s_sym)
                        
                        pos_cl_size_disp = '–Ω–µ—Ç' if not final_pos_cl else final_pos_cl.get('size','–Ω–µ—Ç')
                        if final_pos_cl and final_pos_cl['size'] >= s_q_step: await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è *{s_sym}* –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ö–†–´–¢–ê! –û—Å—Ç–∞—Ç–æ–∫: `{final_pos_cl['size']}`. –ü–†–û–í–ï–†–¨–¢–ï –í–†–£–ß–ù–£–Æ!", parse_mode='Markdown')
                        elif cl_qty >= q_to_close - s_q_step: await app.bot.send_message(chat_id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{s_sym}* —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ (–±–æ—Ç: {cl_qty}, –±–∏—Ä–∂–∞: {pos_cl_size_disp}).", parse_mode='Markdown')
                        else: await app.bot.send_message(chat_id, f"‚ö†Ô∏è {s_sym}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–±–æ—Ç: {cl_qty}, –±–∏—Ä–∂–∞: {pos_cl_size_disp}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ.", parse_mode='Markdown')

                        op_v_td, op_q_td = trade_data["total_open_value"], trade_data["opened_qty"]
                        avg_op_td = (op_v_td / op_q_td) if op_q_td > 0 else Decimal("0")
                        cl_v_td, cl_q_td = trade_data["total_close_value"], trade_data["closed_qty"]
                        avg_cl_td = (cl_v_td / cl_q_td) if cl_q_td > 0 else Decimal("0")
                        
                        effective_qty_for_pnl = min(op_q_td, cl_q_td) 
                        price_pnl_val = (avg_cl_td - avg_op_td) * effective_qty_for_pnl
                        if s_open_side == "Sell": price_pnl_val = -price_pnl_val
                        
                        fund_pnl_val = trade_data["actual_funding_fee"]
                        op_f_val_td = trade_data["total_open_fee"]
                        op_f_disp_td, op_f_calc_td = "", Decimal("0")
                        if op_f_val_td == Decimal("-1"): op_f_disp_td, op_f_calc_td = "–ù–µ–∏–∑–≤.", s_pos_size_usdt * TAKER_FEE_RATE 
                        else: op_f_disp_td, op_f_calc_td = f"{-op_f_val_td:.4f}", op_f_val_td # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
                        
                        cl_f_val_td = trade_data["total_close_fee"] # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
                        total_fee_calculated = op_f_calc_td + cl_f_val_td # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–æ–±–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
                        
                        net_pnl_val = price_pnl_val + fund_pnl_val + total_fee_calculated # –ü—Ä–∏–±–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —Å –º–∏–Ω—É—Å–æ–º
                        roi_val = (net_pnl_val / s_marja) * 100 if s_marja > 0 else Decimal("0")
                        
                        price_decs = trade_data['price_decimals']
                        report = (f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: *{s_sym}* ({'LONG' if s_open_side=='Buy' else 'SHORT'})\n\n"
                                  f"–û—Ç–∫—Ä: `{op_q_td}` @ `{avg_op_td:.{price_decs}f}`\n"
                                  f"–ó–∞–∫—Ä: `{cl_q_td}` @ `{avg_cl_td:.{price_decs}f}`\n\n"
                                  f"PNL (—Ü–µ–Ω–∞): `{price_pnl_val:+.4f}` USDT\n"
                                  f"PNL (—Ñ–∞–Ω–¥–∏–Ω–≥): `{fund_pnl_val:+.4f}` USDT\n"
                                  f"–ö–æ–º.–æ—Ç–∫—Ä: `{op_f_disp_td}` USDT\n"
                                  f"–ö–æ–º.–∑–∞–∫—Ä: `{cl_f_val_td:+.4f}` USDT\n\n" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –ø–ª—é—Å–æ–º, –µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
                                  f"üí∞ *–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_pnl_val:+.4f} USDT*\n"
                                  f"üìà ROI –æ—Ç –º–∞—Ä–∂–∏ ({s_marja} USDT): `{roi_val:.2f}%`")
                        await app.bot.send_message(chat_id, report, parse_mode='Markdown')
                    
                    except ValueError as ve: 
                        print(f"\n!!! TRADE ABORTED for chat {chat_id}, symbol {s_sym} !!! Reason: {ve}")
                        await app.bot.send_message(chat_id, f"‚ùå –°–¥–µ–ª–∫–∞ –ø–æ *{s_sym}* –ø—Ä–µ—Ä–≤–∞–Ω–∞:\n`{ve}`\n\n‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢ –ò –ü–û–ó–ò–¶–ò–ò –í–†–£–ß–ù–£–Æ!*", parse_mode='Markdown')
                    except Exception as trade_e: 
                        print(f"\n!!! TRADE ERROR for chat {chat_id}, symbol {s_sym} !!! Error: {trade_e}")
                        import traceback; traceback.print_exc()
                        await app.bot.send_message(chat_id, f"‚ùå –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –ø–æ *{s_sym}*:\n`{trade_e}`\n\n‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢ –ò –ü–û–ó–ò–¶–ò–ò –í–†–£–ß–ù–£–Æ!*", parse_mode='Markdown')
                    finally:
                        if s_sym in chat_config.get('ongoing_trades', {}):
                            print(f"Cleaning up ongoing_trade for {s_sym} in chat {chat_id}")
                            del chat_config['ongoing_trades'][s_sym]
                        print(f">>> Finished processing {s_sym} for chat {chat_id} <<<")
                # –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–æ chat_id
            # –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–æ globally_candidate_pairs
        except Exception as loop_e: # –í–Ω–µ—à–Ω–∏–π except –¥–ª—è –≤—Å–µ–≥–æ while True —Ü–∏–∫–ª–∞ —Å–Ω–∞–π–ø–µ—Ä–∞
            print("\n!!! UNHANDLED ERROR IN SNIPER LOOP !!!")
            print(f"Error: {loop_e}"); import traceback; traceback.print_exc()
            await asyncio.sleep(30) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
# --- –ö–û–ù–ï–¶ –ö–û–†–†–ï–ö–¢–ù–û–ì–û –ë–õ–û–ö–ê –ö–û–î–ê –î–õ–Ø funding_sniper_loop --- 

# ===================== MAIN =====================
if __name__ == "__main__":
    print("Initializing bot...")
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel)) 
    
    application.add_handler(MessageHandler(filters.Regex("^üìä –¢–æ–ø-–ø–∞—Ä—ã$"), show_top_funding_menu))
    
    application.add_handler(MessageHandler(filters.Regex("^üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–Ω–∞–π–ø–µ—Ä–æ–º$"), sniper_control_menu))
    
    application.add_handler(CallbackQueryHandler(sniper_control_callback, pattern="^(toggle_sniper|show_top_pairs_inline|set_max_trades_|noop|set_min_fr_|set_tp_rf_|set_sl_rtp_)"))

    application.add_handler(CallbackQueryHandler(top_funding_menu_callback, pattern="^(toggle_exchange_|select_all_exchanges|deselect_all_exchanges|fetch_top_pairs_filtered|back_to_funding_menu)$"))

    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ú–∞—Ä–∂–∞$"), set_real_marja)], 
        states={SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)]}, 
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=120.0 
    )
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚öñÔ∏è –ü–ª–µ—á–æ$"), set_real_plecho)], 
        states={SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)]}, 
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=120.0
    )
    
    conv_min_turnover = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_min_turnover, pattern="^set_min_turnover_config$")],
        states={SET_MIN_TURNOVER_CONFIG: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_min_turnover)]},
        fallbacks=[CommandHandler("cancel", cancel)], 
        conversation_timeout=120.0
    )
        
    conv_min_profit = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_min_profit, pattern="^set_min_profit_config$")],
        states={SET_MIN_PROFIT_CONFIG: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_min_profit)]},
        fallbacks=[CommandHandler("cancel", cancel)], 
        conversation_timeout=120.0
    )

    application.add_handler(conv_marja)
    application.add_handler(conv_plecho)
    application.add_handler(conv_min_turnover)
    application.add_handler(conv_min_profit)

    async def post_init_tasks(app_passed: ApplicationBuilder): 
        print("Running post_init tasks...")
        asyncio.create_task(funding_sniper_loop(app_passed)) 
        print("Sniper loop task created.")
    
    application.post_init = post_init_tasks

    print("Starting bot polling...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"\nBot polling stopped due to error: {e}")
        import traceback
        traceback.print_exc() 
    finally:
        print("\nBot shutdown.")

# --- END OF FILE bot (8).py ---
