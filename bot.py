import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"], ["üì° –°–∏–≥–Ω–∞–ª—ã"], ["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"]]
latest_top_pairs = []
user_state = {}
sniper_active = {}
MARJA, PLECHO, SET_MARJA = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction} ‚è± —á–µ—Ä–µ–∑ {time_left}\n"

        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–∞—Ä–∂–∏ (–≤ USDT), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫:")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id
        if chat_id not in user_state:
            user_state[chat_id] = {}
        user_state[chat_id]['real_marja'] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return SET_MARJA

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def funding_sniper_loop(app):
    await asyncio.sleep(5)
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            for chat_id, active in sniper_active.items():
                if not active:
                    continue

                user = user_state.get(chat_id, {})
                marja = user.get("real_marja", 0)
                leverage = 5
                if marja <= 0:
                    continue

                position = marja * leverage

                for t in tickers:
                    symbol = t["symbol"]
                    rate = t.get("fundingRate")
                    next_time = t.get("nextFundingTime")

                    if not rate or not next_time:
                        continue

                    try:
                        rate = float(rate)
                        next_ts = int(next_time) / 1000
                        minutes_left = int((next_ts - now_ts) / 60)
                    except:
                        continue

                    if 0 <= minutes_left <= 1:
                        gross = position * abs(rate)
                        fees = position * 0.0006
                        spread = position * 0.0002
                        net = gross - fees - spread

                        if net > 0:
                            await app.bot.send_message(chat_id, f"üì° –°–ò–ì–ù–ê–õ\n{symbol} ‚Äî —Ñ–∞–Ω–¥–∏–Ω–≥ {rate * 100:.4f}%\n–û–∂–∏–¥–∞–µ–º–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT")
                            await asyncio.sleep(60)
                            await app.bot.send_message(chat_id, f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ {symbol}\n–°–∏–º—É–ª—è—Ü–∏—è: {net:.2f} USDT –ø—Ä–∏–±—ã–ª–∏")
        except Exception as e:
            print(f"[Sniper Error] {e}")
        await asyncio.sleep(60)

async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–∞—Ä–∂–∏ (–≤ USDT):")
    return MARJA

async def set_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        user_state[update.effective_chat.id] = {"marja": marja}
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        return PLECHO
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MARJA

async def set_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plecho = float(update.message.text)
        chat_id = update.effective_chat.id
        marja = user_state[chat_id]["marja"]
        position = marja * plecho

        if not latest_top_pairs:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üìä –¢–æ–ø 5 funding-–ø–∞—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return ConversationHandler.END

        msg = f"üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ç–æ–ø 5 –ø–∞—Ä–∞–º\n–ú–∞—Ä–∂–∞: {marja} USDT | –ü–ª–µ—á–æ: {plecho}x\n\n"
        for symbol, rate, _ in latest_top_pairs:
            gross = position * abs(rate)
            fees = position * 0.0006
            spread = position * 0.0002
            net = gross - fees - spread
            roi = (net / marja) * 100
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            warn = "‚ö†Ô∏è –ù–µ—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ" if net < 0 else ""
            msg += (
                f"{symbol} ‚Üí {direction}\n"
                f"  üìä –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"  üí∞ –ì—Ä—è–∑–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {gross:.2f} USDT\n"
                f"  üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {fees:.2f} USDT\n"
                f"  üìâ –°–ø—Ä–µ–¥: {spread:.2f} USDT\n"
                f"  ‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT\n"
                f"  üìà ROI: {roi:.2f}% {warn}\n\n"
            )
        await update.message.reply_text(msg)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–ª–µ—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return PLECHO

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="sniper_off")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì° –†–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=reply_markup)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), start_calc))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(MessageHandler(filters.Regex("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_real_marja))
    app.add_handler(CallbackQueryHandler(start))  # –ø–æ–∫–∞ —Ç—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), start_calc)],
        states={
            MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_marja)],
            PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    app.run_polling()
