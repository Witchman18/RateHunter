import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv
from datetime import datetime
import math

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

# –®–∞–≥–∏ –¥–ª—è ConversationHandler
MARJA, PLECHO = range(2)

user_inputs = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìä –¢–æ–ø 5 funding-–ø–∞—Ä":
        await top_funding(update, context)
    elif text == "üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–∞—Ä–∂–∏ (–≤ USDT):")
        return MARJA

async def ask_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_inputs[update.effective_chat.id] = {"margin": float(update.message.text)}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        return PLECHO
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞—Ä–∂–∏.")
        return MARJA

async def calculate_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user_inputs[chat_id]["leverage"] = float(update.message.text)

        margin = user_inputs[chat_id]["margin"]
        leverage = user_inputs[chat_id]["leverage"]
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]

        funding_data = []
        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        top_5 = funding_data[:5]

        msg = f"üßÆ –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ (–Ω–∞ {margin} USDT, {leverage}x –ø–ª–µ—á–æ):\n\n"

        for symbol, rate in top_5:
            gross = (rate * leverage * margin)
            commission = margin * leverage * 0.0003 * 2  # –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
            spread = margin * 0.001
            net = gross - commission - spread
            roi = (net / margin) * 100

            msg += (
                f"{symbol}:\n"
                f"üìâ –ì—Ä—è–∑–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {gross:.2f} USDT\n"
                f"üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {commission:.2f} USDT\n"
                f"üìâ –°–ø—Ä–µ–¥: {spread:.2f} USDT\n"
                f"‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT\n"
                f"üìä ROI: {roi:.2f}%\n\n"
            )

        await update.message.reply_text(msg)
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–∏–±—ã–ª–∏: {e}")
        return ConversationHandler.END

async def top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = session.get_tickers(category="linear")
    tickers = response["result"]["list"]

    funding_data = []
    for t in tickers:
        symbol = t["symbol"]
        rate = t.get("fundingRate")
        try:
            rate = float(rate)
            funding_data.append((symbol, rate))
        except:
            continue

    funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
    top_5 = funding_data[:5]

    msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n"
    for symbol, rate in top_5:
        direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
        msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction}\n"

    await update.message.reply_text(msg)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), message_handler)],
        states={
            MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_leverage)],
            PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_profit)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), message_handler))
    app.add_handler(conv_handler)

    app.run_polling()
