import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"], ["üì° –°–∏–≥–Ω–∞–ª—ã"], ["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É"]]
latest_top_pairs = []
sniper_active = {}

# ===================== –§–£–ù–ö–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í =====================

async def funding_sniper_loop(app):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"""
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            for chat_id, active in sniper_active.items():
                if not active:
                    continue

                user_marja = sniper_active[chat_id].get('real_marja', 0)
                if user_marja <= 0:
                    continue

                leverage = 5
                position = user_marja * leverage

                for t in tickers:
                    symbol = t["symbol"]
                    rate = t.get("fundingRate")
                    next_time = t.get("nextFundingTime")

                    if not rate or not next_time:
                        continue

                    try:
                        rate = float(rate)
                        next_ts = int(next_time) / 1000
                        minutes_left = int((next_ts - now_ts) / 60)
                    except:
                        continue

                    if 0 <= minutes_left <= 1:
                        gross = position * abs(rate)
                        fees = position * 0.0006
                        spread = position * 0.0002
                        net = gross - fees - spread

                        if net > 0:
                            await app.bot.send_message(
                                chat_id,
                                f"üì° –°–ò–ì–ù–ê–õ\n{symbol} ‚Äî —Ñ–∞–Ω–¥–∏–Ω–≥ {rate*100:.4f}%\n"
                                f"–ü—Ä–∏–±—ã–ª—å: {net:.2f} USDT"
                            )
                            await asyncio.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ sniper_loop: {e}")
            await asyncio.sleep(10)
        await asyncio.sleep(30)

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
    buttons = [
        [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="sniper_off")]
    ]
    await update.message.reply_text(
        "üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "sniper_on":
        sniper_active[chat_id] = {'active': True}
        await query.edit_message_text("üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        sniper_active[chat_id] = {'active': False}
        await query.edit_message_text("üî¥ –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")

# ===================== –ó–ê–ü–£–°–ö =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
