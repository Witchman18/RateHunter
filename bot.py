# --- START OF FILE bot (7).py ---

import os
import asyncio
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å timestamp
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ pybit –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏: pip install -U pybit
# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π from pybit.exceptions import InvalidRequestError –∏ —Ç.–¥. –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API

from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET, recv_window=20000) # –£–≤–µ–ª–∏—á–∏–º –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
# === –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏ ===
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_MARJA = 0
SET_PLECHO = 1

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
ENTRY_WINDOW_START_SECONDS = 25 # –ó–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –î–û —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –≤–æ–π—Ç–∏
ENTRY_WINDOW_END_SECONDS = 10  # –ó–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –î–û —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
POST_FUNDING_WAIT_SECONDS = 15 # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º –ü–û–°–õ–ï –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
MAKER_ORDER_WAIT_SECONDS_ENTRY = 2 # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è PostOnly –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –í–•–û–î
MAKER_ORDER_WAIT_SECONDS_EXIT = 5  # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è PostOnly –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –í–´–•–û–î
SNIPER_LOOP_INTERVAL_SECONDS = 5 # –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    message = update.message or update.callback_query.message # –î–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ callback
    try:
        await message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–∞—Ä...")
        response = session.get_tickers(category="linear")
        tickers = response.get("result", {}).get("list", [])
        if not tickers:
             await message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤.")
             return

        funding_data = []
        for t in tickers:
            symbol = t.get("symbol")
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            volume = t.get("volume24h")
            turnover = t.get("turnover24h") # –û–±–æ—Ä–æ—Ç –≤ USDT

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å –æ–∫–æ–ª–æ–Ω—É–ª–µ–≤—ã–º —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º/–æ–±–æ—Ä–æ—Ç–æ–º
            if not all([symbol, rate, next_time, volume, turnover]):
                 continue
            try:
                 rate_f = float(rate)
                 next_time_int = int(next_time)
                 turnover_f = float(turnover)
                 # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±–æ—Ä–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, > 1 –º–ª–Ω USDT)
                 if turnover_f < 1_000_000:
                     continue
                 # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –º–æ–¥—É–ª—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, > 0.01%)
                 if abs(rate_f) < 0.0001:
                     continue

                 funding_data.append((symbol, rate_f, next_time_int))
            except (ValueError, TypeError):
                print(f"[Funding Data Error] Could not parse data for {symbol}")
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5] # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        if not latest_top_pairs:
            await message.edit_text("üìä –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä —Å –≤—ã—Å–æ–∫–∏–º —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é.")
            return

        msg = "üìä –¢–æ–ø –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            try:
                delta_sec = int(ts / 1000 - now_ts)
                if delta_sec < 0: delta_sec = 0 # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
                h, rem = divmod(delta_sec, 3600)
                m, s = divmod(rem, 60)
                time_left = f"{h:01d}—á {m:02d}–º {s:02d}—Å"
                direction = "üìà LONG" if rate < 0 else "üìâ SHORT" # –ï—Å–ª–∏ —Ñ–∞–Ω–¥–∏–Ω–≥ –æ—Ç—Ä–∏—Ü., –ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∞–º (–≤—ã–≥–æ–¥–Ω–æ —à–æ—Ä—Ç–∏—Ç—å) -> Corrected logic: –æ—Ç—Ä–∏—Ü = —à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∞–º => –≤—ã–≥–æ–¥–Ω–æ –õ–û–ù–ì
                # direction = "üìà LONG" if rate < 0 else "üìâ SHORT" # Old logic, needs correction if funding is negative means shorts pay longs
                direction = "üìà LONG (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç)" if rate < 0 else "üìâ SHORT (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç)"


                msg += (
                    f"üéüÔ∏è *{symbol}*\n"
                    f"{direction}\n"
                    f"üíπ –§–∞–Ω–¥–∏–Ω–≥: `{rate * 100:.4f}%`\n"
                    f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: `{time_left}`\n\n"
                )
            except Exception as e:
                 print(f"Error formatting pair {symbol}: {e}")
                 msg += f"üéüÔ∏è *{symbol}* - _–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è_\n\n"


        await message.edit_text(msg.strip(), parse_mode='Markdown')
    except Exception as e:
        print(f"Error in show_top_funding: {e}")
        import traceback
        traceback.print_exc()
        try:
             await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        except: # If edit fails, send new message
             await context.bot.send_message(message.chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ –¥–ª—è –û–î–ù–û–ô —Å–¥–µ–ª–∫–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        marja_str = update.message.text.strip().replace(",", ".")
        marja = Decimal(marja_str)
        if marja <= 0:
             await update.message.reply_text("‚ùå –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
             return ConversationHandler.END # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º? –õ—É—á—à–µ –æ—Ç–º–µ–Ω–∏—Ç—å.
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
    except Exception: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Decimal
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∂–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 55.5).")
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ ConversationHandler, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        return SET_MARJA # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ü–õ–ï–ß–ê =====================

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 10):")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        plecho_str = update.message.text.strip().replace(",", ".")
        plecho = Decimal(plecho_str) # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal
        # Bybit –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–ª–æ–µ –ø–ª–µ—á–æ –∏–ª–∏ —Å .5, –Ω–æ —Ç—É—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API
        # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø–ª–µ—á–∞
        if not (0 < plecho <= 100): # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–ª–µ—á–æ –æ—Ç >0 –¥–æ 100
             await update.message.reply_text("‚ùå –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (–æ–±—ã—á–Ω–æ –¥–æ 100).")
             return ConversationHandler.END
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x")
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–µ—á–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")
        return SET_PLECHO # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    return ConversationHandler.END

# ===================== –ú–ï–ù–Æ –°–ò–ì–ù–ê–õ–û–í =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    is_active = sniper_active.get(chat_id, {}).get('active', False)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    buttons = [
        [InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å: {status_text}", callback_data="toggle_sniper")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")]
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∂–∏/–ø–ª–µ—á–∞
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä–æ–º:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data == "toggle_sniper":
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {'active': False} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç

        current_status = sniper_active[chat_id].get('active', False)
        new_status = not current_status
        sniper_active[chat_id]['active'] = new_status

        status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if new_status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        action_text = "üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!" if new_status else "üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

        buttons = [
            [InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å: {status_text}", callback_data="toggle_sniper")],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–∞—Ä", callback_data="show_top_pairs_inline")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(f"{action_text}\nüì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä–æ–º:", reply_markup=reply_markup)

    elif data == "show_top_pairs_inline":
        await show_top_funding(update, context) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

def get_position_direction(rate: float) -> str:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'Buy' –¥–ª—è –ª–æ–Ω–≥–∞ (–µ—Å–ª–∏ rate < 0), 'Sell' –¥–ª—è —à–æ—Ä—Ç–∞ (–µ—Å–ª–∏ rate > 0)
    # –≠—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –û–†–î–ï–†–ê –ù–ê –û–¢–ö–†–´–¢–ò–ï –ø–æ–∑–∏—Ü–∏–∏
    if rate is None: return "NONE"
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: rate < 0 => —à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∞–º => –≤—ã–≥–æ–¥–Ω–æ –û–¢–ö–†–´–í–ê–¢–¨ –õ–û–ù–ì ('Buy')
    if rate < 0: return "Buy"
    # rate > 0 => –ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∞–º => –≤—ã–≥–æ–¥–Ω–æ –û–¢–ö–†–´–í–ê–¢–¨ –®–û–†–¢ ('Sell')
    elif rate > 0: return "Sell"
    else: return "NONE"

def quantize_qty(raw_qty: Decimal, qty_step: Decimal) -> Decimal:
    """ –û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª-–≤–æ –í–ù–ò–ó –¥–æ —à–∞–≥–∞ qty_step """
    if qty_step <= 0: return raw_qty # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    return (raw_qty // qty_step) * qty_step

def quantize_price(raw_price: Decimal, tick_size: Decimal) -> Decimal:
    """ –û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º tick_size (–æ–±—ã—á–Ω–æ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É) """
    if tick_size <= 0: return raw_price
    # –û–∫—Ä—É–≥–ª—è–µ–º –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —à–∞–≥—É —Ç–∏–∫–∞
    return round(raw_price / tick_size) * tick_size

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================

async def funding_sniper_loop(app: ApplicationBuilder):
    print(" Sniper loop started ".center(50, "="))
    while True:
        await asyncio.sleep(SNIPER_LOOP_INTERVAL_SECONDS) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        try:
            now_ts = time.time() # –ò—Å–ø–æ–ª—å–∑—É–µ–º time.time() –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            now_dt = datetime.utcnow()
            print(f"\n--- {now_dt.strftime('%Y-%m-%d %H:%M:%S UTC')} Checking ---")

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ç–∏–∫–µ—Ä—ã (–Ω–µ –∏–∑ –∫—ç—à–∞)
            response = session.get_tickers(category="linear")
            tickers = response.get("result", {}).get("list", [])
            if not tickers:
                print("No tickers received.")
                continue

            funding_data = []
            for t in tickers:
                symbol = t.get("symbol")
                rate = t.get("fundingRate")
                next_time_str = t.get("nextFundingTime") # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (ms)
                turnover = t.get("turnover24h")

                if not all([symbol, rate, next_time_str, turnover]): continue
                try:
                    rate_f = float(rate)
                    next_ts = int(next_time_str) / 1000 # –í—Ä–µ–º—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    turnover_f = float(turnover)

                    # –§–∏–ª—å—Ç—Ä—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                    if turnover_f < 1_000_000 or abs(rate_f) < 0.0001: continue

                    funding_data.append({"symbol": symbol, "rate": rate_f, "next_ts": next_ts})
                except (ValueError, TypeError):
                    continue

            if not funding_data:
                print("No suitable pairs found after filtering.")
                continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–æ–¥—É–ª—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
            funding_data.sort(key=lambda x: abs(x["rate"]), reverse=True)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ø-1 –ø–∞—Ä—É
            top_pair = funding_data[0]
            top_symbol = top_pair["symbol"]
            rate = top_pair["rate"]
            next_funding_ts = top_pair["next_ts"]

            seconds_left = next_funding_ts - now_ts
            print(f"Top pair: {top_symbol}, Rate: {rate*100:.4f}%, Funding in: {seconds_left:.0f}s")

            # === –ü–†–û–í–ï–†–ö–ê –û–ö–ù–ê –í–•–û–î–ê ===
            if ENTRY_WINDOW_END_SECONDS <= seconds_left <= ENTRY_WINDOW_START_SECONDS:
                print(f"Entering trade window for {top_symbol} ({seconds_left:.0f}s left)")
                open_side = get_position_direction(rate) # 'Buy' or 'Sell'
                if open_side == "NONE":
                    print("Funding rate is zero, skipping.")
                    continue

                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for chat_id, data in list(sniper_active.items()): # –ò—Å–ø–æ–ª—å–∑—É–µ–º list() –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if not data.get('active'):
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ö–æ–¥–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ –≤ —ç—Ç—É —Å–µ—Å—Å–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
                    if (data.get("last_entry_symbol") == top_symbol and
                            data.get("last_entry_ts") == next_funding_ts):
                        print(f"Already entered {top_symbol} for chat {chat_id} this funding period.")
                        continue

                    marja = data.get('real_marja') # Decimal
                    plecho = data.get('real_plecho') # Decimal
                    if not marja or not plecho:
                        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {top_symbol}: –ú–∞—Ä–∂–∞ –∏–ª–∏ –ø–ª–µ—á–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
                        continue

                    print(f"\n>>> Processing {top_symbol} for chat {chat_id} <<<")
                    await app.bot.send_message(
                        chat_id,
                        f"üéØ –í—Ö–æ–∂—É –≤ –æ–∫–Ω–æ —Å–¥–µ–ª–∫–∏: *{top_symbol}*\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'üìà LONG' if open_side == 'Buy' else 'üìâ SHORT'}\n"
                        f"–§–∞–Ω–¥–∏–Ω–≥: `{rate * 100:.4f}%`\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: `{seconds_left:.0f} —Å–µ–∫`"
                        , parse_mode='Markdown'
                    )

                    # ==================== –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –°–î–ï–õ–ö–ò ====================
                    trade_success = False
                    position_data = { # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–µ
                        "symbol": top_symbol,
                        "open_side": open_side,
                        "marja": marja,
                        "plecho": plecho,
                        "funding_rate": Decimal(str(rate)), # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ –∫–∞–∫ Decimal
                        "next_funding_ts": next_funding_ts,
                        "opened_qty": Decimal("0"),
                        "closed_qty": Decimal("0"),
                        "total_open_value": Decimal("0"),
                        "total_close_value": Decimal("0"),
                        "total_open_fee": Decimal("0"),
                        "total_close_fee": Decimal("0"),
                        "actual_funding_fee": None, # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                    }

                    try:
                        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (—à–∞–≥–∏, –º–∏–Ω. –∫–æ–ª-–≤–æ)
                        print(f"Getting instrument info for {top_symbol}...")
                        info = session.get_instruments_info(category="linear", symbol=top_symbol)
                        instrument_info = info.get("result", {}).get("list", [])[0]
                        lot_filter = instrument_info["lotSizeFilter"]
                        price_filter = instrument_info["priceFilter"]
                        min_qty = Decimal(lot_filter["minOrderQty"])
                        qty_step = Decimal(lot_filter["qtyStep"])
                        tick_size = Decimal(price_filter["tickSize"])
                        print(f"Min Qty: {min_qty}, Qty Step: {qty_step}, Tick Size: {tick_size}")

                        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–∞
                        print(f"Getting ticker info for {top_symbol}...")
                        ticker_info = session.get_tickers(category="linear", symbol=top_symbol)
                        last_price = Decimal(ticker_info["result"]["list"][0]["lastPrice"])
                        print(f"Last Price: {last_price}")

                        # 3. –†–∞—Å—á–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª-–≤–∞ (qty)
                        position_size_usdt = marja * plecho # Decimal
                        if last_price <= 0: raise ValueError("Invalid last price")
                        raw_qty = position_size_usdt / last_price
                        adjusted_qty = quantize_qty(raw_qty, qty_step)
                        print(f"Calculated Qty: {raw_qty:.8f}, Adjusted Qty: {adjusted_qty}")

                        if adjusted_qty < min_qty:
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω—ã–π –æ–±—ä–µ–º {adjusted_qty} {top_symbol} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}). –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                            continue # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                        position_data["target_qty"] = adjusted_qty # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª-–≤–æ

                        # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ (–ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º)
                        print(f"Setting leverage {plecho}x for {top_symbol}...")
                        try:
                            session.set_leverage(
                                category="linear", symbol=top_symbol,
                                buyLeverage=str(plecho), sellLeverage=str(plecho)
                            )
                            print("Leverage set successfully.")
                        except Exception as e:
                            # 110043: Leverage not modified - –û–ö
                            if "110043" in str(e):
                                print(f"Leverage already set to {plecho}x.")
                            else:
                                raise ValueError(f"Failed to set leverage: {e}") # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É

                        # ==================== –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò (Maker -> Market) ====================
                        print("\n--- Attempting to Open Position ---")
                        open_qty_remaining = adjusted_qty

                        # 5. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Limit PostOnly
                        try:
                            orderbook = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
                            best_bid = Decimal(orderbook['result']['b'][0][0])
                            best_ask = Decimal(orderbook['result']['a'][0][0])
                            # –°—Ç–∞–≤–∏–º —Ü–µ–Ω—É –¢–û–ß–ù–û –Ω–∞ –ª—É—á—à–∏–π –±–∏–¥/–∞—Å–∫ –¥–ª—è PostOnly
                            maker_price = best_bid if open_side == "Buy" else best_ask
                            maker_price_adj = quantize_price(maker_price, tick_size)
                            print(f"Attempting Maker Open ({open_side}) at {maker_price_adj}...")

                            maker_order_resp = session.place_order(
                                category="linear", symbol=top_symbol, side=open_side,
                                order_type="Limit", qty=str(open_qty_remaining),
                                price=str(maker_price_adj), time_in_force="PostOnly"
                            )
                            maker_order_id = maker_order_resp.get("result", {}).get("orderId")
                            if not maker_order_id: raise ValueError("Failed to place maker order (no ID).")
                            print(f"Maker Open Order ID: {maker_order_id}")
                            await app.bot.send_message(chat_id, f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ Maker @{maker_price_adj} (ID: ...{maker_order_id[-6:]})")

                            await asyncio.sleep(MAKER_ORDER_WAIT_SECONDS_ENTRY)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ Maker –æ—Ä–¥–µ—Ä–∞
                            order_info = session.get_order_history(category="linear", orderId=maker_order_id, limit=1)
                            order_data = order_info.get("result", {}).get("list", [])
                            if order_data:
                                order_data = order_data[0]
                                cum_exec_qty = Decimal(order_data.get("cumExecQty", "0"))
                                cum_exec_value = Decimal(order_data.get("cumExecValue", "0"))
                                cum_exec_fee = Decimal(order_data.get("cumExecFee", "0"))
                                status = order_data.get("orderStatus")
                                print(f"Maker Order Status: {status}, Filled Qty: {cum_exec_qty}")

                                if cum_exec_qty > 0:
                                    position_data["opened_qty"] += cum_exec_qty
                                    position_data["total_open_value"] += cum_exec_value
                                    position_data["total_open_fee"] += cum_exec_fee
                                    open_qty_remaining -= cum_exec_qty
                                    await app.bot.send_message(chat_id, f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ Maker: {cum_exec_qty} {top_symbol}")


                                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ
                                if status not in ["Filled", "Cancelled", "Rejected"]:
                                    try:
                                        print(f"Cancelling Maker Open Order {maker_order_id}...")
                                        session.cancel_order(category="linear", symbol=top_symbol, orderId=maker_order_id)
                                        print("Maker order cancelled.")
                                    except Exception as cancel_e:
                                         # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω
                                         if "Order does not exist" not in str(cancel_e) and "already been filled" not in str(cancel_e):
                                            print(f"Minor error cancelling maker order: {cancel_e}")
                            else:
                                print(f"Could not get history for Maker Order {maker_order_id}")


                        except Exception as e:
                            print(f"Maker Open attempt failed: {e}")
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ Maker: {e}")

                        # 6. –î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Market IOC
                        open_qty_remaining = quantize_qty(open_qty_remaining, qty_step) # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                        if open_qty_remaining >= min_qty:
                            print(f"Attempting Market Open ({open_side}) for remaining {open_qty_remaining}...")
                            await app.bot.send_message(chat_id, f"üõí –î–æ–±–∏–≤–∞—é –º–∞—Ä–∫–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–æ–∫: {open_qty_remaining} {top_symbol}")
                            try:
                                market_order_resp = session.place_order(
                                    category="linear", symbol=top_symbol, side=open_side,
                                    order_type="Market", qty=str(open_qty_remaining),
                                    time_in_force="ImmediateOrCancel" # IOC - –∏—Å–ø–æ–ª–Ω–∏—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–º–µ–Ω–∏—Ç—å
                                )
                                market_order_id = market_order_resp.get("result", {}).get("orderId")
                                if not market_order_id: raise ValueError("Failed to place market order (no ID).")
                                print(f"Market Open Order ID: {market_order_id}")

                                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ Market –æ—Ä–¥–µ—Ä–∞
                                await asyncio.sleep(1) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                                order_info = session.get_order_history(category="linear", orderId=market_order_id, limit=1)
                                order_data = order_info.get("result", {}).get("list", [])
                                if order_data:
                                    order_data = order_data[0]
                                    cum_exec_qty = Decimal(order_data.get("cumExecQty", "0"))
                                    cum_exec_value = Decimal(order_data.get("cumExecValue", "0"))
                                    cum_exec_fee = Decimal(order_data.get("cumExecFee", "0"))
                                    status = order_data.get("orderStatus")
                                    print(f"Market Order Status: {status}, Filled Qty: {cum_exec_qty}")

                                    if cum_exec_qty > 0:
                                        position_data["opened_qty"] += cum_exec_qty
                                        position_data["total_open_value"] += cum_exec_value
                                        position_data["total_open_fee"] += cum_exec_fee
                                        await app.bot.send_message(chat_id, f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –ú–∞—Ä–∫–µ—Ç: {cum_exec_qty} {top_symbol}")
                                    else:
                                         await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä ({market_order_id}) –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª –Ω–∏—á–µ–≥–æ.")

                                else:
                                    print(f"Could not get history for Market Order {market_order_id}")

                            except Exception as e:
                                print(f"Market Open attempt failed: {e}")
                                await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∏–≤–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–æ–º: {e}")
                        elif open_qty_remaining > 0:
                             print(f"Remaining open qty {open_qty_remaining} is less than min qty {min_qty}. Skipping market order.")


                        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–ª-–≤–∞
                        final_opened_qty = position_data["opened_qty"]
                        if final_opened_qty < min_qty:
                            await app.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º ({min_qty}) –¥–ª—è {top_symbol}. –ò—Ç–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ: {final_opened_qty}. –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏.")
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—Å–µ –∂–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º
                            continue # –ö —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                        await app.bot.send_message(
                            chat_id,
                            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* ({'LONG' if open_side == 'Buy' else 'SHORT'}) –æ—Ç–∫—Ä—ã—Ç–∞.\n"
                            f"–û–±—ä–µ–º: `{final_opened_qty}`\n"
                            f"–°—Ä–µ–¥—Å—Ç–≤. —Ü–µ–Ω–∞ (–ø—Ä–∏–±–ª.): `{position_data['total_open_value'] / final_opened_qty if final_opened_qty else 0:.4f}`\n"
                            f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç–∫—Ä.: `{position_data['total_open_fee']:.4f}` USDT",
                            parse_mode='Markdown'
                        )
                        print(f"Position Opened. Total Qty: {final_opened_qty}")

                        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–æ—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É –≤ —ç—Ç—É —Å–µ—Å—Å–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                        sniper_active[chat_id]["last_entry_symbol"] = top_symbol
                        sniper_active[chat_id]["last_entry_ts"] = next_funding_ts

                        # ==================== –û–ñ–ò–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –§–ê–ù–î–ò–ù–ì–ê ====================
                        print("\n--- Waiting for Funding Payment ---")
                        now_ts_before_wait = time.time()
                        delay_needed = next_funding_ts - now_ts_before_wait
                        wait_duration = max(0, delay_needed) + POST_FUNDING_WAIT_SECONDS
                        print(f"Funding at {datetime.fromtimestamp(next_funding_ts)} UTC. Waiting for {wait_duration:.1f} seconds...")
                        await app.bot.send_message(chat_id, f"‚è≥ –û–∂–∏–¥–∞—é –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (~{wait_duration:.0f} —Å–µ–∫)...")
                        await asyncio.sleep(wait_duration)

                        # === –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –§–ê–ù–î–ò–ù–ì–ê ===
                        print("Checking actual funding payment...")
                        try:
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ –ü–û–°–õ–ï –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                            funding_check_start_time = int(next_funding_ts * 1000) # –º—Å
                            # –ë–µ—Ä–µ–º –æ–∫–Ω–æ –≤ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                            funding_check_end_time = int((next_funding_ts + 60) * 1000) # –º—Å

                            funding_history = session.get_funding_history(
                                category="linear",
                                symbol=top_symbol,
                                startTime=funding_check_start_time,
                                endTime=funding_check_end_time,
                                limit=1 # –ù—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                            )
                            funding_list = funding_history.get("result", {}).get("list", [])
                            if funding_list:
                                last_funding = funding_list[0]
                                funding_fee = Decimal(last_funding.get("fundingFee", "0"))
                                funding_time_ms = int(last_funding.get("execTime", "0"))
                                # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –±–ª–∏–∑–∫–æ –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É
                                if abs(funding_time_ms / 1000 - next_funding_ts) < 60: # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
                                    position_data["actual_funding_fee"] = funding_fee
                                    print(f"Actual Funding Fee recorded: {funding_fee}")
                                    await app.bot.send_message(chat_id, f"üí∞ –§–∞–Ω–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω: `{funding_fee:.4f}` USDT")
                                else:
                                     print(f"Funding record found, but timestamp mismatch: expected ~{next_funding_ts*1000}, got {funding_time_ms}")
                                     await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ñ–∞–Ω–¥–∏–Ω–≥, –Ω–æ –≤—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–∞ –≤—ã–ø–ª–∞—Ç–∞.")
                            else:
                                print("No funding fee record found in the expected timeframe.")
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è {top_symbol}.")
                                position_data["actual_funding_fee"] = Decimal("0") # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏

                        except Exception as e:
                            print(f"Error checking funding history: {e}")
                            await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {e}")
                            position_data["actual_funding_fee"] = Decimal("0") # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏

                        # ==================== –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò (Maker -> Market) ====================
                        print("\n--- Attempting to Close Position ---")
                        close_side = "Buy" if open_side == "Sell" else "Sell"
                        close_qty_remaining = final_opened_qty # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—ä–µ–º–∞

                        # 8. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Limit PostOnly ReduceOnly
                        try:
                            orderbook = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
                            best_bid = Decimal(orderbook['result']['b'][0][0])
                            best_ask = Decimal(orderbook['result']['a'][0][0])
                            # –°—Ç–∞–≤–∏–º —Ü–µ–Ω—É –¢–û–ß–ù–û –Ω–∞ –ª—É—á—à–∏–π –±–∏–¥/–∞—Å–∫ –¥–ª—è PostOnly
                            maker_price = best_bid if close_side == "Buy" else best_ask
                            maker_price_adj = quantize_price(maker_price, tick_size)
                            print(f"Attempting Maker Close ({close_side}) at {maker_price_adj}...")

                            maker_close_resp = session.place_order(
                                category="linear", symbol=top_symbol, side=close_side,
                                order_type="Limit", qty=str(close_qty_remaining),
                                price=str(maker_price_adj), time_in_force="PostOnly",
                                reduce_only=True # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                            )
                            maker_close_id = maker_close_resp.get("result", {}).get("orderId")
                            if not maker_close_id: raise ValueError("Failed to place maker close order (no ID).")
                            print(f"Maker Close Order ID: {maker_close_id}")
                            await app.bot.send_message(chat_id, f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ Maker @{maker_price_adj} (ID: ...{maker_close_id[-6:]})")

                            await asyncio.sleep(MAKER_ORDER_WAIT_SECONDS_EXIT)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ Maker –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                            order_info = session.get_order_history(category="linear", orderId=maker_close_id, limit=1)
                            order_data = order_info.get("result", {}).get("list", [])
                            if order_data:
                                order_data = order_data[0]
                                cum_exec_qty = Decimal(order_data.get("cumExecQty", "0"))
                                cum_exec_value = Decimal(order_data.get("cumExecValue", "0"))
                                cum_exec_fee = Decimal(order_data.get("cumExecFee", "0"))
                                status = order_data.get("orderStatus")
                                print(f"Maker Close Order Status: {status}, Filled Qty: {cum_exec_qty}")

                                if cum_exec_qty > 0:
                                    position_data["closed_qty"] += cum_exec_qty
                                    position_data["total_close_value"] += cum_exec_value
                                    position_data["total_close_fee"] += cum_exec_fee
                                    close_qty_remaining -= cum_exec_qty
                                    await app.bot.send_message(chat_id, f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ Maker (–∑–∞–∫—Ä—ã—Ç–∏–µ): {cum_exec_qty} {top_symbol}")


                                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ
                                if status not in ["Filled", "Cancelled", "Rejected", "Deactivated"]: # Deactivated —Ç–æ–∂–µ –±—ã–≤–∞–µ—Ç —É reduceOnly
                                    try:
                                        print(f"Cancelling Maker Close Order {maker_close_id}...")
                                        session.cancel_order(category="linear", symbol=top_symbol, orderId=maker_close_id)
                                        print("Maker close order cancelled.")
                                    except Exception as cancel_e:
                                         if "Order does not exist" not in str(cancel_e) and "already been filled" not in str(cancel_e):
                                            print(f"Minor error cancelling maker close order: {cancel_e}")
                            else:
                                print(f"Could not get history for Maker Close Order {maker_close_id}")

                        except Exception as e:
                            print(f"Maker Close attempt failed: {e}")
                            await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ Maker: {e}")

                        # 9. –î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ Market IOC ReduceOnly
                        close_qty_remaining = quantize_qty(close_qty_remaining, qty_step) # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                        if close_qty_remaining >= min_qty:
                            print(f"Attempting Market Close ({close_side}) for remaining {close_qty_remaining}...")
                            await app.bot.send_message(chat_id, f"üõí –ó–∞–∫—Ä—ã–≤–∞—é –º–∞—Ä–∫–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–æ–∫: {close_qty_remaining} {top_symbol}")
                            try:
                                market_close_resp = session.place_order(
                                    category="linear", symbol=top_symbol, side=close_side,
                                    order_type="Market", qty=str(close_qty_remaining),
                                    time_in_force="ImmediateOrCancel",
                                    reduce_only=True
                                )
                                market_close_id = market_close_resp.get("result", {}).get("orderId")
                                if not market_close_id: raise ValueError("Failed to place market close order (no ID).")
                                print(f"Market Close Order ID: {market_close_id}")

                                await asyncio.sleep(1)
                                order_info = session.get_order_history(category="linear", orderId=market_close_id, limit=1)
                                order_data = order_info.get("result", {}).get("list", [])
                                if order_data:
                                    order_data = order_data[0]
                                    cum_exec_qty = Decimal(order_data.get("cumExecQty", "0"))
                                    cum_exec_value = Decimal(order_data.get("cumExecValue", "0"))
                                    cum_exec_fee = Decimal(order_data.get("cumExecFee", "0"))
                                    status = order_data.get("orderStatus")
                                    print(f"Market Close Order Status: {status}, Filled Qty: {cum_exec_qty}")

                                    if cum_exec_qty > 0:
                                        position_data["closed_qty"] += cum_exec_qty
                                        position_data["total_close_value"] += cum_exec_value
                                        position_data["total_close_fee"] += cum_exec_fee
                                        await app.bot.send_message(chat_id, f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –ú–∞—Ä–∫–µ—Ç (–∑–∞–∫—Ä—ã—Ç–∏–µ): {cum_exec_qty} {top_symbol}")
                                    else:
                                         await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è ({market_close_id}) –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª –Ω–∏—á–µ–≥–æ.")
                                else:
                                    print(f"Could not get history for Market Close Order {market_close_id}")

                            except Exception as e:
                                print(f"Market Close attempt failed: {e}")
                                await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–µ—Ç-–∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
                        elif close_qty_remaining > 0:
                             print(f"Remaining close qty {close_qty_remaining} is less than min qty {min_qty}. Assuming closed.")
                             # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞–∫—Ä—ã–ª—Å—è (–∏–ª–∏ –Ω–µ –≤–∞–∂–µ–Ω)

                        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–ª-–≤–∞
                        final_closed_qty = position_data["closed_qty"]
                        print(f"Position Closed. Total Qty: {final_closed_qty}")
                        if abs(final_closed_qty - final_opened_qty) > min_qty * Decimal("0.1"): # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 10% –æ—Ç –º–∏–Ω. –ª–æ—Ç–∞
                             await app.bot.send_message(
                                 chat_id,
                                 f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* –∑–∞–∫—Ä—ã—Ç–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n"
                                 f"–û—Ç–∫—Ä—ã—Ç–æ: `{final_opened_qty}`, –ó–∞–∫—Ä—ã—Ç–æ: `{final_closed_qty}`.\n"
                                 f"‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é!"
                                 , parse_mode='Markdown'
                            )
                        else:
                             await app.bot.send_message(
                                 chat_id,
                                 f"‚úÖ –ü–æ–∑–∏—Ü–∏—è *{top_symbol}* –∑–∞–∫—Ä—ã—Ç–∞ ({final_closed_qty})."
                                 , parse_mode='Markdown'
                             )


                        # ==================== –†–ê–°–ß–ï–¢ –†–ï–ê–õ–¨–ù–û–ì–û PNL ====================
                        print("\n--- Calculating Real PNL ---")
                        # PNL –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: total_close_value - total_open_value
                        # –î–ª—è —à–æ—Ä—Ç–∞: total_open_value - total_close_value
                        # –û–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞: (1 if short else -1) * (total_close_value - total_open_value)
                        price_pnl = position_data["total_close_value"] - position_data["total_open_value"]
                        if open_side == "Sell": # –ï—Å–ª–∏ –±—ã–ª —à–æ—Ä—Ç, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNL —Ü–µ–Ω—ã
                             price_pnl = -price_pnl

                        # –§–∞–Ω–¥–∏–Ω–≥ (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –±—É–¥–µ—Ç 0 –∏–ª–∏ None)
                        funding_pnl = position_data.get("actual_funding_fee") or Decimal("0")

                        # –ö–æ–º–∏—Å—Å–∏–∏
                        total_fees = position_data["total_open_fee"] + position_data["total_close_fee"]

                        # –ò—Ç–æ–≥–æ–≤—ã–π —á–∏—Å—Ç—ã–π PNL
                        net_pnl = price_pnl + funding_pnl - total_fees
                        roi_pct = (net_pnl / marja) * 100 if marja else Decimal("0")

                        print(f"Price PNL: {price_pnl:.4f}")
                        print(f"Funding PNL: {funding_pnl:.4f}")
                        print(f"Total Fees: {total_fees:.4f}")
                        print(f"Net PNL: {net_pnl:.4f}")
                        print(f"ROI: {roi_pct:.2f}%")

                        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await app.bot.send_message(
                            chat_id,
                            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏: *{top_symbol}* ({'LONG' if open_side == 'Buy' else 'SHORT'})\n\n"
                            f" PNL (—Ü–µ–Ω–∞): `{price_pnl:+.4f}` USDT\n"
                            f" PNL (—Ñ–∞–Ω–¥–∏–Ω–≥): `{funding_pnl:+.4f}` USDT\n"
                            f" –ö–æ–º–∏—Å—Å–∏–∏ (–æ—Ç–∫—Ä+–∑–∞–∫—Ä): `{-total_fees:.4f}` USDT\n"
                            f"üí∞ *–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_pnl:+.4f} USDT*\n"
                            f"üìà ROI –æ—Ç –º–∞—Ä–∂–∏ ({marja} USDT): `{roi_pct:.2f}%`"
                            , parse_mode='Markdown'
                        )
                        trade_success = True

                    # ==================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –°–î–ï–õ–ö–ò (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫) =====================
                    except Exception as trade_e:
                        print(f"\n!!! CRITICAL TRADE ERROR for chat {chat_id}, symbol {top_symbol} !!!")
                        print(f"Error: {trade_e}")
                        import traceback
                        traceback.print_exc()
                        await app.bot.send_message(
                            chat_id,
                            f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –ø–æ *{top_symbol}*:\n"
                            f"`{trade_e}`\n\n"
                            f"‚ùóÔ∏è *–ü–†–û–í–ï–†–¨–¢–ï –°–ß–ï–¢ –ò –ü–û–ó–ò–¶–ò–ò –í–†–£–ß–ù–£–Æ!*"
                            , parse_mode='Markdown'
                        )
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å get_positions() –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –∑–∞–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–æ–º


                    finally:
                        print(f">>> Finished processing {top_symbol} for chat {chat_id} <<<")
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª –∑–¥–µ—Å—å


            else:
                # print(f"Not in entry window for {top_symbol} ({seconds_left:.0f}s left).")
                pass # –ù–µ —Å–ø–∞–º–∏–º –≤ –ª–æ–≥, –µ—Å–ª–∏ –Ω–µ –≤ –æ–∫–Ω–µ –≤—Ö–æ–¥–∞


        except Exception as loop_e:
            print("\n!!! UNHANDLED ERROR IN SNIPER LOOP !!!")
            print(f"Error: {loop_e}")
            import traceback
            traceback.print_exc()
            # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞
            await asyncio.sleep(30) # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ–¥–æ–ª—å—à–µ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–∏


# ===================== MAIN =====================

if __name__ == "__main__":
    print("Initializing bot...")
    app_builder = ApplicationBuilder().token(BOT_TOKEN)
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∫–æ–ª-–≤–∞ —é–∑–µ—Ä–æ–≤)
    # app_builder.concurrent_updates(20)
    # app_builder.connection_pool_size(10)
    app = app_builder.build()


    # --- –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel)) # –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤

    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (Regex)
    app.add_handler(MessageHandler(filters.Regex("^üìä –¢–æ–ø-–ø–∞—Ä—ã$"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("^üì° –°–∏–≥–Ω–∞–ª—ã$"), signal_menu))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    # app.add_handler(MessageHandler(filters.Regex("^üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏$"), calculator_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤
    app.add_handler(CallbackQueryHandler(signal_callback, pattern="^(toggle_sniper|show_top_pairs_inline)$"))

    # –î–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ú–∞—Ä–∂–∞$"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        conversation_timeout=60.0
    )
    app.add_handler(conv_marja)

    # –î–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚öñ –ü–ª–µ—á–æ$"), set_real_plecho)],
        states={
            SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=60.0
    )
    app.add_handler(conv_plecho)

    # --- –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å–Ω–∞–π–ø–µ—Ä–∞ ---
    async def post_init_tasks(passed_app: ApplicationBuilder):
        print("Running post_init tasks...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–Ω–∞–π–ø–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(funding_sniper_loop(passed_app))
        print("Sniper loop task created.")

    app.post_init = post_init_tasks

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    print("Starting bot polling...")
    try:
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"\nBot polling stopped due to error: {e}")
    finally:
        print("\nBot shutdown.")


# --- END OF FILE bot (7).py ---
