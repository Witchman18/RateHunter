import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø –ø–∞—Ä—ã:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"

            msg += (
                f"üéü {symbol}\n"
                f"{direction} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                f"üíπ –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {time_left}\n\n"
            )

        await update.message.reply_text(msg.strip())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        marja = float(update.message.text.strip().replace(",", "."))
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∂–∏.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ü–õ–ï–ß–ê =====================

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öñ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞:")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        plecho = float(update.message.text.strip().replace(",", "."))
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]["real_plecho"] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–µ—á–∞.")
    return ConversationHandler.END

# ===================== –ú–ï–ù–Æ –°–ò–ì–ù–ê–õ–û–í =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    buttons = [
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä–∞", callback_data="start_sniper")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–Ω–∞–π–ø–µ—Ä–∞", callback_data="stop_sniper")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –°–∏–≥–Ω–∞–ª—ã:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data == "start_sniper":
        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}
        sniper_active[chat_id]['active'] = True
        await query.edit_message_text("üöÄ –°–Ω–∞–π–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    elif data == "stop_sniper":
        if chat_id in sniper_active:
            sniper_active[chat_id]['active'] = False
        await query.edit_message_text("üõë –°–Ω–∞–π–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def get_position_direction(rate: float) -> str:
    if rate is None:
        return "NONE"
    if rate < 0:
        return "LONG"
    elif rate > 0:
        return "SHORT"
    else:
        return "NONE"

def calculate_adjusted_qty(position_size, price, qty_step, min_qty):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏ (qty), –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏.
    """
    raw_qty = position_size / price
    adjusted_qty = raw_qty - (raw_qty % qty_step)
    adjusted_qty = round(adjusted_qty, 10)
    if adjusted_qty < min_qty:
        return None
    return adjusted_qty

# ===================== –§–û–ù–î–û–í–´–ô –°–ù–ê–ô–ü–ï–† (–§–ê–ù–î–ò–ù–ì-–ë–û–¢) =====================

async def funding_sniper_loop(app):
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            funding_data = []
            for t in tickers:
                symbol = t["symbol"]
                rate = t.get("fundingRate")
                next_time = t.get("nextFundingTime")
                try:
                    rate = float(rate)
                    funding_data.append((symbol, rate, int(next_time)))
                except:
                    continue

            funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
            global latest_top_pairs
            latest_top_pairs = funding_data[:5]

            if not latest_top_pairs:
                await asyncio.sleep(30)
                continue

            top_symbol, rate, next_ts = latest_top_pairs[0]
            minutes_left = int((next_ts / 1000 - now_ts) / 60)

            if 0 <= minutes_left <= 1:
                direction = get_position_direction(rate)
                if direction == "NONE":
                    continue

                for chat_id, data in sniper_active.items():
                    if not data.get('active'):
                        continue

                    if (data.get("last_entry_symbol") == top_symbol and data.get("last_entry_ts") == next_ts):
                        continue

                    marja = data.get('real_marja')
                    plecho = data.get('real_plecho')
                    if not marja or not plecho:
                        continue

                    position_size = marja * plecho
                    gross = position_size * abs(rate)
                    fees = position_size * 0.0006
                    spread = position_size * 0.0002
                    net = gross - fees - spread
                    roi = (net / marja) * 100

                    await app.bot.send_message(
                        chat_id,
                        f"üì° –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {top_symbol}\n"
                        f"{'üìâ SHORT' if direction == 'SHORT' else 'üìà LONG'} | üìä {rate * 100:.4f}%\n"
                        f"üíº {marja} USDT x{plecho}  |  üí∞ –î–æ—Ö–æ–¥: {net:.2f} USDT\n"
                        f"‚è± –í—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
                    )

                    try:
                        info = session.get_instruments_info(category="linear", symbol=top_symbol)
                        filters = info["result"]["list"][0]["lotSizeFilter"]
                        min_qty = float(filters["minOrderQty"])
                        step = float(filters["qtyStep"])

                        ticker_info = session.get_tickers(category="linear", symbol=top_symbol)
                        last_price = float(ticker_info["result"]["list"][0]["lastPrice"])
                        adjusted_qty = calculate_adjusted_qty(position_size, last_price, step, min_qty)
if adjusted_qty is None:
    await app.bot.send_message(
        chat_id,
        f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ø–æ {top_symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: –æ–±—ä—ë–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty})"
    )
    continue

                        try:
                            session.set_leverage(
                                category="linear",
                                symbol=top_symbol,
                                buyLeverage=str(plecho),
                                sellLeverage=str(plecho)
                            )
                        except Exception as e:
                            if "110043" in str(e):
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å–¥–µ–ª–∫—É.")
                            else:
                                await app.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {str(e)}")
                                continue

                        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º (—Å —Ü–µ–Ω–æ–π –æ–∫–æ–ª–æ —Ä—ã–Ω–∫–∞), —Å fallback –Ω–∞ –º–∞—Ä–∫–µ—Ç
                        orderbook = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
                        best_bid = float(orderbook['result']['b'][0][0])
                        best_ask = float(orderbook['result']['a'][0][0])
                        open_side = "Sell" if direction == "SHORT" else "Buy"
                        open_price = best_ask if direction == "SHORT" else best_bid

                        order_resp = session.place_order(
                            category="linear",
                            symbol=top_symbol,
                            side=open_side,
                            order_type="Limit",
                            qty=adjusted_qty,
                            price=str(open_price),
                            
                        )
                        open_order_id = order_resp["result"]["orderId"]

                        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                        await asyncio.sleep(2)

                        # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                        try:
                            session.cancel_order(category="linear", symbol=top_symbol, orderId=open_order_id)
                        except Exception as e:
                            pass

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                        order_info = session.get_order_history(category="linear", orderId=open_order_id)
                        order_list = order_info.get("result", {}).get("list", [])
                        cum_exec_qty_open = 0.0
                        cum_exec_value_open = 0.0
                        cum_exec_fee_open = 0.0
                        if order_list:
                            ord_data = order_list[0]
                            cum_exec_qty_open = float(ord_data.get("cumExecQty", 0))
                            cum_exec_value_open = float(ord_data.get("cumExecValue", 0))
                            cum_exec_fee_open = float(ord_data.get("cumExecFee", 0))

                        remaining_qty = adjusted_qty - cum_exec_qty_open
                        open_order_id_2 = None
                        cum_exec_qty_open2 = 0.0
                        cum_exec_value_open2 = 0.0
                        cum_exec_fee_open2 = 0.0

                        if remaining_qty > 0:
                            if remaining_qty < min_qty:
                                await app.bot.send_message(
                                    chat_id,
                                    f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ {cum_exec_qty_open:.6f} –∏–∑ {adjusted_qty:.6f}. –û—Å—Ç–∞—Ç–æ–∫ {remaining_qty:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–µ–π {cum_exec_qty_open:.6f}."
                                )
                            else:
                                order_resp2 = session.place_order(
                                    category="linear",
                                    symbol=top_symbol,
                                    side=open_side,
                                    order_type="Market",
                                    qty=remaining_qty,
                                    time_in_force="FillOrKill"
                                )
                                open_order_id_2 = order_resp2["result"]["orderId"]
                                order_info2 = session.get_order_history(category="linear", orderId=open_order_id_2)
                                order_list2 = order_info2.get("result", {}).get("list", [])
                                if order_list2:
                                    ord_data2 = order_list2[0]
                                    cum_exec_qty_open2 = float(ord_data2.get("cumExecQty", 0))
                                    cum_exec_value_open2 = float(ord_data2.get("cumExecValue", 0))
                                    cum_exec_fee_open2 = float(ord_data2.get("cumExecFee", 0))

                        opened_qty = cum_exec_qty_open + cum_exec_qty_open2

                        sniper_active[chat_id]["last_entry_symbol"] = top_symbol
                        sniper_active[chat_id]["last_entry_ts"] = next_ts

                        # –ñ–¥–µ–º –¥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                        now = datetime.utcnow().timestamp()
                        delay = (next_ts / 1000) - now
                        if delay > 0:
                            await asyncio.sleep(delay)

                        await asyncio.sleep(10)  # –ñ–¥–µ–º –µ—â—ë 10 —Å–µ–∫ –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã

                        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã (PostOnly + reduceOnly + —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—ã)
close_side = "Buy" if direction == "SHORT" else "Sell"

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –∏ —à–∞–≥ —Ü–µ–Ω—ã
instrument_info = session.get_instruments_info(category="linear", symbol=top_symbol)
price_filter = instrument_info["result"]["list"][0]["priceFilter"]
tick_size = float(price_filter["tickSize"])
orderbook_close = session.get_orderbook(category="linear", symbol=top_symbol, limit=1)
best_bid_close = float(orderbook_close['result']['b'][0][0])
best_ask_close = float(orderbook_close['result']['a'][0][0])

# –°–º–µ—â–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 0.3% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –ø–æ tickSize
buffer_pct = 0.003
raw_close_price = (
    best_bid_close * (1 + buffer_pct) if direction == "SHORT"
    else best_ask_close * (1 - buffer_pct)
)
close_price = round(raw_close_price / tick_size) * tick_size

try:
    close_order_resp = session.place_order(
        category="linear",
        symbol=top_symbol,
        side=close_side,
        order_type="Limit",
        qty=opened_qty,
        price=str(close_price),
        time_in_force="PostOnly",
        reduce_only=True
    )
except Exception as e:
    await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    close_order_resp = None

close_order_id = None
if close_order_resp and "result" in close_order_resp and "orderId" in close_order_resp["result"]:
    close_order_id = close_order_resp["result"]["orderId"]
    await asyncio.sleep(5)
    try:
        session.cancel_order(category="linear", symbol=top_symbol, orderId=close_order_id)
    except:
        pass

# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
cum_exec_qty_close = 0.0
cum_exec_value_close = 0.0
cum_exec_fee_close = 0.0
if close_order_id:
    close_info = session.get_order_history(category="linear", orderId=close_order_id)
    close_list = close_info.get("result", {}).get("list", [])
    if close_list:
        close_data = close_list[0]
        cum_exec_qty_close = float(close_data.get("cumExecQty", 0))
        cum_exec_value_close = float(close_data.get("cumExecValue", 0))
        cum_exec_fee_close = float(close_data.get("cumExecFee", 0))

# –ï—Å–ª–∏ –Ω–µ –≤—Å—ë –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å ‚Äî –¥–æ–±–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º
remaining_close_qty = opened_qty - cum_exec_qty_close
if remaining_close_qty > 0:
    try:
        close_order_resp2 = session.place_order(
            category="linear",
            symbol=top_symbol,
            side=close_side,
            order_type="Market",
            qty=remaining_close_qty,
            time_in_force="FillOrKill",
            reduce_only=True
        )
        close_order_id_2 = close_order_resp2["result"]["orderId"]
        close_info2 = session.get_order_history(category="linear", orderId=close_order_id_2)
        close_list2 = close_info2.get("result", {}).get("list", [])
        if close_list2:
            close_data2 = close_list2[0]
            cum_exec_qty_close2 = float(close_data2.get("cumExecQty", 0))
            cum_exec_value_close2 = float(close_data2.get("cumExecValue", 0))
            cum_exec_fee_close2 = float(close_data2.get("cumExecFee", 0))
    except Exception as e:
        await app.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–µ—Ç-–∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        cum_exec_qty_close2 = cum_exec_value_close2 = cum_exec_fee_close2 = 0.0
else:
    cum_exec_qty_close2 = cum_exec_value_close2 = cum_exec_fee_close2 = 0.0

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ø—Ä–∏–±—ã–ª—å
                        total_fees = cum_exec_fee_open + cum_exec_fee_open2 + cum_exec_fee_close + cum_exec_fee_close2
                        total_buy_value = 0.0
                        total_sell_value = 0.0

                        if order_list:
                            if ord_data.get("side") == "Buy":
                                total_buy_value += cum_exec_value_open
                            else:
                                total_sell_value += cum_exec_value_open
                        if open_order_id_2 and order_list2:
                            if ord_data2.get("side") == "Buy":
                                total_buy_value += cum_exec_value_open2
                            else:
                                total_sell_value += cum_exec_value_open2
                        if close_list:
                            if close_data.get("side") == "Buy":
                                total_buy_value += cum_exec_value_close
                            else:
                                total_sell_value += cum_exec_value_close
                        if close_order_id_2 and close_list2:
                            if close_data2.get("side") == "Buy":
                                total_buy_value += cum_exec_value_close2
                            else:
                                total_sell_value += cum_exec_value_close2

                        price_profit = total_sell_value - total_buy_value
                        funding_profit = (cum_exec_value_open + cum_exec_value_open2) * abs(rate)
                        gross_profit = price_profit + funding_profit
                        net_profit = gross_profit - total_fees
                        roi_pct = (net_profit / marja) * 100 if marja else 0.0

                        await app.bot.send_message(
                            chat_id,
                            f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {top_symbol} ({direction})\n"
                            f"üí∞ –ì—Ä—è–∑–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit:.2f} USDT\n"
                            f"üíµ –ö–æ–º–∏—Å—Å–∏–∏: {total_fees:.2f} USDT\n"
                            f"üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.2f} USDT\n"
                            f"üìà ROI: {roi_pct:.2f}%"
                        )

                    except Exception as e:
                        await app.bot.send_message(
                            chat_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ {top_symbol}:\n{str(e)}"
                        )

        except Exception as e:
            print(f"[Sniper Error] {e}")

        await asyncio.sleep(30)

async def test_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if chat_id not in sniper_active:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä–∂—É –∏ –ø–ª–µ—á–æ.")
        return

    marja = sniper_active[chat_id].get("real_marja")
    plecho = sniper_active[chat_id].get("real_plecho")
    if not marja or not plecho:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä–∂—É –∏ –ø–ª–µ—á–æ.")
        return

    symbol = "SOLUSDT"  # –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –ø–∞—Ä—É
    direction = "LONG"
    position_size = marja * plecho

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞
        ticker_info = session.get_tickers(category="linear", symbol=symbol)
        last_price = float(ticker_info["result"]["list"][0]["lastPrice"])

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        info = session.get_instruments_info(category="linear", symbol=symbol)
        filters = info["result"]["list"][0]["lotSizeFilter"]
        min_qty = float(filters["minOrderQty"])
        step = float(filters["qtyStep"])

        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç—ã
        raw_qty = position_size / last_price

        if raw_qty < min_qty:
            await context.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ø–æ {symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: –æ–±—ä—ë–º {raw_qty:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty})"
            )
            return

        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –ø–æ —à–∞–≥—É
        adjusted_qty = raw_qty - (raw_qty % step)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        try:
            session.set_leverage(
                category="linear",
                symbol=symbol,
                buyLeverage=str(plecho),
                sellLeverage=str(plecho)
            )
        except Exception as e:
            if "110043" in str(e):
                await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å–¥–µ–ª–∫—É.")
            else:
                await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {str(e)}")

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º —Å fallback –Ω–∞ –º–∞—Ä–∫–µ—Ç
        orderbook = session.get_orderbook(category="linear", symbol=symbol, limit=1)
        best_bid = float(orderbook['result']['b'][0][0])
        best_ask = float(orderbook['result']['a'][0][0])
        open_side = "Sell" if direction == "SHORT" else "Buy"
        open_price = best_ask if direction == "SHORT" else best_bid

        order_resp = session.place_order(
            category="linear",
            symbol=symbol,
            side=open_side,
            order_type="Limit",
            qty=adjusted_qty,
            price=str(open_price),
            time_in_force="PostOnly"
        )
        open_order_id = order_resp["result"]["orderId"]
        await asyncio.sleep(2)
        try:
            session.cancel_order(category="linear", symbol=symbol, orderId=open_order_id)
        except Exception as e:
            pass

        order_info = session.get_order_history(category="linear", orderId=open_order_id)
        order_list = order_info.get("result", {}).get("list", [])
        cum_exec_qty_open = 0.0
        if order_list:
            ord_data = order_list[0]
            cum_exec_qty_open = float(ord_data.get("cumExecQty", 0))
        remaining_qty = adjusted_qty - cum_exec_qty_open
        if remaining_qty > 0:
            if remaining_qty >= min_qty:
                session.place_order(
                    category="linear",
                    symbol=symbol,
                    side=open_side,
                    order_type="Market",
                    qty=remaining_qty,
                    time_in_force="FillOrKill"
                )
            else:
                await context.bot.send_message(
                    chat_id,
                    f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {cum_exec_qty_open:.6f} –∏–∑ {adjusted_qty:.6f}. –û—Å—Ç–∞—Ç–æ–∫ {remaining_qty:.6f} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω."
                )

        opened_qty = cum_exec_qty_open + (remaining_qty if remaining_qty > 0 and remaining_qty >= min_qty else 0.0)

        await asyncio.sleep(60)
        await context.bot.send_message(
            chat_id,
            f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {symbol} ({direction})\n"
            f"üì¶ –û–±—ä—ë–º: {opened_qty:.6f} {symbol.replace('USDT', '')}"
        )

    except Exception as e:
        await context.bot.send_message(
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ {symbol}:\n{str(e)}"
        )

# ===================== MAIN =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø-–ø–∞—Ä—ã"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))
    app.add_handler(CommandHandler("test_trade", test_trade))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∂–∏
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∞ –ú–∞—Ä–∂–∞"), set_real_marja)],
        states={
            SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_marja)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚öñ –ü–ª–µ—á–æ"), set_real_plecho)],
        states={
            SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_plecho)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç)
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    app.run_polling()
