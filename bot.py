# =========================================================================
# ===================== RateHunter 2.0 - Alpha v0.2.1 ===================
# =========================================================================
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
# - –£—Å—Ç—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ CallbackQueryHandler.
# - –ö–Ω–æ–ø–∫–∏ "–°—Ç–∞–≤–∫–∞" –∏ "–û–±—ä–µ–º" —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—É—Å–∫–∞—é—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
# - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–¥–µ–ª–∞–Ω—ã –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è.
# =========================================================================

import os
import asyncio
import aiohttp
import decimal
from datetime import datetime
from decimal import Decimal

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
user_settings = {}
api_data_cache = {"last_update": None, "data": []}
CACHE_LIFETIME_SECONDS = 60
ALL_AVAILABLE_EXCHANGES = ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin', 'Gate.io', 'HTX', 'Bitget']

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
SET_FUNDING_THRESHOLD, SET_VOLUME_THRESHOLD = range(2)

# --- "–£–º–Ω—ã–µ" –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def get_default_settings():
    return {
        'notifications_on': True,
        'exchanges': ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin'],
        'funding_threshold': Decimal('0.005'),
        'volume_threshold_usdt': Decimal('1000000'),
    }

def ensure_user_settings(chat_id: int):
    if chat_id not in user_settings:
        user_settings[chat_id] = get_default_settings()
    for key, value in get_default_settings().items():
        user_settings[chat_id].setdefault(key, value)


# =================================================================
# ===================== –ú–û–î–£–õ–¨ –°–ë–û–†–ê –î–ê–ù–ù–´–• (API) =====================
# =================================================================
# (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def get_bybit_data():
    bybit_url = "https://api.bybit.com/v5/market/tickers?category=linear"
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(bybit_url) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("retCode") == 0 and data.get("result", {}).get("list"):
                    for t in data["result"]["list"]:
                        try:
                            results.append({
                                'exchange': 'Bybit', 'symbol': t.get("symbol"),
                                'rate': Decimal(t.get("fundingRate")),
                                'next_funding_time': int(t.get("nextFundingTime")),
                                'volume_24h_usdt': Decimal(t.get("turnover24h")),
                                'max_order_value_usdt': Decimal('0'),
                                'trade_url': f'https://www.bybit.com/trade/usdt/{t.get("symbol")}'
                            })
                        except (TypeError, ValueError, decimal.InvalidOperation): continue
    except Exception as e: print(f"[API_ERROR] Bybit: {e}")
    return results

async def get_mexc_data():
    mexc_url = "https://contract.mexc.com/api/v1/contract/detail"
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(mexc_url) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("success") and data.get("data"):
                    for t in data["data"]:
                         if t.get("quoteCoin") != "USDT" or t.get("state") != "SHOW": continue
                         try:
                            symbol = t.get("symbol").replace("_", "")
                            results.append({
                                'exchange': 'MEXC', 'symbol': symbol,
                                'rate': Decimal(str(t.get("fundingRate"))),
                                'next_funding_time': int(t.get("nextSettleTime")),
                                'volume_24h_usdt': Decimal(str(t.get("volume24"))),
                                'max_order_value_usdt': Decimal(str(t.get("maxVol"))),
                                'trade_url': f'https://futures.mexc.com/exchange/{t.get("symbol")}'
                            })
                         except (TypeError, ValueError, decimal.InvalidOperation): continue
    except Exception as e: print(f"[API_ERROR] MEXC: {e}")
    return results

async def fetch_all_data(force_update=False):
    now = datetime.now().timestamp()
    if not force_update and api_data_cache["last_update"] and (now - api_data_cache["last_update"] < CACHE_LIFETIME_SECONDS):
        return api_data_cache["data"]
    print("[API] Fetching new data from all exchanges...")
    tasks = [get_bybit_data(), get_mexc_data()]
    results_from_tasks = await asyncio.gather(*tasks, return_exceptions=True)
    all_data = []
    for res in results_from_tasks:
        if isinstance(res, list): all_data.extend(res)
        elif isinstance(res, Exception): print(f"[API_GATHER_ERROR] {res}")
    api_data_cache["data"], api_data_cache["last_update"] = all_data, now
    return all_data


# =================================================================
# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° (UI) ==================
# =================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    main_menu_keyboard = [["üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å"], ["üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]]
    reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RateHunter 2.0!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=reply_markup
    )

async def show_top_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]
    
    message_to_edit = None
    if update.callback_query:
        # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É"), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_to_edit = update.callback_query.message
        await message_to_edit.edit_text("üîÑ –ò—â—É –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        message_to_edit = await update.message.reply_text("üîÑ –ò—â—É –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    all_data = await fetch_all_data()
    user_filtered_data = [
        item for item in all_data
        if item['exchange'] in settings['exchanges']
        and abs(item['rate']) >= settings['funding_threshold']
        and item['volume_24h_usdt'] >= settings['volume_threshold_usdt']
    ]
    user_filtered_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    top_5 = user_filtered_data[:5]

    if not top_5:
        await message_to_edit.edit_text("üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–ª–∞–±–∏—Ç—å –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    message_text = f"üî• **–¢–û–ü-5 –±–ª–∏–∂–∞–π—à–∏—Ö —Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤ > {settings['funding_threshold']*100:.2f}%**\n\n"
    buttons = []
    now_ts = datetime.now().timestamp()
    for item in top_5:
        symbol_only = item['symbol'].replace("USDT", "")
        time_left_seconds = (item['next_funding_time'] / 1000) - now_ts
        hours, remainder = divmod(time_left_seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        time_str = f"{int(hours):02d}:{int(minutes):02d}" if time_left_seconds > 0 else "00:00"
        direction_emoji = "üü¢" if item['rate'] > 0 else "üî¥"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        message_text += f"{direction_emoji} *{symbol_only}* `{rate_str}` –¥–æ `{time_str}` [{item['exchange']}]\n"
        buttons.append(InlineKeyboardButton(symbol_only, callback_data=f"drill_{item['symbol']}"))

    keyboard = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    
    await message_to_edit.edit_text(
        message_text, reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown', disable_web_page_preview=True
    )
    
async def drill_down_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol_to_show = query.data.split('_')[1]
    all_data = api_data_cache.get("data", [])
    if not all_data:
        await query.edit_message_text("‚è≥ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è—é...")
        all_data = await fetch_all_data(force_update=True)
    symbol_specific_data = [item for item in all_data if item['symbol'] == symbol_to_show]
    symbol_specific_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    if not symbol_specific_data:
        await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ {symbol_to_show}")
        return
    symbol_only = symbol_to_show.replace("USDT", "")
    message_text = f"üíé **–î–µ—Ç–∞–ª–∏ –ø–æ {symbol_only}**\n\n"
    now_ts = datetime.now().timestamp()
    for item in symbol_specific_data:
        time_left_seconds = (item['next_funding_time'] / 1000) - now_ts
        hours, remainder = divmod(time_left_seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        time_str = f"{int(hours):02d}:{int(minutes):02d}" if time_left_seconds > 0 else "00:00"
        direction_emoji = "üü¢" if item['rate'] > 0 else "üî¥"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        message_text += (f"{direction_emoji} `{rate_str}` –¥–æ `{time_str}` [{item['exchange']}]({item['trade_url']})\n")
    
    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç show_top_rates
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]]
    
    await query.edit_message_text(
        text=message_text, reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown', disable_web_page_preview=True
    )

async def back_to_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç show_top_rates, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É update
    # —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    await show_top_rates(update, context)


# --- –ë–õ–û–ö: –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" ---

async def send_filters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]
    notif_status = "–í–ö–õ" if settings['notifications_on'] else "–í–´–ö–õ"
    notif_emoji = "‚úÖ" if settings['notifications_on'] else "üî¥"
    vol = settings['volume_threshold_usdt']
    vol_str = f"{vol / 1_000_000:.1f}M" if vol >= 1_000_000 else f"{vol / 1_000:.0f}K"
    message_text = "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**"
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∏—Ä–∂–∏", callback_data="filters_exchanges")],
        [
            InlineKeyboardButton(f"üîî –°—Ç–∞–≤–∫–∞: > {settings['funding_threshold'] * 100:.2f}%", callback_data="filters_funding"),
            InlineKeyboardButton(f"üíß –û–±—ä–µ–º: > {vol_str}", callback_data="filters_volume")
        ],
        [InlineKeyboardButton(f"{notif_emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_status}", callback_data="filters_toggle_notif")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="filters_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def filters_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_filters_menu(update, context)

async def filters_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split('_', 1)[1] # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É '_'

    if action == "close":
        await query.message.delete()
    elif action == "toggle_notif":
        chat_id = query.effective_chat.id
        user_settings[chat_id]['notifications_on'] = not user_settings[chat_id]['notifications_on']
        await send_filters_menu(update, context)
    elif action == "exchanges":
        await show_exchanges_menu(update, context)

async def show_exchanges_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.effective_chat.id
    ensure_user_settings(chat_id)
    active_exchanges = user_settings[chat_id]['exchanges']
    message_text = "üè¶ **–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏**"
    buttons = []
    for exchange in ALL_AVAILABLE_EXCHANGES:
        status_emoji = "‚úÖ" if exchange in active_exchanges else "‚¨úÔ∏è"
        buttons.append(InlineKeyboardButton(f"{status_emoji} {exchange}", callback_data=f"exch_{exchange}"))
    
    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="exch_back")])
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def exchanges_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_', 1)[1]
    if data == "back":
        await send_filters_menu(update, context)
    else:
        chat_id = query.effective_chat.id
        active_exchanges = user_settings[chat_id]['exchanges']
        if data in active_exchanges:
            active_exchanges.remove(data)
        else:
            active_exchanges.append(data)
        await show_exchanges_menu(update, context)

# --- –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ ---
async def ask_for_funding_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    current_val = user_settings[query.effective_chat.id]['funding_threshold'] * 100
    prompt = (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å—Ç–∞–≤–∫–∏: `> {current_val:.2f}%`.\n\n"
              "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.75`).\n"
              "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.delete()
    sent_message = await query.message.reply_text(prompt, parse_mode='Markdown')
    context.user_data['prompt_message_id'] = sent_message.message_id
    return SET_FUNDING_THRESHOLD

async def save_funding_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        value = Decimal(update.message.text.strip().replace(",", "."))
        if not (0 < value < 100): raise ValueError("Value out of range")
        user_settings[chat_id]['funding_threshold'] = value / 100
    except (ValueError, TypeError, decimal.InvalidOperation):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.75`). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SET_FUNDING_THRESHOLD
    
    await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
    await context.bot.delete_message(chat_id, update.message.message_id)
    await send_filters_menu(update, context)
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—ä–µ–º–∞ ---
async def ask_for_volume_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    current_val = user_settings[query.effective_chat.id]['volume_threshold_usdt']
    prompt = (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: `{current_val:,.0f} USDT`.\n\n"
              "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, `500000`).\n"
              "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    await query.message.delete()
    sent_message = await query.message.reply_text(prompt, parse_mode='Markdown')
    context.user_data['prompt_message_id'] = sent_message.message_id
    return SET_VOLUME_THRESHOLD

async def save_volume_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        value = Decimal(update.message.text.strip())
        if value < 0: raise ValueError("Value must be positive")
        user_settings[chat_id]['volume_threshold_usdt'] = value
    except (ValueError, TypeError, decimal.InvalidOperation):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `500000`). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SET_VOLUME_THRESHOLD
    
    await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
    await context.bot.delete_message(chat_id, update.message.message_id)
    await send_filters_menu(update, context)
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await context.bot.delete_message(update.effective_chat.id, context.user_data.pop('prompt_message_id'))
    await context.bot.delete_message(update.effective_chat.id, update.message.message_id)
    await send_filters_menu(update, context)
    return ConversationHandler.END


# =================================================================
# ======================== –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ë–û–¢–ê ========================
# =================================================================
async def background_scanner(app: ApplicationBuilder):
    print(" Background scanner started ".center(50, "="))
    while True: await asyncio.sleep(60)

# =================================================================
# ========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========================
# =================================================================
if __name__ == "__main__":
    print("Initializing bot...")
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # --- –î–∏–∞–ª–æ–≥–∏ ---
    funding_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_funding_value, pattern="^filters_funding$")],
        states={SET_FUNDING_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_funding_value)]},
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    volume_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_volume_value, pattern="^filters_volume$")],
        states={SET_VOLUME_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_volume_value)]},
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    
    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å$"), show_top_rates))
    application.add_handler(MessageHandler(filters.Regex("^üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã$"), filters_menu_entry))
    
    application.add_handler(funding_conv)
    application.add_handler(volume_conv)

    application.add_handler(CallbackQueryHandler(drill_down_callback, pattern="^drill_"))
    application.add_handler(CallbackQueryHandler(back_to_top_callback, pattern="^back_to_top$"))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ –º–µ—à–∞—è –¥–∏–∞–ª–æ–≥–∞–º
    application.add_handler(CallbackQueryHandler(filters_callback_handler, pattern="^(filters_close|filters_toggle_notif|filters_exchanges)$"))
    application.add_handler(CallbackQueryHandler(exchanges_callback_handler, pattern="^exch_"))
    
    async def post_init(app: ApplicationBuilder):
        print("Running post_init tasks...")
        asyncio.create_task(background_scanner(app))
        print("Background scanner task created.")

    application.post_init = post_init

    print("Starting bot polling...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"\nBot polling stopped due to error: {e}")
    finally:
        print("\nBot shutdown.")
