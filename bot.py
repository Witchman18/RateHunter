# =========================================================================
# ===================== RateHunter 2.0 - Alpha v0.1 =====================
# =========================================================================
# –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
# —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.
#
# –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è –æ—Ç —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏:
# - –ù–ï–¢ –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò: –ë–æ—Ç –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç–∞–º–∏.
# - –ù–ï–¢ –ü–†–ò–í–ê–¢–ù–´–• –ö–õ–Æ–ß–ï–ô: –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ API, 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
# - –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –±–∏—Ä–∂–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏.
# - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: –ü–∞–Ω–µ–ª–∏ —Å "–ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏–µ–º" (drill-down) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
# - –ì–ò–ë–ö–ò–ï –§–ò–õ–¨–¢–†–´: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –±–∏—Ä–∂–∞–º, —Å—Ç–∞–≤–∫–µ, –æ–±—ä–µ–º—É –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
# =========================================================================

import os
import asyncio
import aiohttp
import decimal
from datetime import datetime
from decimal import Decimal

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN") # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º –Ω—É–∂–µ–Ω

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
user_settings = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (chat_id)
# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å API –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ –≤ –º–µ–Ω—é
api_data_cache = {
    "last_update": None,
    "data": []
} 
CACHE_LIFETIME_SECONDS = 60 # –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂ (1 –º–∏–Ω—É—Ç–∞)


# --- "–£–º–Ω—ã–µ" –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def get_default_settings():
    return {
        'notifications_on': True,
        'exchanges': ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin'], # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏—Ä–∂–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'funding_threshold': Decimal('0.005'),  # 0.5%
        'volume_threshold_usdt': Decimal('1000000'), # 1 –º–ª–Ω USDT
        'time_window_minutes': 60, # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
        # 'volatility_threshold_percent': Decimal('2.0'), # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        # 'watchlist': [], # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    }

# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ ---
def ensure_user_settings(chat_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id not in user_settings:
        user_settings[chat_id] = get_default_settings()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –≤ –±—É–¥—É—â–µ–º
    for key, value in get_default_settings().items():
        user_settings[chat_id].setdefault(key, value)


# =================================================================
# ===================== –ú–û–î–£–õ–¨ –°–ë–û–†–ê –î–ê–ù–ù–´–• (API) =====================
# =================================================================

# --- –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è Bybit ---
async def get_bybit_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É —Å Bybit —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API."""
    bybit_url = "https://api.bybit.com/v5/market/tickers?category=linear"
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(bybit_url) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("retCode") == 0 and data.get("result", {}).get("list"):
                    for t in data["result"]["list"]:
                        try:
                            # –ú—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω—ã
                            results.append({
                                'exchange': 'Bybit',
                                'symbol': t.get("symbol"),
                                'rate': Decimal(t.get("fundingRate")),
                                'next_funding_time': int(t.get("nextFundingTime")),
                                'volume_24h_usdt': Decimal(t.get("turnover24h")),
                                # –í —ç—Ç–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤, –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –¥–æ–ø. –∑–∞–ø—Ä–æ—Å
                                'max_order_value_usdt': Decimal('0'), # –ó–∞–≥–ª—É—à–∫–∞
                                'trade_url': f'https://www.bybit.com/trade/usdt/{t.get("symbol")}'
                            })
                        except (TypeError, ValueError, decimal.InvalidOperation):
                            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    except Exception as e:
        print(f"[API_ERROR] Bybit: {e}")
    return results

# --- –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è MEXC ---
async def get_mexc_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É —Å MEXC —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API."""
    mexc_url = "https://contract.mexc.com/api/v1/contract/detail"
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(mexc_url) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("success") and data.get("data"):
                    for t in data["data"]:
                         if t.get("quoteCoin") != "USDT" or t.get("state") != "SHOW":
                            continue
                         try:
                            symbol = t.get("symbol").replace("_", "")
                            results.append({
                                'exchange': 'MEXC',
                                'symbol': symbol,
                                'rate': Decimal(str(t.get("fundingRate"))),
                                'next_funding_time': int(t.get("nextSettleTime")),
                                'volume_24h_usdt': Decimal(str(t.get("volume24"))),
                                'max_order_value_usdt': Decimal(str(t.get("maxVol"))), # MEXC –æ—Ç–¥–∞–µ—Ç –ª–∏–º–∏—Ç –≤ –±–∞–∑–æ–≤–æ–º –∞–∫—Ç–∏–≤–µ
                                'trade_url': f'https://futures.mexc.com/exchange/{t.get("symbol")}'
                            })
                         except (TypeError, ValueError, decimal.InvalidOperation):
                            continue
    except Exception as e:
        print(f"[API_ERROR] MEXC: {e}")
    return results

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä ---
async def fetch_all_data(force_update=False):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    now = datetime.now().timestamp()
    if not force_update and api_data_cache["last_update"] and (now - api_data_cache["last_update"] < CACHE_LIFETIME_SECONDS):
        print("[Cache] Using cached API data.")
        return api_data_cache["data"]

    print("[API] Fetching new data from all exchanges...")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks = [
        get_bybit_data(),
        get_mexc_data(),
        # –°—é–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤—ã–∑–æ–≤—ã –¥–ª—è Binance, OKX –∏ —Ç.–¥.
        # asyncio.create_task(get_binance_data()),
    ]
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_from_tasks = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
    all_data = []
    for res in results_from_tasks:
        if isinstance(res, list):
            all_data.extend(res)
        elif isinstance(res, Exception):
            print(f"[API_GATHER_ERROR] {res}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    api_data_cache["data"] = all_data
    api_data_cache["last_update"] = now
    print(f"[API] Fetched {len(all_data)} total pairs.")
    return all_data


# =================================================================
# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° (UI) ==================
# =================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    
    main_menu_keyboard = [
        ["üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å"],
        ["üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RateHunter 2.0!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=reply_markup
    )

async def show_top_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)."""
    chat_id = update.effective_chat.id
    ensure_user_settings(chat_id)
    settings = user_settings[chat_id]
    
    await update.message.reply_text("üîÑ –ò—â—É –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    all_data = await fetch_all_data()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_filtered_data = [
        item for item in all_data
        if item['exchange'] in settings['exchanges']
        and abs(item['rate']) >= settings['funding_threshold']
        and item['volume_24h_usdt'] >= settings['volume_threshold_usdt']
    ]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–æ–¥—É–ª—é —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    user_filtered_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    
    top_5 = user_filtered_data[:5]

    if not top_5:
        await update.message.reply_text("üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–ª–∞–±–∏—Ç—å –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üî• **–¢–û–ü-5 –±–ª–∏–∂–∞–π—à–∏—Ö —Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤ > {settings['funding_threshold']*100:.2f}%**\n\n"
    buttons = []
    
    now_ts = datetime.now().timestamp()
    
    for item in top_5:
        symbol_only = item['symbol'].replace("USDT", "")
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—ã–ø–ª–∞—Ç—ã
        time_left_seconds = (item['next_funding_time'] / 1000) - now_ts
        hours, remainder = divmod(time_left_seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        time_str = f"{int(hours):02d}:{int(minutes):02d}" if time_left_seconds > 0 else "00:00"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        direction_emoji = "üü¢" if item['rate'] > 0 else "üî¥" # üü¢ = –ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç, üî¥ = —à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç
        rate_str = f"{item['rate'] * 100:+.2f}%"
        
        message_text += f"{direction_emoji} *{symbol_only}* `{rate_str}` –¥–æ `{time_str}` [{item['exchange']}]\n"
        buttons.append(InlineKeyboardButton(symbol_only, callback_data=f"drill_{item['symbol']}"))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    keyboard = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    
async def drill_down_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–∏–∫–µ—Ä–æ–º (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)."""
    query = update.callback_query
    await query.answer()

    symbol_to_show = query.data.split('_')[1]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    all_data = api_data_cache.get("data", [])
    if not all_data:
        await query.edit_message_text("‚è≥ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è—é...")
        all_data = await fetch_all_data(force_update=True)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞—Ä—ã —Å —ç—Ç–∏–º —Å–∏–º–≤–æ–ª–æ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö
    symbol_specific_data = [item for item in all_data if item['symbol'] == symbol_to_show]
    symbol_specific_data.sort(key=lambda x: abs(x['rate']), reverse=True)

    if not symbol_specific_data:
        await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ {symbol_to_show}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    symbol_only = symbol_to_show.replace("USDT", "")
    message_text = f"üíé **–î–µ—Ç–∞–ª–∏ –ø–æ {symbol_only}**\n\n"
    
    now_ts = datetime.now().timestamp()

    for item in symbol_specific_data:
        time_left_seconds = (item['next_funding_time'] / 1000) - now_ts
        hours, remainder = divmod(time_left_seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        time_str = f"{int(hours):02d}:{int(minutes):02d}" if time_left_seconds > 0 else "00:00"
        
        direction_emoji = "üü¢" if item['rate'] > 0 else "üî¥"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        
        message_text += (f"{direction_emoji} `{rate_str}` –¥–æ `{time_str}` "
                         f"[{item['exchange']}]({item['trade_url']})\n")

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–ø-5 —Ç–∏–∫–µ—Ä–∞–º–∏
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]]
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥"
async def back_to_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Ç–æ–ø-5."""
    query = update.callback_query
    await query.answer()
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    # –î–ª—è —ç—Ç–æ–≥–æ –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.delete() # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
    await show_top_rates(query.message, context)


# =================================================================
# ======================== –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ë–û–¢–ê ========================
# =================================================================

async def background_scanner(app: ApplicationBuilder):
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print(" Background scanner started ".center(50, "="))
    while True:
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Running background scan...")
        
        all_data = await fetch_all_data()
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # 1. –ü—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ user_settings
        # 2. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # 3. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å all_data –ø–æ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        # 4. –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥—É–±–ª–∏
        # 5. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        pass

# =================================================================
# ========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========================
# =================================================================

if __name__ == "__main__":
    print("Initializing bot...")
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex("^üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å$"), show_top_rates))
    # application.add_handler(MessageHandler(filters.Regex("^üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã$"), show_filters_menu))
    # application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$"), show_my_settings))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏—è" –≤ –¥–µ—Ç–∞–ª–∏
    application.add_handler(CallbackQueryHandler(drill_down_callback, pattern="^drill_"))
    application.add_handler(CallbackQueryHandler(back_to_top_callback, pattern="^back_to_top$"))
    
    # --- –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ---
    async def post_init(app: ApplicationBuilder):
        print("Running post_init tasks...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä
        asyncio.create_task(background_scanner(app))
        print("Background scanner task created.")

    application.post_init = post_init

    print("Starting bot polling...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"\nBot polling stopped due to error: {e}")
    finally:
        print("\nBot shutdown.")
