import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
keyboard = [
    ["üìä –¢–æ–ø-–ø–∞—Ä—ã", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"],
    ["üí∞ –ú–∞—Ä–∂–∞", "‚öñ –ü–ª–µ—á–æ"],
    ["üì° –°–∏–≥–Ω–∞–ª—ã"]
]
latest_top_pairs = []
sniper_active = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_MARJA = 0
SET_PLECHO = 1

# ===================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä –ø–æ funding rate"""
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []

        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        global latest_top_pairs
        latest_top_pairs = funding_data[:5]

        msg = "üìä –¢–æ–ø –ø–∞—Ä—ã:\n\n"
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in latest_top_pairs:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"

            msg += (
                f"üéü {symbol}\n"
                f"{direction} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                f"üíπ –§–∞–Ω–¥–∏–Ω–≥: {rate * 100:.4f}%\n"
                f"‚åõ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {time_left}\n\n"
            )

        await update.message.reply_text(msg.strip())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=reply_markup)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ===================== –£–°–¢–ê–ù–û–í–ö–ê –ú–ê–†–ñ–ò –ò –ü–õ–ï–ß–ê =====================

async def set_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –†–ï–ê–õ–¨–ù–û–ô –º–∞—Ä–∂–∏ (–≤ USDT):")
    return SET_MARJA

async def save_real_marja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        marja = float(update.message.text)
        chat_id = update.effective_chat.id
        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["availableBalance"])

        if marja > usdt_balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return ConversationHandler.END

        if chat_id not in sniper_active:
            sniper_active[chat_id] = {"active": False}
        sniper_active[chat_id]["real_marja"] = marja
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {marja} USDT")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END

async def set_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    return SET_PLECHO

async def save_real_plecho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plecho = float(update.message.text)
        chat_id = update.effective_chat.id

        if chat_id not in sniper_active:
            sniper_active[chat_id] = {}

        sniper_active[chat_id]['real_plecho'] = plecho
        await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {plecho}x")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)")
        return SET_PLECHO

# ===================== –°–ò–ì–ù–ê–õ–´ =====================

async def signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üîî –í–∫–ª", callback_data="sniper_on")],
        [InlineKeyboardButton("üîï –í—ã–∫–ª", callback_data="sniper_off")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏:", reply_markup=reply_markup)

async def signal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    if query.data == "sniper_on":
        sniper_active[chat_id] = sniper_active.get(chat_id, {})
        sniper_active[chat_id]["active"] = True
        await query.edit_message_text("üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        sniper_active[chat_id] = sniper_active.get(chat_id, {})
        sniper_active[chat_id]["active"] = False
        await query.edit_message_text("üî¥ –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")

# ===================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –¢–û–†–ì–û–í–õ–ò =====================

async def open_position(symbol: str, direction: str, marja: float, plecho: float, chat_id: int, rate: float):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞
        symbol_info = session.get_instruments_info(category="linear", symbol=symbol)
        if not symbol_info["result"]["list"]:
            await app.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {symbol}")
            return None

        filters = symbol_info["result"]["list"][0]["lotSizeFilter"]
        min_qty = float(filters["minOrderQty"])
        qty_step = float(filters["qtyStep"])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏
        position_size = marja * plecho
        gross_profit = position_size * abs(rate)
        fees = position_size * 0.0006
        spread = position_size * 0.0002
        expected_net = gross_profit - fees - spread
        expected_roi = (expected_net / marja) * 100

        # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π —Å–¥–µ–ª–∫–µ
        await app.bot.send_message(
            chat_id,
            f"üîç –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–∫–∏:\n"
            f"‚Ä¢ –ü–∞—Ä–∞: {symbol}\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'LONG' if direction == 'LONG' else 'SHORT'}\n"
            f"‚Ä¢ –ú–∞—Ä–∂–∞: {marja} USDT x{plecho}\n"
            f"‚Ä¢ –û–±—ä–µ–º: {position_size:.2f} USDT\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {expected_net:.2f} USDT\n"
            f"‚Ä¢ ROI: {expected_roi:.2f}%"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
        if position_size < min_qty:
            await app.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞:\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {min_qty} USDT\n"
                f"–í–∞—à –æ–±—ä–µ–º: {position_size:.2f} USDT"
            )
            return None

        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        adjusted_qty = round(position_size / qty_step) * qty_step
        if adjusted_qty < min_qty:
            adjusted_qty = min_qty

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = session.get_wallet_balance(accountType="UNIFIED")
        available_balance = float(balance["result"]["list"][0]["availableBalance"])
        
        if adjusted_qty > available_balance:
            await app.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.2f} USDT\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {adjusted_qty:.2f} USDT"
            )
            return None

        # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        await app.bot.send_message(
            chat_id,
            f"üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é:\n"
            f"‚Ä¢ {symbol} {direction}\n"
            f"‚Ä¢ –û–±—ä–µ–º: {adjusted_qty:.2f} USDT"
        )

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        order = session.place_order(
            category="linear",
            symbol=symbol,
            side="Buy" if direction == "LONG" else "Sell",
            order_type="Market",
            qty=adjusted_qty,
            time_in_force="FillOrKill",
            position_idx=0
        )

        # üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        await app.bot.send_message(
            chat_id,
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞:\n"
            f"‚Ä¢ ID –æ—Ä–¥–µ—Ä–∞: {order['result']['orderId']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order['result']['cumExecQty']} USDT\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {order['result']['avgPrice']}"
        )

        return {
            "symbol": symbol,
            "qty": adjusted_qty,
            "entry_price": float(order["result"]["avgPrice"]),
            "direction": direction,
            "expected_profit": expected_net
        }

    except Exception as e:
        await app.bot.send_message(
            chat_id,
            f"‚õî –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:\n{str(e)}"
        )
        return None

async def funding_sniper_loop(app):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    while True:
        try:
            now_ts = datetime.utcnow().timestamp()
            response = session.get_tickers(category="linear")
            tickers = response["result"]["list"]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø –ø–∞—Ä
            funding_data = []
            for t in tickers:
                symbol = t["symbol"]
                rate = t.get("fundingRate")
                next_time = t.get("nextFundingTime")
                try:
                    rate = float(rate)
                    funding_data.append((symbol, rate, int(next_time)))
                except:
                    continue

            funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
            global latest_top_pairs
            latest_top_pairs = funding_data[:5]

            if not latest_top_pairs:
                await asyncio.sleep(30)
                continue

            top_symbol, rate, next_ts = latest_top_pairs[0]
            minutes_left = int((next_ts / 1000 - now_ts) / 60)

            if 0 <= minutes_left <= 1:
                direction = "LONG" if rate < 0 else "SHORT"

                for chat_id, data in sniper_active.items():
                    if not data.get('active'):
                        continue

                    marja = data.get('real_marja')
                    plecho = data.get('real_plecho')
                    if not marja or not plecho:
                        continue

                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    position = await open_position(
                        symbol=top_symbol,
                        direction=direction,
                        marja=marja,
                        plecho=plecho,
                        chat_id=chat_id,
                        rate=rate
                    )

                    if position:
                        # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É (–¥–æ –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞)
                        await asyncio.sleep(60)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–∏–±—ã–ª—å
                        pnl = session.get_closed_pnl(
                            category="linear",
                            symbol=top_symbol
                        )
                        
                        # üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                        await app.bot.send_message(
                            chat_id,
                            f"üìä –ò—Ç–æ–≥ —Å–¥–µ–ª–∫–∏:\n"
                            f"‚Ä¢ –ü–∞—Ä–∞: {top_symbol}\n"
                            f"‚Ä¢ –û–∂–∏–¥–∞–ª–æ—Å—å: {position['expected_profit']:.2f} USDT\n"
                            f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π PnL: {pnl['result']['list'][0]['closedPnl']} USDT\n"
                            f"‚Ä¢ ROI: {float(pnl['result']['list'][0]['closedPnl']) / marja * 100:.2f}%"
                        )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await asyncio.sleep(30)

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ä–µ–∂–∏–º–∞
    try:
        session.set_position_mode(category="linear", mode=0)
        print("‚úÖ –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–∏: –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø-–ø–∞—Ä—ã"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üì° –°–∏–≥–Ω–∞–ª—ã"), signal_menu))
    app.add_handler(CallbackQueryHandler(signal_callback))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∂–∏ –∏ –ø–ª–µ—á–∞
    conv_marja = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∞ –ú–∞—Ä–∂–∞"), set_real_marja)],
        states={SET_MARJA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_marja)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_marja)

    conv_plecho = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚öñ –ü–ª–µ—á–æ"), set_real_plecho)],
        states={SET_PLECHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_real_plecho)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_plecho)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    async def on_startup(app):
        asyncio.create_task(funding_sniper_loop(app))

    app.post_init = on_startup
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
