# =========================================================================
# ===================== RateHunter 2.0 - v1.1.0 –° –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–ú ===========
# =========================================================================
# –î–æ–±–∞–≤–ª–µ–Ω —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ funding rate
# =========================================================================

import os
import asyncio
import aiohttp
import decimal
import json
import time
import hmac
import hashlib
import traceback
import pandas as pd
import io
from datetime import datetime, timezone, timedelta
from decimal import Decimal
from typing import Dict, List, Tuple, Optional

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
MSK_TIMEZONE = timezone(timedelta(hours=3))

# === –°–ü–ò–°–û–ö –†–ê–ó–†–ï–®–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
ALLOWED_USERS = [
    518449824,642874424  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
    # –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å ID –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    try:
        user_id = int(user_id)
    except (ValueError, TypeError):
        return False
    return user_id in ALLOWED_USERS

# ===== –ù–û–í–´–ô –ú–û–î–£–õ–¨: –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–†–ï–ù–î–û–í FUNDING RATE =====
class FundingTrendAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å funding rates"""
    
    def __init__(self):
        self.historical_cache = {}  # –ö—ç—à –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
    async def analyze_funding_stability(self, symbol: str, exchange: str, current_rate: Decimal) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥ funding rate
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è_–∞–Ω–æ–º–∞–ª–∏—è / –∏—Å—Ç–æ—â–∞—é—â–∞—è—Å—è_–∞–Ω–æ–º–∞–ª–∏—è
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        history = await self._get_funding_history(symbol, exchange, periods=3)
        
        if not history or len(history) < 2:
            return {
                'trend': 'unknown',
                'stability': 'unknown',
                'confidence': 0.0,
                'recommendation': 'insufficient_data'
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
        trend_analysis = self._analyze_trend(history, current_rate)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        stability_analysis = self._analyze_stability(history, current_rate)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        recommendation = self._make_recommendation(trend_analysis, stability_analysis, current_rate)
        
        return {
            'trend': trend_analysis['direction'],  # 'growing', 'declining', 'stable'
            'trend_strength': trend_analysis['strength'],  # 0.0 - 1.0
            'stability': stability_analysis['level'],  # 'stable', 'volatile', 'declining'
            'stability_score': stability_analysis['score'],  # 0.0 - 1.0
            'confidence': min(trend_analysis['confidence'], stability_analysis['confidence']),
            'recommendation': recommendation,
            'history': history,
            'analysis_details': {
                'rate_change': trend_analysis['rate_change'],
                'volatility': stability_analysis['volatility']
            }
        }
    
    def _analyze_trend(self, history: List[Decimal], current_rate: Decimal) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å—Ç–∞–≤–∫–∏"""
        
        if len(history) < 2:
            return {'direction': 'unknown', 'strength': 0.0, 'confidence': 0.0, 'rate_change': 0.0}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
        changes = []
        all_rates = history + [current_rate]
        
        for i in range(1, len(all_rates)):
            change = float(all_rates[i] - all_rates[i-1])
            changes.append(change)
        
        if not changes:
            return {'direction': 'unknown', 'strength': 0.0, 'confidence': 0.0, 'rate_change': 0.0}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        total_change = sum(changes)
        avg_change = total_change / len(changes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        positive_changes = sum(1 for c in changes if c > 0)
        negative_changes = sum(1 for c in changes if c < 0)
        
        if positive_changes > negative_changes:
            direction = 'growing'
            strength = positive_changes / len(changes)
        elif negative_changes > positive_changes:
            direction = 'declining' 
            strength = negative_changes / len(changes)
        else:
            direction = 'stable'
            strength = 0.5
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        confidence = min(1.0, len(changes) / 3.0) * strength
        
        return {
            'direction': direction,
            'strength': strength,
            'confidence': confidence,
            'rate_change': avg_change,
            'total_change': total_change
        }
    
    def _analyze_stability(self, history: List[Decimal], current_rate: Decimal) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å) —Å—Ç–∞–≤–∫–∏"""
        
        all_rates = history + [current_rate]
        
        if len(all_rates) < 2:
            return {'level': 'unknown', 'score': 0.0, 'confidence': 0.0, 'volatility': 0.0}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        rates_float = [float(rate) for rate in all_rates]
        mean_rate = sum(rates_float) / len(rates_float)
        
        variance = sum((rate - mean_rate) ** 2 for rate in rates_float) / len(rates_float)
        volatility = variance ** 0.5
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        # –≠—Ç–∏ –ø–æ—Ä–æ–≥–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤
        if volatility < 0.001:  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ 0.1%
            level = 'stable'
            score = 0.9
        elif volatility < 0.003:  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ 0.3%
            level = 'moderate'
            score = 0.7
        else:
            level = 'volatile'
            score = 0.3
        
        confidence = min(1.0, len(all_rates) / 3.0)
        
        return {
            'level': level,
            'score': score,
            'confidence': confidence,
            'volatility': volatility
        }
    
    def _make_recommendation(self, trend_analysis: Dict, stability_analysis: Dict, current_rate: Decimal) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        
        abs_rate = abs(float(current_rate))
        trend = trend_analysis['direction']
        stability = stability_analysis['level']
        
        # –ù–∏–∑–∫–∏–µ —Å—Ç–∞–≤–∫–∏ - –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã
        if abs_rate < 0.005:  # –ú–µ–Ω—å—à–µ 0.5%
            return 'rate_too_low'
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if trend == 'growing' or trend == 'stable':
            if stability in ['stable', 'moderate']:
                return 'ideal_arbitrage'  # ‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π –ª–æ–Ω–≥/—à–æ—Ä—Ç
            else:
                return 'risky_arbitrage'  # ‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –∏–∑-–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        elif trend == 'declining':
            return 'contrarian_opportunity'  # üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ
        
        else:
            return 'unclear_signal'  # ‚ö™Ô∏è –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    
    async def _get_funding_history(self, symbol: str, exchange: str, periods: int = 3) -> List[Decimal]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é funding rates
        TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Ä–µ–∞–ª—å–Ω—ã–º API
        """
        
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_key = f"{exchange}_{symbol}"
        
        if cache_key not in self.historical_cache:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            current_time = int(time.time())
            symbol_hash = hash(symbol) % 4
            
            if symbol_hash == 0:
                # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤—ã—Å–æ–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è
                self.historical_cache[cache_key] = [Decimal('-0.019'), Decimal('-0.020')]
            elif symbol_hash == 1:
                # –ò—Å—Ç–æ—â–∞—é—â–∞—è—Å—è –∞–Ω–æ–º–∞–ª–∏—è
                self.historical_cache[cache_key] = [Decimal('-0.021'), Decimal('-0.017')]
            elif symbol_hash == 2:
                # –†–∞—Å—Ç—É—â–∞—è –∞–Ω–æ–º–∞–ª–∏—è
                self.historical_cache[cache_key] = [Decimal('0.008'), Decimal('0.012')]
            else:
                # –í–æ–ª–∞—Ç–∏–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                self.historical_cache[cache_key] = [Decimal('-0.025'), Decimal('-0.010')]
        
        return self.historical_cache[cache_key]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
funding_analyzer = FundingTrendAnalyzer()

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ö–ê–ó–ê –í –î–û–°–¢–£–ü–ï =====
async def access_denied_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å callback_query)"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    message_text = (
        f"‚õî **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n\n"
        f"–í–∞—à ID: `{user_id}`\n"
        f"Username: @{username}\n\n"
        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    print(f"[ACCESS_DENIED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ –∏ –¥–ª—è callback_query
    try:
        if update.callback_query:
            await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                await update.callback_query.edit_message_text(message_text, parse_mode='Markdown')
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, 
                    text=message_text, 
                    parse_mode='Markdown'
                )
        elif update.message:
            await update.message.reply_text(message_text, parse_mode='Markdown')
        else:
            # Fallback
            await context.bot.send_message(
                chat_id=update.effective_chat.id, 
                text=message_text, 
                parse_mode='Markdown'
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ: {e}")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def require_access():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if not check_access(update.effective_user.id):
                await access_denied_message(update, context)
                return
            return await func(update, context)
        return wrapper
    return decorator

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(SET_FUNDING_THRESHOLD, SET_VOLUME_THRESHOLD, 
 SET_ALERT_RATE, SET_ALERT_TIME) = range(4)

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• ===
# –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º –∏ user_id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
user_settings = {}  # –ö–ª—é—á: chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ: {'user_id': int, 'settings': dict}
api_data_cache = {"last_update": None, "data": []}
CACHE_LIFETIME_SECONDS = 60
ALL_AVAILABLE_EXCHANGES = ['Bybit', 'MEXC', 'Binance', 'OKX', 'KuCoin', 'Gate.io', 'HTX', 'Bitget']

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–º–∞
def format_volume(volume_usdt: Decimal) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (K, M, B)"""
    vol = volume_usdt
    if vol >= 1_000_000_000:
        return f"{vol / 1_000_000_000:.1f}B"
    elif vol >= 1_000_000:
        return f"{vol / 1_000_000:.1f}M"
    elif vol >= 1_000:
        return f"{vol / 1_000:.0f}K"
    else:
        return f"{vol:.0f}"
        
def get_default_settings():
    return {
        'exchanges': ['Bybit', 'MEXC'],
        'funding_threshold': Decimal('0.005'),         
        'volume_threshold_usdt': Decimal('1000000'),   
        
        # --- –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
        'alerts_on': False,                             
        'alert_rate_threshold': Decimal('0.015'),       
        'alert_time_window_minutes': 30,                
        'sent_notifications': set(),                    
    }

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö =====
def ensure_user_settings(chat_id: int, user_id: int):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç user_id"""
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            'user_id': user_id,
            'settings': get_default_settings()
        }
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º user_id –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        user_settings[chat_id]['user_id'] = user_id
        
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å
    for key, value in get_default_settings().items():
        user_settings[chat_id]['settings'].setdefault(key, value)

# =================================================================
# ===================== –ú–û–î–£–õ–¨ –°–ë–û–†–ê –î–ê–ù–ù–´–• (API) =====================
# =================================================================

async def get_bybit_data(api_key: str, secret_key: str):
    if not api_key or not secret_key:
        print("[API_WARNING] Bybit: –ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return []

    request_path = "/v5/market/tickers"
    base_url = "https://api.bybit.com"
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"
    params = "category=linear"
    string_to_sign = timestamp + api_key + recv_window + params
    signature = hmac.new(secret_key.encode('utf-8'), string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
    headers = {
        'X-BAPI-API-KEY': api_key, 
        'X-BAPI-TIMESTAMP': timestamp, 
        'X-BAPI-RECV-WINDOW': recv_window, 
        'X-BAPI-SIGN': signature,
        'Content-Type': 'application/json'
    }
    
    results = []
    try:
        print(f"[DEBUG] Bybit: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {base_url + request_path}?{params}")
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url + request_path + "?" + params, headers=headers, timeout=15) as response:
                response_text = await response.text()
                print(f"[DEBUG] Bybit: –°—Ç–∞—Ç—É—Å {response.status}, —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                if response.status != 200:
                    print(f"[API_ERROR] Bybit: –°—Ç–∞—Ç—É—Å {response.status}")
                    print(f"[API_ERROR] Bybit: –û—Ç–≤–µ—Ç: {response_text[:500]}...")
                    return []
                
                try:
                    data = json.loads(response_text)
                except json.JSONDecodeError as e:
                    print(f"[API_ERROR] Bybit: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"[API_ERROR] Bybit: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}")
                    return []
                
                if data.get("retCode") == 0 and data.get("result", {}).get("list"):
                    print(f"[DEBUG] Bybit: –ü–æ–ª—É—á–µ–Ω–æ {len(data['result']['list'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                    for t in data["result"]["list"]:
                        try:
                            if not t.get("symbol") or not t.get("fundingRate"):
                                continue
                            results.append({
                                'exchange': 'Bybit', 
                                'symbol': t.get("symbol"), 
                                'rate': Decimal(t.get("fundingRate")), 
                                'next_funding_time': int(t.get("nextFundingTime")), 
                                'volume_24h_usdt': Decimal(t.get("turnover24h", "0")), 
                                'max_order_value_usdt': Decimal('0'), 
                                'trade_url': f'https://www.bybit.com/trade/usdt/{t.get("symbol")}'
                            })
                        except (TypeError, ValueError, decimal.InvalidOperation) as e:
                            print(f"[DEBUG] Bybit: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {t.get('symbol', 'unknown')}: {e}")
                            continue
                    print(f"[DEBUG] Bybit: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                else:
                    print(f"[API_ERROR] Bybit: retCode={data.get('retCode')}, retMsg={data.get('retMsg')}")
                    
    except asyncio.TimeoutError:
        print("[API_ERROR] Bybit: Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
    except Exception as e:
        print(f"[API_ERROR] Bybit: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {type(e).__name__}: {e}")
        print(f"[API_ERROR] Bybit: Traceback: {traceback.format_exc()}")
    
    return results

async def get_mexc_data(api_key: str, secret_key: str):
    results = []
    ticker_url = "https://contract.mexc.com/api/v1/contract/ticker"
    funding_rate_url = "https://contract.mexc.com/api/v1/contract/funding_rate"

    try:
        print("[DEBUG] MEXC: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä–∞–º –∏ —Å—Ç–∞–≤–∫–∞–º...")
        async with aiohttp.ClientSession() as session:
            tasks = [
                session.get(ticker_url, timeout=15),
                session.get(funding_rate_url, timeout=15)
            ]
            responses = await asyncio.gather(*tasks, return_exceptions=True)

            ticker_response, funding_response = responses
            
            if isinstance(ticker_response, Exception) or ticker_response.status != 200:
                print(f"[API_ERROR] MEXC Ticker: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—Ç–∞—Ç—É—Å: {getattr(ticker_response, 'status', 'N/A')}")
                return []
            
            if isinstance(funding_response, Exception) or funding_response.status != 200:
                print(f"[API_ERROR] MEXC Funding: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—Ç–∞—Ç—É—Å: {getattr(funding_response, 'status', 'N/A')}")
                return []
                
            ticker_data = await ticker_response.json()
            funding_data = await funding_response.json()

            funding_info = {}
            if funding_data.get("success") and funding_data.get("data"):
                for item in funding_data["data"]:
                    symbol = item.get("symbol")
                    if symbol:
                        try:
                            funding_info[symbol] = {
                                'rate': Decimal(str(item.get("fundingRate", "0"))),
                                'next_funding_time': int(item.get("nextSettleTime", 0))
                            }
                        except (TypeError, ValueError, decimal.InvalidOperation) as e:
                            print(f"[DEBUG] MEXC: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è {symbol}: {e}")
                            continue
            print(f"[DEBUG] MEXC: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(funding_info)} —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞.")

            if ticker_data.get("success") and ticker_data.get("data"):
                print(f"[DEBUG] MEXC: –ü–æ–ª—É—á–µ–Ω–æ {len(ticker_data['data'])} —Ç–∏–∫–µ—Ä–æ–≤.")
                for ticker in ticker_data["data"]:
                    symbol = ticker.get("symbol")
                    if not symbol or not symbol.endswith("_USDT"):
                        continue

                    if symbol in funding_info:
                        try:
                            rate = funding_info[symbol]['rate']
                            next_funding = funding_info[symbol]['next_funding_time']
                            volume_usdt = Decimal(str(ticker.get("amount24", "0")))

                            results.append({
                                'exchange': 'MEXC',
                                'symbol': symbol.replace("_", ""),
                                'rate': rate,
                                'next_funding_time': next_funding,
                                'volume_24h_usdt': volume_usdt,
                                'max_order_value_usdt': Decimal('0'),
                                'trade_url': f'https://futures.mexc.com/exchange/{symbol}'
                            })
                        except (TypeError, ValueError, decimal.InvalidOperation, KeyError) as e:
                            print(f"[DEBUG] MEXC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
                            continue
                
                print(f"[DEBUG] MEXC: –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
            else:
                 print(f"[API_ERROR] MEXC Ticker: API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    except asyncio.TimeoutError:
        print("[API_ERROR] MEXC: Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
    except Exception as e:
        print(f"[API_ERROR] MEXC: –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {type(e).__name__}: {e}")
        print(f"[API_ERROR] MEXC: Traceback: {traceback.format_exc()}")
    
    return results

async def fetch_all_data(context: ContextTypes.DEFAULT_TYPE | Application, force_update=False):
    now = datetime.now().timestamp()
    if not force_update and api_data_cache["last_update"] and (now - api_data_cache["last_update"] < CACHE_LIFETIME_SECONDS):
        return api_data_cache["data"]

    bot_data = context.bot_data if isinstance(context, Application) else context.bot_data
    
    print("[DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å API...")
    mexc_api_key = bot_data.get('mexc_api_key')
    mexc_secret_key = bot_data.get('mexc_secret_key')
    bybit_api_key = bot_data.get('bybit_api_key')
    bybit_secret_key = bot_data.get('bybit_secret_key')
    
    tasks = [
        get_bybit_data(api_key=bybit_api_key, secret_key=bybit_secret_key), 
        get_mexc_data(api_key=mexc_api_key, secret_key=mexc_secret_key)
    ]
    results_from_tasks = await asyncio.gather(*tasks, return_exceptions=True)
    
    all_data = []
    for i, res in enumerate(results_from_tasks):
        exchange_name = ['Bybit', 'MEXC'][i]
        if isinstance(res, list): 
            all_data.extend(res)
            print(f"[DEBUG] {exchange_name}: –î–æ–±–∞–≤–ª–µ–Ω–æ {len(res)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"[DEBUG] {exchange_name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {res}")
            
    print(f"[DEBUG] –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    api_data_cache["data"], api_data_cache["last_update"] = all_data, now
    return all_data


async def fetch_funding_history_async(symbol, start_time, end_time):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å MEXC."""
    url = f"https://contract.mexc.com/api/v1/contract/funding_rate/history"
    params = {'symbol': symbol, 'page_size': 100, 'start_time': start_time, 'end_time': end_time}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                response.raise_for_status()
                data = await response.json()
                if data.get("success"): return data.get('data', [])
                else: return []
    except Exception: return []

async def fetch_klines_async(symbol, start_time, end_time):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ —Å MEXC."""
    url = f"https://contract.mexc.com/api/v1/contract/kline/{symbol}"
    all_klines = []
    current_time = start_time
    try:
        async with aiohttp.ClientSession() as session:
            while current_time < end_time:
                params = {'symbol': symbol, 'interval': 'Min1', 'start': int(current_time / 1000), 'end': int(end_time / 1000)}
                async with session.get(url, params=params, timeout=20) as response:
                    response.raise_for_status()
                    data = await response.json()
                    if data.get("success") and data.get('data', {}).get('time'):
                        klines = data['data']
                        for i in range(len(klines['time'])):
                            all_klines.append([klines['time'][i] * 1000, klines['open'][i], klines['high'][i], klines['low'][i], klines['close'][i], klines['vol'][i]])
                        last_time = klines['time'][-1] * 1000
                        if last_time >= current_time: current_time = last_time + 60000
                        else: break
                    else: break
    except Exception: return []
    return all_klines

# =================================================================
# ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° –° –£–ú–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú ==========
# =================================================================

@require_access()
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"--- –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id} ---")
    ensure_user_settings(update.effective_chat.id, update.effective_user.id)
    main_menu_keyboard = [["üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å"], ["üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"], ["üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API"]]
    reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RateHunter 2.0 —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º!", reply_markup=reply_markup)

@require_access()
async def api_diagnostics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    msg = await update.message.reply_text("üîß –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API...")
    
    all_data = await fetch_all_data(context, force_update=True)
    
    exchange_counts = {}
    for item in all_data:
        exchange = item.get('exchange', 'Unknown')
        exchange_counts[exchange] = exchange_counts.get(exchange, 0) + 1
    
    rates_analysis = {"high_rates": 0, "medium_rates": 0, "low_rates": 0}
    volume_analysis = {"high_volume": 0, "medium_volume": 0, "low_volume": 0}
    
    for item in all_data:
        rate_pct = abs(item['rate']) * 100
        volume_m = item.get('volume_24h_usdt', Decimal('0')) / 1_000_000
        
        if rate_pct >= 0.5:
            rates_analysis["high_rates"] += 1
        elif rate_pct >= 0.1:
            rates_analysis["medium_rates"] += 1
        else:
            rates_analysis["low_rates"] += 1
            
        if volume_m >= 100:
            volume_analysis["high_volume"] += 1
        elif volume_m >= 10:
            volume_analysis["medium_volume"] += 1
        else:
            volume_analysis["low_volume"] += 1
    
    report = "üîß **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API**\n\n"
    
    if exchange_counts:
        for exchange, count in exchange_counts.items():
            status_emoji = "‚úÖ" if count > 0 else "‚ùå"
            report += f"{status_emoji} **{exchange}**: {count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
    else:
        report += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏\n"
    
    report += f"\nüìä **–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫:**\n"
    report += f"‚Ä¢ ‚â• 0.5%: {rates_analysis['high_rates']} –ø–∞—Ä\n"
    report += f"‚Ä¢ 0.1-0.5%: {rates_analysis['medium_rates']} –ø–∞—Ä\n"
    report += f"‚Ä¢ < 0.1%: {rates_analysis['low_rates']} –ø–∞—Ä\n"
    
    report += f"\nüí∞ **–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:**\n"
    report += f"‚Ä¢ ‚â• 100M USDT: {volume_analysis['high_volume']} –ø–∞—Ä\n"
    report += f"‚Ä¢ 10-100M USDT: {volume_analysis['medium_volume']} –ø–∞—Ä\n"
    report += f"‚Ä¢ < 10M USDT: {volume_analysis['low_volume']} –ø–∞—Ä\n"
    
    if all_data:
        top_rates = sorted(all_data, key=lambda x: abs(x['rate']), reverse=True)[:5]
        report += f"\nüî• **–¢–æ–ø-5 —Å—Ç–∞–≤–æ–∫:**\n"
        for item in top_rates:
            rate_pct = abs(item['rate']) * 100
            vol_m = item.get('volume_24h_usdt', Decimal('0')) / 1_000_000
            report += f"‚Ä¢ {item['symbol'].replace('USDT', '')}: {rate_pct:.3f}% (–æ–±—ä–µ–º: {vol_m:.1f}M) [{item['exchange']}]\n"
    
    report += f"\n‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(MSK_TIMEZONE).strftime('%H:%M:%S MSK')}"
    report += f"\nüïë –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {CACHE_LIFETIME_SECONDS} —Å–µ–∫"
    
    report += "\n\nüîë **–°—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–π:**\n"
    mexc_key = context.bot_data.get('mexc_api_key')
    bybit_key = context.bot_data.get('bybit_api_key')
    
    report += f"{'‚úÖ' if mexc_key else '‚ùå'} MEXC: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if mexc_key else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}\n"
    report += f"{'‚úÖ' if bybit_key else '‚ùå'} Bybit: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if bybit_key else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}\n"
    
    await msg.edit_text(report, parse_mode='Markdown')

# ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô =====
async def analyze_funding_opportunity(item: Dict) -> Dict:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
    """
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    stability_analysis = await funding_analyzer.analyze_funding_stability(
        symbol=item['symbol'],
        exchange=item['exchange'], 
        current_rate=item['rate']
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫ –¥–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞
    item['stability_analysis'] = stability_analysis
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    recommendation = stability_analysis['recommendation']
    confidence = stability_analysis['confidence']
    
    # –≠–º–æ–¥–∑–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendation_map = {
        'ideal_arbitrage': {
            'emoji': '‚úÖ',
            'message': '–ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'details': '–°—Ç–∞–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫'
        },
        'risky_arbitrage': {
            'emoji': '‚ö†Ô∏è', 
            'message': '–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ',
            'details': '–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏'
        },
        'contrarian_opportunity': {
            'emoji': 'üî•',
            'message': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ', 
            'details': '–°—Ç–∞–≤–∫–∞ –∏—Å—Ç–æ—â–∞–µ—Ç—Å—è'
        },
        'unclear_signal': {
            'emoji': '‚ö™Ô∏è',
            'message': '–ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ',
            'details': '–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã'
        },
        'rate_too_low': {
            'emoji': 'üìâ',
            'message': '–°—Ç–∞–≤–∫–∞ –Ω–∏–∑–∫–∞—è',
            'details': '–ù–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ø–æ—Ä–æ–≥–∞'
        },
        'insufficient_data': {
            'emoji': '‚ùì',
            'message': '–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö',
            'details': '–ù—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫'
        }
    }
    
    rec_info = recommendation_map.get(recommendation, {
        'emoji': '‚ùì',
        'message': '–ê–Ω–∞–ª–∏–∑...',
        'details': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'
    })
    
    item['smart_recommendation'] = {
        'emoji': rec_info['emoji'],
        'message': rec_info['message'],
        'details': rec_info['details'],
        'confidence': confidence,
        'recommendation_type': recommendation
    }
    
    return item

@require_access()
async def show_top_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']

    msg = update.callback_query.message if update.callback_query else await update.message.reply_text("üîÑ –ò—â—É...")
    await msg.edit_text("üîÑ –ò—â—É –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")

    all_data = await fetch_all_data(context)
    if not all_data:
        await msg.edit_text("üòû –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    print(f"[DEBUG] –§–∏–ª—å—Ç—Ä—ã: –±–∏—Ä–∂–∏={settings['exchanges']}, —Å—Ç–∞–≤–∫–∞>={settings['funding_threshold']}, –æ–±—ä–µ–º>={settings['volume_threshold_usdt']}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_data = [
        item for item in all_data 
        if item['exchange'] in settings['exchanges'] 
        and abs(item['rate']) >= settings['funding_threshold'] 
        and item.get('volume_24h_usdt', Decimal('0')) >= settings['volume_threshold_usdt']
    ]
    
    if not filtered_data:
        exchange_filtered = [item for item in all_data if item['exchange'] in settings['exchanges']]
        rate_filtered = [item for item in exchange_filtered if abs(item['rate']) >= settings['funding_threshold']]
        
        stats_msg = f"üòû –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n"
        stats_msg += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        stats_msg += f"‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(all_data)}\n"
        stats_msg += f"‚Ä¢ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö: {len(exchange_filtered)}\n"
        stats_msg += f"‚Ä¢ –°–æ —Å—Ç–∞–≤–∫–æ–π ‚â• {settings['funding_threshold']*100:.1f}%: {len(rate_filtered)}\n"
        stats_msg += f"‚Ä¢ –° –æ–±—ä–µ–º–æ–º ‚â• {settings['volume_threshold_usdt']/1_000:.0f}K: {len(filtered_data)}\n\n"
        
        if rate_filtered:
            stats_msg += f"üî• **–¢–æ–ø-3 —Å–æ —Å—Ç–∞–≤–∫–æ–π ‚â• {settings['funding_threshold']*100:.1f}%:**\n"
            for item in sorted(rate_filtered, key=lambda x: abs(x['rate']), reverse=True)[:3]:
                rate_pct = abs(item['rate']) * 100
                vol_m = item.get('volume_24h_usdt', Decimal('0')) / 1_000_000
                direction = "üü¢ LONG" if item['rate'] < 0 else "üî¥ SHORT"
                stats_msg += f"{direction} {item['symbol'].replace('USDT', '')} `{rate_pct:.2f}%` (–æ–±—ä–µ–º: {vol_m:.1f}M) [{item['exchange']}]\n"
        
        await msg.edit_text(stats_msg, parse_mode='Markdown')
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    filtered_data.sort(key=lambda x: abs(x['rate']), reverse=True)
    top_5 = filtered_data[:5]

    # ===== –ß–ò–°–¢–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –ë–ï–ó –ò–ò =====
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ä–∞–∑—É
    context.chat_data = context.chat_data or {}
    context.chat_data['current_opportunities'] = top_5

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üî• **–¢–û–ü-5 —Ñ–∞–Ω–¥–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π**\n\n"
    buttons = []
    now_utc = datetime.now(timezone.utc)
    
    for item in top_5:
        symbol_only = item['symbol'].replace("USDT", "")
        funding_dt_utc = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=timezone.utc)
        time_left = funding_dt_utc - now_utc
        countdown_str = ""
        if time_left.total_seconds() > 0:
            h, m = divmod(int(time_left.total_seconds()) // 60, 60)
            countdown_str = f" ({h}—á {m}–º)" if h > 0 else f" ({m}–º)" if m > 0 else " (<1–º)"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ß–ò–°–¢–û –ò –ü–û–ù–Ø–¢–ù–û
        arrow = "üü¢" if item['rate'] < 0 else "üî¥"
        rate_str = f"{item['rate'] * 100:+.2f}%"
        time_str = funding_dt_utc.astimezone(MSK_TIMEZONE).strftime('%H:%M –ú–°–ö')
        
        message_text += f"{arrow} **{symbol_only}** {rate_str} | üïë {time_str} {countdown_str} | {item['exchange']}\n"

        buttons.append(InlineKeyboardButton(symbol_only, callback_data=f"drill_{item['symbol']}"))

    message_text += "\nüí° *–•–æ—Ç–∏—Ç–µ –ò–ò-–∞–Ω–∞–ª–∏–∑? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ* ‚Üì"

    # –ö–Ω–æ–ø–∫–∏: –¥–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç + –ò–ò-–∞–Ω–∞–ª–∏–∑
    detail_buttons = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    ai_buttons = [
        [InlineKeyboardButton("üß† –ò–ò-–ê–Ω–∞–ª–∏–∑", callback_data="ai_analysis")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="back_to_top")]
    ]
    
    keyboard = detail_buttons + ai_buttons
    await msg.edit_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True)

# ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–ò-–ê–ù–ê–õ–ò–ó =====
async def show_ai_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    await query.answer()
    await query.edit_message_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    opportunities = context.chat_data.get('current_opportunities', [])
    
    if not opportunities:
        await query.edit_message_text(
            "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]])
        )
        return

    # ===== –ü–†–ò–ú–ï–ù–Ø–ï–ú –ò–ò-–ê–ù–ê–õ–ò–ó =====
    print(f"[AI_ANALYSIS] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
    
    analyzed_opportunities = []
    for item in opportunities:
        analyzed_item = await analyze_funding_opportunity(item)
        analyzed_opportunities.append(analyzed_item)
        print(f"[AI_ANALYSIS] {item['symbol']}: {analyzed_item['smart_recommendation']['message']}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
    message_text = "üß† **–ò–ò-–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π**\n\n"
    message_text += "*–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
    
    buttons = []
    for item in analyzed_opportunities:
        symbol_only = item['symbol'].replace("USDT", "")
        rec = item['smart_recommendation']
        confidence = rec['confidence']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if confidence >= 0.8:
            confidence_text = "–ò–ò –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω"
        elif confidence >= 0.6:
            confidence_text = "–ò–ò –¥–æ–≤–æ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω"  
        elif confidence >= 0.4:
            confidence_text = "–ò–ò —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è"
        else:
            confidence_text = "–ò–ò –Ω–µ —É–≤–µ—Ä–µ–Ω"
            
        message_text += f"{rec['emoji']} **{symbol_only}** - {rec['message']}\n"
        message_text += f"   _{confidence_text} ({confidence:.0%})_\n\n"

        buttons.append(InlineKeyboardButton(f"{rec['emoji']} {symbol_only}", callback_data=f"ai_detail_{item['symbol']}"))

    message_text += "üí° *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞*"

    # –ö–Ω–æ–ø–∫–∏: –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç + –Ω–∞–∑–∞–¥
    coin_buttons = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]]
    
    keyboard = coin_buttons + back_button
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò-–ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´ =====
async def show_ai_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    symbol_to_analyze = query.data.split('_')[2]  # ai_detail_SYMBOLUSDT
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    opportunities = context.chat_data.get('current_opportunities', [])
    target_item = None
    
    for item in opportunities:
        if item['symbol'] == symbol_to_analyze:
            target_item = item
            break
    
    if not target_item:
        await query.edit_message_text(
            "‚ùì –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò", callback_data="ai_analysis")]])
        )
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ
    analyzed_item = await analyze_funding_opportunity(target_item)
    symbol_only = symbol_to_analyze.replace("USDT", "")
    rec = analyzed_item['smart_recommendation']
    stability = analyzed_item['stability_analysis']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    message_text = f"üß† **–ò–ò-–ê–Ω–∞–ª–∏–∑: {symbol_only}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    rate_pct = abs(target_item['rate']) * 100
    message_text += f"üìà **–°—Ç–∞–≤–∫–∞:** {target_item['rate'] * 100:+.2f}%\n"
    message_text += f"üìä **–¢—Ä–µ–Ω–¥:** {stability['trend'].title()}\n"
    message_text += f"‚ö° **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:** {stability['stability'].title()}\n"
    message_text += f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {rec['message'].upper()}\n\n"
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç
    message_text += "‚ùì **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?**\n"
    
    explanation_map = {
        'ideal_arbitrage': "–°—Ç–∞–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞. –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–µ.",
        'risky_arbitrage': "–°—Ç–∞–≤–∫–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –º–æ–∂–µ—Ç —Ä–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è. –†–∏—Å–∫ –ø–æ—Ç–µ—Ä—å –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –¢–æ—Ä–≥–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.",
        'contrarian_opportunity': "–°—Ç–∞–≤–∫–∞ –∏—Å—Ç–æ—â–∞–µ—Ç—Å—è - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã.",
        'unclear_signal': "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –ò–ò. –°–∏—Ç—É–∞—Ü–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è. –õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.",
        'rate_too_low': "–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–π –ø—Ä–∏–±—ã–ª–∏. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.",
        'insufficient_data': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ò–ò –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."
    }
    
    explanation = explanation_map.get(rec['recommendation_type'], "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")
    message_text += f"_{explanation}_\n\n"
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    if rec['recommendation_type'] == 'ideal_arbitrage':
        message_text += "‚úÖ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
        message_text += "‚Ä¢ –ú–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º\n"
        message_text += "‚Ä¢ –î–µ—Ä–∂–∞—Ç—å –¥–æ –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n"
        message_text += "‚Ä¢ –†–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª–µ–Ω\n\n"
    elif rec['recommendation_type'] == 'risky_arbitrage':
        message_text += "‚ö†Ô∏è **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
        message_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
        message_text += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ—Å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å\n"
        message_text += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä—ã–Ω–∫–æ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n\n"
    elif rec['recommendation_type'] == 'contrarian_opportunity':
        message_text += "üî• **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
        message_text += "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–ª–∞—Ç—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n"
        message_text += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        message_text += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞\n\n"
    else:
        message_text += "‚è∏Ô∏è **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
        message_text += "‚Ä¢ –õ—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å\n"
        message_text += "‚Ä¢ –î–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n"
        message_text += "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n\n"
    
    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
    confidence = rec['confidence']
    if confidence >= 0.8:
        confidence_text = "–æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω"
        confidence_explanation = "(–∫–∞–∫ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 90%)"
    elif confidence >= 0.6:
        confidence_text = "–¥–æ–≤–æ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω"
        confidence_explanation = "(–∫–∞–∫ –º–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞)"
    elif confidence >= 0.4:
        confidence_text = "—Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è"
        confidence_explanation = "(—Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)"
    else:
        confidence_text = "–Ω–µ —É–≤–µ—Ä–µ–Ω"
        confidence_explanation = "(–º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)"
        
    message_text += f"üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò:** {confidence:.0%}\n"
    message_text += f"_–ò–ò {confidence_text} {confidence_explanation}_"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò-–∞–Ω–∞–ª–∏–∑—É", callback_data="ai_analysis")],
        [InlineKeyboardButton("üè† –ö —Ç–æ–ø—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π", callback_data="back_to_top")]
    ]
    
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï CALLBACK –§–£–ù–ö–¶–ò–ò =====
async def drill_down_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    symbol_to_show = query.data.split('_')[1]
    await query.answer()

    all_data = api_data_cache.get("data", [])
    if not all_data:
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        all_data = await fetch_all_data(context, force_update=True)
        
    symbol_data = sorted([item for item in all_data if item['symbol'] == symbol_to_show], key=lambda x: abs(x['rate']), reverse=True)
    symbol_only = symbol_to_show.replace("USDT", "")
    message_text = f"üíé **–î–µ—Ç–∞–ª–∏ –ø–æ {symbol_only}**\n\n"
    now_utc = datetime.now(timezone.utc)
    
    for item in symbol_data:
        funding_dt_utc = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=timezone.utc)
        time_left = funding_dt_utc - now_utc
        countdown_str = ""
        if time_left.total_seconds() > 0:
            h, m = divmod(int(time_left.total_seconds()) // 60, 60)
            countdown_str = f" ({h}—á {m}–º)" if h > 0 else f" ({m}–º)" if m > 0 else " (<1–º)"
        
        direction, rate_str = ("üü¢ –õ–û–ù–ì", f"{item['rate'] * 100:+.2f}%") if item['rate'] < 0 else ("üî¥ –®–û–†–¢", f"{item['rate'] * 100:+.2f}%")
        time_str = funding_dt_utc.astimezone(MSK_TIMEZONE).strftime('%H:%M –ú–°–ö')
        vol = item.get('volume_24h_usdt', Decimal('0'))
        vol_str = f"{vol/10**9:.1f}B" if vol >= 10**9 else f"{vol/10**6:.1f}M" if vol >= 10**6 else f"{vol/10**3:.0f}K"
        
        message_text += f"{direction} `{rate_str}` –≤ `{time_str}{countdown_str}` [{item['exchange']}]({item['trade_url']})\n"
        message_text += f"  *–û–±—ä–µ–º 24—á:* `{vol_str} USDT`\n"
        if (max_pos := item.get('max_order_value_usdt', Decimal('0'))) > 0: 
            message_text += f"  *–ú–∞–∫—Å. –æ—Ä–¥–µ—Ä:* `{max_pos:,.0f}`\n"
        message_text += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    keyboard = [
        [InlineKeyboardButton("üß† –ò–ò-–ê–Ω–∞–ª–∏–∑ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã", callback_data=f"ai_detail_{symbol_to_show}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]
    ]
    await query.edit_message_text(text=message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True)get("data", [])
    if not all_data:
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        all_data = await fetch_all_data(context, force_update=True)
        
    symbol_data = sorted([item for item in all_data if item['symbol'] == symbol_to_show], key=lambda x: abs(x['rate']), reverse=True)
    symbol_only = symbol_to_show.replace("USDT", "")
    message_text = f"üíé **–î–µ—Ç–∞–ª–∏ –ø–æ {symbol_only}**\n\n"
    now_utc = datetime.now(timezone.utc)
    
    for item in symbol_data:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        analyzed_item = await analyze_funding_opportunity(item)
        rec = analyzed_item['smart_recommendation']
        
        funding_dt_utc = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=timezone.utc)
        time_left = funding_dt_utc - now_utc
        countdown_str = ""
        if time_left.total_seconds() > 0:
            h, m = divmod(int(time_left.total_seconds()) // 60, 60)
            countdown_str = f" (–æ—Å—Ç–∞–ª–æ—Å—å {h}—á {m}–º)" if h > 0 else f" (–æ—Å—Ç–∞–ª–æ—Å—å {m}–º)" if m > 0 else " (–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã)"
        
        direction, rate_str = ("üü¢ –õ–û–ù–ì", f"{item['rate'] * 100:+.2f}%") if item['rate'] < 0 else ("üî¥ –®–û–†–¢", f"{item['rate'] * 100:+.2f}%")
        time_str = funding_dt_utc.astimezone(MSK_TIMEZONE).strftime('%H:%M –ú–°–ö')
        vol = item.get('volume_24h_usdt', Decimal('0'))
        vol_str = f"{vol/10**9:.1f}B" if vol >= 10**9 else f"{vol/10**6:.1f}M" if vol >= 10**6 else f"{vol/10**3:.0f}K"
        
        confidence_str = f" ({rec['confidence']:.0%})" if rec['confidence'] > 0 else ""
        
        message_text += f"{direction} `{rate_str}` –≤ `{time_str}{countdown_str}` [{item['exchange']}]({item['trade_url']})\n"
        message_text += f"  *–û–±—ä–µ–º 24—á:* `{vol_str} USDT`\n"
        message_text += f"  {rec['emoji']} *–ò–ò:* _{rec['message']}{confidence_str}_\n"
        if (max_pos := item.get('max_order_value_usdt', Decimal('0'))) > 0: 
            message_text += f"  *–ú–∞–∫—Å. –æ—Ä–¥–µ—Ä:* `{max_pos:,.0f}`\n"
        message_text += "\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]]
    await query.edit_message_text(text=message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True)

async def back_to_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    if query:
        await query.answer()
    await show_top_rates(update, context)

@require_access()
async def send_filters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']
    
    message_text = "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞**"
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∏—Ä–∂–∏", callback_data="filters_exchanges")],
        [InlineKeyboardButton(f"üìà –°—Ç–∞–≤–∫–∞: > {settings['funding_threshold']*100:.2f}%", callback_data="filters_funding")],
        [InlineKeyboardButton(f"üíß –û–±—ä–µ–º: > {format_volume(settings['volume_threshold_usdt'])}", callback_data="filters_volume")],
        [InlineKeyboardButton("üö® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="alert_show_menu")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="filters_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        
@require_access()
async def filters_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_filters_menu(update, context)

async def filters_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    await query.answer()
    action = query.data.split('_', 1)[1]
    if action == "close":
        await query.message.delete()
    elif action == "toggle_notif":
        user_settings[update.effective_chat.id]['settings']['notifications_on'] ^= True
        await send_filters_menu(update, context)
    elif action == "exchanges":
        await show_exchanges_menu(update, context)

async def show_exchanges_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    active_exchanges = user_settings[query.message.chat_id]['settings']['exchanges']
    buttons = [InlineKeyboardButton(f"{'‚úÖ' if ex in active_exchanges else '‚¨úÔ∏è'} {ex}", callback_data=f"exch_{ex}") for ex in ALL_AVAILABLE_EXCHANGES]
    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)] + [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="exch_back")]]
    await query.edit_message_text("üè¶ **–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏**", reply_markup=InlineKeyboardMarkup(keyboard))

async def exchanges_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    await query.answer()
    action = query.data.split('_', 1)[1]
    if action == "back": 
        await send_filters_menu(update, context)
    else:
        active_exchanges = user_settings[query.message.chat_id]['settings']['exchanges']
        if action in active_exchanges: 
            active_exchanges.remove(action)
        else: 
            active_exchanges.append(action)
        await show_exchanges_menu(update, context)

async def ask_for_value(update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str, menu_to_return: callable):
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    await query.answer()
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']
    
    prompts = {
        'funding': (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å—Ç–∞–≤–∫–∏: `> {settings['funding_threshold']*100:.2f}%`.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.75`)."),
        'volume': (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: `{format_volume(settings['volume_threshold_usdt'])}`.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `500k` –∏–ª–∏ `2M`)."),
        'alert_rate': (f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: `> {settings['alert_rate_threshold']*100:.2f}%`.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1.5`)."),
        'alert_time': (f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: `< {settings['alert_time_window_minutes']} –º–∏–Ω—É—Ç`.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `45`).")
    }
    await query.message.delete()
    sent_message = await context.bot.send_message(chat_id=chat_id, text=prompts[setting_type] + "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.", parse_mode='Markdown')
    context.user_data.update({'prompt_message_id': sent_message.message_id, 'menu_to_return': menu_to_return})
    
    state_map = {'funding': SET_FUNDING_THRESHOLD, 'volume': SET_VOLUME_THRESHOLD, 'alert_rate': SET_ALERT_RATE, 'alert_time': SET_ALERT_TIME}
    return state_map.get(setting_type)

async def save_value(update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
        
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']
    
    try:
        value_str = update.message.text.strip().replace(",", ".").upper()
        if setting_type == 'funding' or setting_type == 'alert_rate':
            value = Decimal(value_str)
            if not (0 < value < 100): raise ValueError("Value out of range 0-100")
            key = 'funding_threshold' if setting_type == 'funding' else 'alert_rate_threshold'
            settings[key] = value / 100
        elif setting_type == 'volume':
            num_part = value_str.replace('K', '').replace('M', '')
            multiplier = 1000 if 'K' in value_str else 1_000_000 if 'M' in value_str else 1
            settings['volume_threshold_usdt'] = Decimal(num_part) * multiplier
        elif setting_type == 'alert_time':
            value = int(value_str)
            if value <= 0: raise ValueError("Value must be positive")
            settings['alert_time_window_minutes'] = value
    except (ValueError, TypeError, decimal.InvalidOperation):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode='Markdown')
        return

    if 'prompt_message_id' in context.user_data:
        await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
    await context.bot.delete_message(chat_id, update.message.message_id)
    await context.user_data.pop('menu_to_return')(update, context)
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
        
    chat_id = update.effective_chat.id
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id, context.user_data.pop('prompt_message_id'))
        except Exception: pass
    try: await context.bot.delete_message(chat_id, update.message.id)
    except Exception: pass
    await context.bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if 'menu_to_return' in context.user_data:
        await context.user_data.pop('menu_to_return')(update, context)
    return ConversationHandler.END
    
@require_access()
async def show_my_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']
    
    exchanges_list = ", ".join(settings['exchanges'])
    vol = settings['volume_threshold_usdt']
    vol_str = f"{vol / 1_000_000:.1f}M" if vol >= 1_000_000 else f"{vol / 1_000:.0f}K"
    
    message_text = f"""‚ÑπÔ∏è **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

üè¶ **–ë–∏—Ä–∂–∏:** {exchanges_list}
üìà **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:** > {settings['funding_threshold']*100:.2f}%
üíß **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º:** > {vol_str} USDT
üìï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–í–∫–ª—é—á–µ–Ω—ã' if settings['alerts_on'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
"""
    await update.message.reply_text(message_text, parse_mode='Markdown')

# --- –ë–ª–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def show_alerts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    if update.callback_query and not check_access(update.effective_user.id):
        await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    if query := update.callback_query: 
        await query.answer()
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    ensure_user_settings(chat_id, user_id)
    settings = user_settings[chat_id]['settings']
    
    status_emoji = "‚úÖ" if settings.get('alerts_on', False) else "üî¥"
    status_text = "–í–ö–õ–Æ–ß–ï–ù–´" if settings.get('alerts_on', False) else "–í–´–ö–õ–Æ–ß–ï–ù–´"
    message_text = "üö® **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–∏–≥–Ω–∞–ª, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –æ–±–∞ —É—Å–ª–æ–≤–∏—è."
    
    keyboard = [
        [InlineKeyboardButton(f"üìà –ü–æ—Ä–æ–≥ —Å—Ç–∞–≤–∫–∏: > {settings['alert_rate_threshold']*100:.2f}%", callback_data="alert_set_rate")],
        [InlineKeyboardButton(f"‚è∞ –û–∫–Ω–æ –¥–æ –≤—ã–ø–ª–∞—Ç—ã: < {settings['alert_time_window_minutes']} –º–∏–Ω", callback_data="alert_set_time")],
        [InlineKeyboardButton(f"{status_emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status_text}", callback_data="alert_toggle_on")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="alert_back_filters")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def alert_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    
    if not check_access(update.effective_user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
        
    action = query.data.split('_', 1)[1]
    
    await query.answer()
    if action == "toggle_on":
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        ensure_user_settings(chat_id, user_id)
        user_settings[chat_id]['settings']['alerts_on'] ^= True
        await show_alerts_menu(update, context)
    elif action == "back_filters":
        await send_filters_menu(update, context)

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–û–ù–û–í–´–ô –°–ö–ê–ù–ï–† =====
async def background_scanner(app: Application):
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("üöÄ –§–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        try:
            all_data = await fetch_all_data(app, force_update=True)
            if not all_data: 
                continue

            now_utc = datetime.now(timezone.utc)
            current_ts_ms = int(now_utc.timestamp() * 1000)

            # ===== –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï =====
            for chat_id, user_data in list(user_settings.items()):
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                stored_user_id = user_data.get('user_id')
                if not stored_user_id or not check_access(stored_user_id):
                    print(f"[BG_SCANNER] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º chat_id {chat_id}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (user_id: {stored_user_id})")
                    continue
                    
                settings = user_data['settings']
                if not settings.get('alerts_on', False): 
                    continue

                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤)
                settings['sent_notifications'] = {nid for nid in settings['sent_notifications'] if int(nid.split('_')[-1]) > current_ts_ms - (3 * 60 * 60 * 1000)}
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for item in all_data:
                    if item['exchange'] not in settings['exchanges']: 
                        continue
                    if abs(item['rate']) < settings['alert_rate_threshold']: 
                        continue

                    time_left = datetime.fromtimestamp(item['next_funding_time'] / 1000, tz=timezone.utc) - now_utc
                    if not (0 < time_left.total_seconds() <= settings['alert_time_window_minutes'] * 60): 
                        continue

                    # –ê–Ω—Ç–∏-—Å–ø–∞–º
                    notification_id = f"{item['exchange']}_{item['symbol']}_{item['next_funding_time']}"
                    if notification_id in settings['sent_notifications']: 
                        continue
                    
                    # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
                    h, m = divmod(int(time_left.total_seconds() // 60), 60)
                    countdown_str = f"{h}—á {m}–º" if h > 0 else f"{m}–º"
                    message = (f"‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω —Ñ–∞–Ω–¥–∏–Ω–≥ –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É!**\n\n"
                               f"{'üü¢' if item['rate'] < 0 else 'üî¥'} **{item['symbol'].replace('USDT', '')}** `{item['rate'] * 100:+.2f}%`\n"
                               f"‚è∞ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ *{countdown_str}* –Ω–∞ *{item['exchange']}*")
                    try:
                        await app.bot.send_message(chat_id, message, parse_mode='Markdown')
                        settings['sent_notifications'].add(notification_id)
                        print(f"[BG_SCANNER] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è chat_id {chat_id} (user_id {stored_user_id}): {notification_id}")
                    except Exception as e:
                        print(f"[BG_SCANNER] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è chat_id {chat_id}: {e}")
        except Exception as e:
            print(f"[BG_SCANNER] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞–Ω–µ—Ä–∞: {e}\n{traceback.format_exc()}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_unauthorized_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not check_access(update.effective_user.id):
        await access_denied_message(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    await update.message.reply_text(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )

async def get_data_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    message = await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ MYX_USDT –∑–∞ –≤—á–µ—Ä–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    symbol_to_fetch = "MYX_USDT"
    today = datetime.utcnow().date()
    end_of_yesterday = datetime.combine(today, datetime.min.time())
    start_of_yesterday = end_of_yesterday - timedelta(days=1)
    start_ts_ms = int(start_of_yesterday.timestamp() * 1000)
    end_ts_ms = int(end_of_yesterday.timestamp() * 1000) - 1

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    funding_data = await fetch_funding_history_async(symbol_to_fetch, start_ts_ms, end_ts_ms)
    kline_data = await fetch_klines_async(symbol_to_fetch, start_ts_ms, end_ts_ms)

    if not funding_data and not kline_data:
        await message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ –≤—á–µ—Ä–∞ –Ω–µ –±—ã–ª–æ —Ç–æ—Ä–≥–æ–≤ –∏–ª–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞.")
        return
        
    await message.edit_text("–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª—ã...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º
    if funding_data:
        df_funding = pd.DataFrame(funding_data)
        json_buffer = io.StringIO()
        df_funding.to_json(json_buffer, orient="records", indent=4)
        json_buffer.seek(0)
        await context.bot.send_document(
            chat_id=user_id,
            document=io.BytesIO(json_buffer.read().encode()),
            filename="funding_history.json"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ —Å–≤–µ—á–∞–º–∏
    if kline_data:
        df_klines = pd.DataFrame(kline_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        json_buffer = io.StringIO()
        df_klines.to_json(json_buffer, orient="records", indent=4)
        json_buffer.seek(0)
        await context.bot.send_document(
            chat_id=user_id,
            document=io.BytesIO(json_buffer.read().encode()),
            filename="klines_1m.json"
        )
    
    await message.edit_text("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–∫—É.")

# =================================================================
# ========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========================
# =================================================================

if __name__ == "__main__":
    if not BOT_TOKEN:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if not ALLOWED_USERS or ALLOWED_USERS == [123456789, 987654321]:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ALLOWED_USERS –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID!")
        print("   –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ ID –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot")
    
    from telegram.ext import Application
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ API
    app.bot_data['mexc_api_key'] = os.getenv("MEXC_API_KEY")
    app.bot_data['mexc_secret_key'] = os.getenv("MEXC_API_SECRET")
    app.bot_data['bybit_api_key'] = os.getenv("BYBIT_API_KEY")
    app.bot_data['bybit_secret_key'] = os.getenv("BYBIT_API_SECRET")

    if app.bot_data['bybit_api_key']: 
        print("‚úÖ –ö–ª—é—á–∏ Bybit —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    else: 
        print("‚ö†Ô∏è –ö–ª—é—á–∏ Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    print("‚ÑπÔ∏è –ö–ª—é—á–∏ –¥–ª—è MEXC (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")

    # --- 3. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
    
    fallbacks = [CommandHandler("cancel", cancel_conversation)]

    conv_handlers = [
        ConversationHandler(
            entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'funding', send_filters_menu), pattern="^filters_funding$")],
            states={
                SET_FUNDING_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'funding'))]
            },
            fallbacks=fallbacks,
            allow_reentry=True
        ),
        ConversationHandler(
            entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'volume', send_filters_menu), pattern="^filters_volume$")],
            states={
                SET_VOLUME_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'volume'))]
            },
            fallbacks=fallbacks,
            allow_reentry=True
        ),
        ConversationHandler(
            entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'alert_rate', show_alerts_menu), pattern="^alert_set_rate$")],
            states={
                SET_ALERT_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'alert_rate'))]
            },
            fallbacks=fallbacks,
            allow_reentry=True
        ),
        ConversationHandler(
            entry_points=[CallbackQueryHandler(lambda u, c: ask_for_value(u, c, 'alert_time', show_alerts_menu), pattern="^alert_set_time$")],
            states={
                SET_ALERT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: save_value(u, c, 'alert_time'))]
            },
            fallbacks=fallbacks,
            allow_reentry=True
        ),
    ]
    
    regular_handlers = [
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^üî• –¢–æ–ø-—Å—Ç–∞–≤–∫–∏ —Å–µ–π—á–∞—Å$"), show_top_rates),
        MessageHandler(filters.Regex("^üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã$"), filters_menu_entry),
        MessageHandler(filters.Regex("^‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$"), show_my_settings),
        MessageHandler(filters.Regex("^üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API$"), api_diagnostics),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        CallbackQueryHandler(filters_callback_handler, pattern="^filters_"),
        CallbackQueryHandler(drill_down_callback, pattern="^drill_"),
        CallbackQueryHandler(back_to_top_callback, pattern="^back_to_top$"),
        CallbackQueryHandler(exchanges_callback_handler, pattern="^exch_"),
        CallbackQueryHandler(show_alerts_menu, pattern="^alert_show_menu$"),
        CallbackQueryHandler(alert_callback_handler, pattern="^alert_"),
        # –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        CallbackQueryHandler(show_ai_analysis, pattern="^ai_analysis$"),
        CallbackQueryHandler(show_ai_detail, pattern="^ai_detail_"),
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        MessageHandler(filters.TEXT, handle_unauthorized_message),
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.add_handlers(conv_handlers)
    app.add_handlers(regular_handlers)
    app.add_handler(CommandHandler("getdata", get_data_command))

    # 4. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    async def post_init(app):
        asyncio.create_task(background_scanner(app))

    app.post_init = post_init

    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ RateHunter 2.0 —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞!")
    print(f"üîë –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {ALLOWED_USERS}")
    print("üöÄ –§–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω!")
    print("üß† –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ funding rates –≤–∫–ª—é—á–µ–Ω!")
    app.run_polling()
