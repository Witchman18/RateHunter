import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
TAKER_FEE = 0.0006
MAKER_FEE = 0.0002

# Reply-–∫–Ω–æ–ø–∫–∏
keyboard = [["üìä –¢–æ–ø 5 funding-–ø–∞—Ä"], ["üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"]]

# –ü–∞—Ä—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
latest_top_pairs = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_top_funding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = session.get_tickers(category="linear")
        tickers = response["result"]["list"]
        funding_data = []
        for t in tickers:
            symbol = t["symbol"]
            rate = t.get("fundingRate")
            next_time = t.get("nextFundingTime")
            try:
                rate = float(rate)
                funding_data.append((symbol, rate, int(next_time)))
            except:
                continue

        funding_data.sort(key=lambda x: abs(x[1]), reverse=True)
        top_5 = funding_data[:5]
        global latest_top_pairs
        latest_top_pairs = top_5  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞

        msg = "üìä –¢–æ–ø 5 funding-–ø–∞—Ä:\n\n"
        from datetime import datetime
        now_ts = datetime.utcnow().timestamp()
        for symbol, rate, ts in top_5:
            delta_sec = int(ts / 1000 - now_ts)
            h, m = divmod(delta_sec // 60, 60)
            time_left = f"{h}—á {m}–º"
            direction = "üìà LONG" if rate < 0 else "üìâ SHORT"
            msg += f"{symbol} ‚Äî {rate * 100:.4f}% ‚Üí {direction} ‚è± —á–µ—Ä–µ–∑ {time_left}\n"

        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

async def handle_profit_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not latest_top_pairs:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ üìä –¢–æ–ø 5 funding-–ø–∞—Ä")
        return

    msg = "üí∞ –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (–Ω–∞ 100 USDT, 5x –ø–ª–µ—á–æ):\n\n"
    for symbol, rate, _ in latest_top_pairs:
        margin = 100
        leverage = 5
        position = margin * leverage
        gross = position * rate
        fees = position * (TAKER_FEE * 2)
        spread = position * 0.0002
        net = gross - fees - spread
        msg += (f"{symbol}:\n"
                f"  üìà –ì—Ä—è–∑–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {gross:.2f} USDT\n"
                f"  üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {fees:.2f} USDT\n"
                f"  üìâ –°–ø—Ä–µ–¥: {spread:.2f} USDT\n"
                f"  ‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f} USDT\n\n")
    await update.message.reply_text(msg)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –¢–æ–ø 5 funding-–ø–∞—Ä"), show_top_funding))
    app.add_handler(MessageHandler(filters.Regex("üìà –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"), handle_profit_calc))
    app.run_polling()
