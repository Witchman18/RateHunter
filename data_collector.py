# data_collector.py
import requests
import pandas as pd
from datetime import datetime, timedelta

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
SYMBOL = "MYX_USDT"  # –ú–æ–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º. –ú–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é.
DAYS_AGO = 3         # 1 = –≤—á–µ—Ä–∞, 2 = –ø–æ–∑–∞–≤—á–µ—Ä–∞, –∏ —Ç.–¥.
# -----------------

def fetch_funding_history(symbol, start_time, end_time):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å MEXC."""
    print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è {symbol}...")
    url = f"https://contract.mexc.com/api/v1/contract/funding_rate/history"
    params = {
        'symbol': symbol,
        'page_size': 100, # –û–±—ã—á–Ω–æ –∑–∞ –¥–µ–Ω—å –Ω–µ –±–æ–ª—å—à–µ 24 –≤—ã–ø–ª–∞—Ç
        'start_time': start_time,
        'end_time': end_time
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data.get("success"):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('data', []))} –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–Ω–¥–∏–Ω–≥–µ.")
            return data.get('data', [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API MEXC (—Ñ–∞–Ω–¥–∏–Ω–≥): {data.get('message')}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (—Ñ–∞–Ω–¥–∏–Ω–≥): {e}")
        return []

def fetch_klines(symbol, start_time, end_time):
    """–ü–æ–ª—É—á–∞–µ—Ç 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ —Å MEXC."""
    print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è {symbol} (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
    url = f"https://contract.mexc.com/api/v1/contract/kline/{symbol}"
    all_klines = []
    current_time = start_time
    
    # API MEXC –æ—Ç–¥–∞–µ—Ç –¥–æ 1000 —Å–≤–µ—á–µ–π –∑–∞ —Ä–∞–∑. 
    # –ó–∞ —Å—É—Ç–∫–∏ 1440 –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 2 –∑–∞–ø—Ä–æ—Å–∞.
    while current_time < end_time:
        params = {
            'symbol': symbol,
            'interval': 'Min1',
            'start': int(current_time / 1000),
            'end': int(end_time / 1000)
        }
        try:
            response = requests.get(url, params=params, timeout=20)
            response.raise_for_status()
            data = response.json()
            if data.get("success"):
                klines = data.get('data', {})
                if klines.get('time'):
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    for i in range(len(klines['time'])):
                        all_klines.append([
                            klines['time'][i] * 1000, # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º
                            klines['open'][i],
                            klines['high'][i],
                            klines['low'][i],
                            klines['close'][i],
                            klines['vol'][i]
                        ])
                    # –°–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    last_time = klines['time'][-1] * 1000
                    current_time = last_time + 60000 # +1 –º–∏–Ω—É—Ç–∞
                else:
                    break # –î–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API MEXC (—Å–≤–µ—á–∏): {data.get('message')}")
                break
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (—Å–≤–µ—á–∏): {e}")
            break
            
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_klines)} –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π.")
    return all_klines

if __name__ == "__main__":
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    today = datetime.utcnow().date()
    end_of_yesterday = datetime.combine(today, datetime.min.time())
    start_of_yesterday = end_of_yesterday - timedelta(days=DAYS_AGO)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã (timestamp) –¥–ª—è API
    start_ts_ms = int(start_of_yesterday.timestamp() * 1000)
    end_ts_ms = int(end_of_yesterday.timestamp() * 1000) - 1 # –¥–æ 23:59:59.999
    
    print(f"--- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {SYMBOL} –∑–∞ {start_of_yesterday.strftime('%Y-%m-%d')} ---")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    funding_data = fetch_funding_history(SYMBOL, start_ts_ms, end_ts_ms)
    if funding_data:
        df_funding = pd.DataFrame(funding_data)
        df_funding.to_json("funding_history.json", orient="records", indent=4)
        print("üíæ –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ `funding_history.json`")

    # 2. –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π
    kline_data = fetch_klines(SYMBOL, start_ts_ms, end_ts_ms)
    if kline_data:
        df_klines = pd.DataFrame(kline_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df_klines.to_json("klines_1m.json", orient="records", indent=4)
        print("üíæ 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ `klines_1m.json`")
        
    print("\n--- –ì–æ—Ç–æ–≤–æ! ---")
